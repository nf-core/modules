nextflow_process {

    name "Test Process KRAKENUNIQ_PRELOADEDKRAKENUNIQ"
    script "../main.nf"
    process "KRAKENUNIQ_PRELOADEDKRAKENUNIQ"
    tag "modules"
    tag "modules_nfcore"
    tag "krakenuniq"
    tag "krakenuniq/preloadedkrakenuniq"

    test("sarscov2 - Illumina FASTQ single - stub-run") {
        options "-stub-run"

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [id:'test', single_end:true],
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = []
                input[2] = '8GB'
                input[3] = true
                input[4] = true
                input[5] = true
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }

    test("sarscov2 - Illumina FASTQ paired-end - stub-run") {
        options "-stub-run"

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [id:'test', single_end:false],
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = []
                input[2] = '8GB'
                input[3] = true
                input[4] = true
                input[5] = true
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }
}
