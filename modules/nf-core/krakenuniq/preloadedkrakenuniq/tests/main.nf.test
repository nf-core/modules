nextflow_process {

    name "Test Process KRAKENUNIQ_PRELOADEDKRAKENUNIQ"
    script "../main.nf"
    process "KRAKENUNIQ_PRELOADEDKRAKENUNIQ"
    tag "modules"
    tag "modules_nfcore"
    tag "krakenuniq"
    tag "krakenuniq/preloadedkrakenuniq"
    tag "process"

    setup {
        run("UNTAR") {
            script "modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = [
                    [id: 'krakenuniq'],
                    file('https://github.com/jfy133/nf-core-test-datasets/raw/modules/data/genomics/sarscov2/genome/db/krakenuniq.tar.gz', checkIfExists: true)
                ]
                """
            }
        }
    }

    test("sarscov2 - FASTA") {
        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [id:'test', single_end:true],
                    [
                        file(params.test_data['sarscov2']['genome']['genome_fasta_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = 'fasta'
                input[2] = UNTAR.out.untar.map { it[1] }
                input[3] = '1GB'
                input[4] = true
                input[5] = true
                input[6] = true
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                // Report contains a timestamp.
                { assert file(process.out.report.get(0).get(1)).name == 'genome.krakenuniq.report.txt' },
                { assert snapshot(
                    process.out.classified_reads,
                    process.out.unclassified_reads,
                    process.out.classified_assignment,
                    process.out.versions
                ).match('fasta') },
            )
        }

    }

    test("sarscov2 - Illumina FASTQ single") {
        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [id:'test', single_end:true],
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = 'fastq'
                input[2] = UNTAR.out.untar.map { it[1] }
                input[3] = '1GB'
                input[4] = true
                input[5] = true
                input[6] = true
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                // Report contains a timestamp.
                { assert file(process.out.report.get(0).get(1)).name == 'test_1.krakenuniq.report.txt' },
                { assert snapshot(
                    process.out.classified_reads,
                    process.out.unclassified_reads,
                    process.out.classified_assignment,
                    process.out.versions
                ).match('fastq-single') },
            )
        }

    }

    test("sarscov2 - Illumina FASTQ paired-end") {
        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [id:'test', single_end:false],
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = 'fastq'
                input[2] = UNTAR.out.untar.map { it[1] }
                input[3] = '1GB'
                input[4] = true
                input[5] = true
                input[6] = true
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                // Report contains a timestamp.
                { assert file(process.out.report.get(0).get(1)).name == 'test.krakenuniq.report.txt' },
                { assert snapshot(
                    process.out.classified_reads,
                    process.out.unclassified_reads,
                    process.out.classified_assignment,
                    process.out.versions
                ).match('fastq-paired') },
            )
        }

    }
}
