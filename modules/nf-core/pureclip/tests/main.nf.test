
nextflow_process {

    name "Test Process PURECLIP"
    script "../main.nf"
    process "PURECLIP"

    tag "modules"
    tag "modules_nfcore"
    tag "pureclip"

    test("test-pureclip-no-ctrl") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ],
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true) ]
                ]
				input[1] = [
                    [ id:'test', single_end:false ], // meta map
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true) ],
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true) ]
                ]
				input[2] = [
                    [ id:'test', single_end:false ],
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ]
				input[3] = false

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.crosslinks[0][1]).name,
                    file(process.out.peaks[0][1]).name,
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("test-pureclip-input-ctrl") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ],
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true) ]
                ]
				input[1] = [
                    [ id:'test', single_end:false ], // meta map
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true) ],
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true) ]
                ]
				input[2] = [
                    [ id:'test', single_end:false ],
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ]
				input[3] = true

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.crosslinks[0][1]).name,
                    file(process.out.peaks[0][1]).name,
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("test-pureclip-input-ctrl-stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ],
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true) ]
                ]
				input[1] = [
                    [ id:'test', single_end:false ], // meta map
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true) ],
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true) ] ]
				input[2] = [
                    [ id:'test', single_end:false ],
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ]
				input[3] = true

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
