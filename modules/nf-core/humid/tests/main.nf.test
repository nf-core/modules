nextflow_process {

    name "Test Process HUMID"
    script "../main.nf"
    process "HUMID"

    tag "modules"
    tag "modules_nfcore"
    tag "humid"
    tag "fastp"

    test("sarscov2 - paired-end") {

        // TODO nf-core: If you are created a test for a chained module
        // (the module requires running more than one process to generate the required output)
        // add the 'setup' method here.
        // You can find more information about how to use a 'setup' method in the docs (https://nf-co.re/docs/contributing/modules#steps-for-creating-nf-test-for-chained-modules).

        setup {
            run("FASTP") {
                script "../../fastp/main.nf"
                config "./nextflow.config"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test', single_end:false ],
                        [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true) ]
                    ])
                    input[1] = []
                    input[2] = false
                    input[3] = false
                    """
                }
            }
        }

        when {
            config "./nextflow.config"
            process {
                """
                input[0] = FASTP.out.reads
                input[1] = [[:],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    // test("sarscov2 - paired-end - stub") {

    //     options "-stub"

    //     when {
    //         process {
    //             """
    //             input[0] = Channel.of([
    //                     [ id:'test', single_end:false ],
    //                     [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
    //                     file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true) ]
    //                 ])
    //             input[1] = [[:],[]]
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(process.out).match() }
    //         )
    //     }

    // }

}
