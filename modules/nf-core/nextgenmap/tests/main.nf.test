
nextflow_process {

    name "Test Process NEXTGENMAP"
    script "../main.nf"
    process "NEXTGENMAP"

    tag "modules"
    tag "modules_nfcore"
    tag "nextgenmap"

    test("test-nextgenmap-single") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:true ], // meta map
				    [
				        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
				    ]
                ]
				input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					bam(process.out.bam[0][1]).getReadsMD5(),
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-bwamem2-mem-paired-end") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    [
				        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
				        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
				    ]
                ]
				input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					bam(process.out.bam[0][1]).getReadsMD5(),
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-bwamem2-mem-paired-end-stub") {
        options '-stub'

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    [
				        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
				        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
				    ]
                ]
				input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
