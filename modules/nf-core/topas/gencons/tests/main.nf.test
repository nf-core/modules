nextflow_process {

    name "Test Process TOPAS_GENCONS"
    config "./nextflow.config"
    script "../main.nf"
    process "TOPAS_GENCONS"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk"
    tag "gatk/unifiedgenotyper"
    tag "topas"
    tag "topas/gencons"

        setup {
            run("GATK_UNIFIEDGENOTYPER", alias: "GATK_UNIFIEDGENOTYPERSNPS") {
                script "../../../gatk/unifiedgenotyper/main.nf"
                params {
                    module_args = "--genotype_likelihoods_model SNP -stand_call_conf 30 --sample_ploidy 2 -dcov 250 --output_mode EMIT_ALL_SITES"
                }

                process {
                    """
                    input[0] = [[id:'test'],// meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        ]
                    input[1] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                        ]
                    input[2] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                        ]
                    input[3] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict', checkIfExists: true)
                        ]
                    input[4] = [[],[]]
                    input[5] = [[],[]]
                    input[6] = [[],[]]
                    input[7] = [[],[]]
                    """
                }
            }

            run("GATK_UNIFIEDGENOTYPER", alias: "GATK_UNIFIEDGENOTYPERINDELS") {
                script "../../../gatk/unifiedgenotyper/main.nf"
                params {
                    module_args = "--genotype_likelihoods_model INDEL -stand_call_conf 30 --sample_ploidy 2 -dcov 250 --output_mode EMIT_ALL_SITES"
                }

                process {
                    """
                    input[0] = [[id:'test'],// meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        ]
                    input[1] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                        ]
                    input[2] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                        ]
                    input[3] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict', checkIfExists: true)
                        ]
                    input[4] = [[],[]]
                    input[5] = [[],[]]
                    input[6] = [[],[]]
                    input[7] = [[],[]]
                    """
                }
            }
        }

    test("test_topas_gencons") {
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = GATK_UNIFIEDGENOTYPERSNPS.out.vcf
                input[1] = [[],[]]
                input[2] = [[id:'test'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                input[3] = [[],[]]
                input[4] = false
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.fasta,
                    process.out.vcf,
                    process.out.ccf,
                    file(process.out.log[0][1]).name,
                    process.out.versions
                    ).match() }
            )
        }
    }
    test("test_topas_gencons_fai") {

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = GATK_UNIFIEDGENOTYPERSNPS.out.vcf
                input[1] = [[],[]]
                input[2] = [[id:'test'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                input[3] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                    ]
                input[4] = false
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.fasta,
                    process.out.vcf,
                    process.out.ccf,
                    file(process.out.log[0][1]).name,
                    process.out.versions
                    ).match() }
            )
        }
    }
    test("test_topas_gencons_indels") {
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = GATK_UNIFIEDGENOTYPERSNPS.out.vcf
                input[1] = GATK_UNIFIEDGENOTYPERINDELS.out.vcf
                input[2] = [[id:'test'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                input[3] = [[],[]]
                input[4] = true
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.fasta,
                    process.out.vcf,
                    process.out.ccf,
                    file(process.out.log[0][1]).name,
                    process.out.versions
                    ).match() }
            )
        }
    }

    test("test_topas_gencons - stub") {
        options "-stub"
        setup {
            run("GATK_UNIFIEDGENOTYPER", alias: "GATK_UNIFIEDGENOTYPERSNPS_STUB") {
                script "../../../gatk/unifiedgenotyper/main.nf"
                params {
                    module_args = "--genotype_likelihoods_model SNP -stand_call_conf 30 --sample_ploidy 2 -dcov 250 --output_mode EMIT_ALL_SITES"
                }

                process {
                    """
                    input[0] = [[id:'test'],// meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        ]
                    input[1] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                        ]
                    input[2] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                        ]
                    input[3] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict', checkIfExists: true)
                        ]
                    input[4] = [[],[]]
                    input[5] = [[],[]]
                    input[6] = [[],[]]
                    input[7] = [[],[]]
                    """
                }
            }
        }
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = GATK_UNIFIEDGENOTYPERSNPS_STUB.out.vcf
                input[1] = [[],[]]
                input[2] = [[id:'test'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                input[3] = [[],[]]
                input[4] = false
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}