nextflow_process {

    name "Test Process VARSCAN_FPFILTER"
    script "../main.nf"
    process "VARSCAN_FPFILTER"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "varscan"
    tag "varscan/fpfilter"

    test("human - mpileup") {

        setup {

            run("VARSCAN_SOMATIC") {
                script "../../somatic/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/mpileup/test.mpileup.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/mpileup/test2.mpileup.gz', checkIfExists: true)
                    ]
                    """
                }
            }

            run("VARSCAN_PROCESSSOMATIC") {
                script "../../processsomatic/main.nf"
                process {
                    """
                    input[0] = VARSCAN_SOMATIC.out.vcf_snvs.collect{ meta, vcf -> [ meta, vcf ] }
                    """
                }
            }

            run("BAMREADCOUNT") {
                script "../../../bamreadcount/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    VARSCAN_PROCESSSOMATIC.out.somatic_hc_vcf.collect{ meta, vcf -> vcf },
                    BAMREADCOUNT.out.rc.collect{ meta, rc -> rc }
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert snapshot(process.out.version).match("version") },
            )
        }

    }

    test("human - mpileup - stub") {

        options "-stub"

        when {
            params {
                module_args = '--min-ref-avgrl 0 --min-var-avgrl 0'
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/empty.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }

    }

}