nextflow_process {

    name "Test Process VARSCAN_SOMATIC"
    script "../main.nf"
    process "VARSCAN_SOMATIC"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "varscan"
    tag "varscan/somatic"

    test("human - mpileup") {

        when {
            params {
                module_args = '--output-vcf 1'
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/mpileup/test.mpileup.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/mpileup/test2.mpileup.gz', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                {
                    assert snapshot(
                        path(process.out.vcf_indels.get(0).get(1)).vcf.variantsMD5,
                        path(process.out.vcf_snvs.get(0).get(1)).vcf.variantsMD5,
                        process.out.versions,
                    ).match()
                }
            )
        }

    }

    test("human - mpileup - stub") {

        options "-stub"

        when {
            params {
                module_args = '--output-vcf 1'
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/mpileup/test.mpileup.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/mpileup/test2.mpileup.gz', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}