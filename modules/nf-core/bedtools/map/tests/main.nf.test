nextflow_process {

    name "Test Process BEDTOOLS_MAP"
    script "../main.nf"
    process "BEDTOOLS_MAP"

    tag "modules"
    tag "modules_nfcore"
    tag "bedtools"
    tag "bedtools/map"

    config "./nextflow.config"

    test("sarscov2 - [bed1, bed2], []") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test2.bed', checkIfExists: true)
                ]
                input[1] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - [bed, vcf], []") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf', checkIfExists: true)
                ]
                input[1] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - [bed1, bed2], [] - stub") {

        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test2.bed', checkIfExists: true)
                ]
                input[1] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.mapped[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }

    }

}
