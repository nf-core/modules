nextflow_process {
    name "Test Process BEDTOOLS_GENOMECOV"
    script "../main.nf"
    process "BEDTOOLS_GENOMECOV"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "bedtools"
    tag "bedtools/genomecov"

   test("sarscov2 - no scale") {
        when {
            process {
                """                
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true),
                    1
                ]
                // sizes
                input[1] = []
                // extension
                input[2] = "txt"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("no_scale") }
            )
        }

    }

    test("sarscov2 - dummy sizes") {
        when {
            process {
                """                
                input[0] = [
                    [ id:'test'],
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true),
                    0.5
                ]
                // sizes
                input[1] = file('dummy_chromosome_sizes')
                // extension
                input[2] = 'txt'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("dummy_sizes") }
            )
        }

    }

    test("sarscov2 - scale") {
        when {
            process {
                """                
                input[0] = [
                    [ id:'test'],
                    file(params.test_data['sarscov2']['genome']['baits_bed'], checkIfExists: true),
                    0.5
                ]
                // sizes
                input[1] = file(params.test_data['sarscov2']['genome']['genome_sizes'], checkIfExists: true)
                // extension
                input[2] = 'txt'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("scale") }
            )
        }

    }

    test("stub") {
        options "-stub"

        when {
            process {
                """                
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true),
                    1
                ]
                // sizes
                input[1] = []
                // extension
                input[2] = 'txt'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.genomecov[0][1]).name).match("stub") }
            )
        }

    }

}
