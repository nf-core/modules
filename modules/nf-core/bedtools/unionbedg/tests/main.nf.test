nextflow_process {

    name "Test Process BEDTOOLS_UNIONBEDG"
    script "../main.nf"
    process "BEDTOOLS_UNIONBEDG"

    tag "modules"
    tag "modules_nfcore"
    tag "bedtools"
    tag "bedtools/unionbedg"

    test("sarscov2 - bedgraph - bed") {

        when {
            process {
                """                
                input[0] = [
                    [ id:'test_out' ],                                                                                                                                                             
                    [ 
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bedgraph/test.bedgraph', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                    ]
                ]

                input[1] = [[:], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - bedgraph - bed - empty") {

        config "./nextflow.config"

        when {
            process {
                """                
                input[0] = [
                    [ id:'test_out' ],                                                                                                                                                             
                    [ 
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bedgraph/test.bedgraph', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                    ]
                ]

                input[1] = [
                    [ id: 'genome' ],                                                                                                                                                                         
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.sizes', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - bedgraph - bed - stub") {

        options "-stub"

        when {
            process {
                """                
                input[0] = [
                    [ id:'test_out' ],                                                                                                                                                             
                    [ 
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bedgraph/test.bedgraph', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                    ]
                ]

                input[1] = [[:], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
