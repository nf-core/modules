nextflow_process {

    name "Test Process VERIFYBAMID_VERIFYBAMID2"
    script "../main.nf"
    process "VERIFYBAMID_VERIFYBAMID2"

    tag "modules"
    tag "modules_nfcore"
    tag "verifybamid"
    tag "verifybamid/verifybamid2"

    test("Should run with SVD input") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ],
                             file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam'),
                             file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai') ]
                input[1] = [ file(params.modules_testdata_base_path + 'delete_me/verifybamid/test.genome.vcf.UD'),
                             file(params.modules_testdata_base_path + 'delete_me/verifybamid/test.genome.vcf.mu'),
                             file(params.modules_testdata_base_path + 'delete_me/verifybamid/test.genome.vcf.bed') ]
                input[2] = []
                input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta')
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Should run with RefVCF input") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ],
                             file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam'),
                             file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai') ]
                input[1] = [ [], [], [] ]
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf')
                input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta')
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log[0][1]).name,
                    process.out.bed,
                    process.out.mu,
                    process.out.self_sm,
                    process.out.ancestry,
                    process.out.versions,
                    file(process.out.ud[0][1]).name
                    ).match() }
            )
        }
    }

    test("Should run with panel input") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ],
                             file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam'),
                             file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai') ]
                input[1] = [ file(params.modules_testdata_base_path + 'delete_me/verifybamid/test.genome.vcf.UD'),
                             file(params.modules_testdata_base_path + 'delete_me/verifybamid/test.genome.vcf.mu'),
                             file(params.modules_testdata_base_path + 'delete_me/verifybamid/test.genome.vcf.bed') ]
                input[2] = []
                input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta')
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }
    }
}