nextflow_process {

    name "Test Process ART_ILLUMINA"
    script "../main.nf"
    process "ART_ILLUMINA"
    tag "modules"
    tag "modules_nfcore"
    tag "art"
    tag "art/illumina"

    test("single-end") {

        config "./single-end.nextflow.config"

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [id: 'test'],
                    [
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                ]
                input[1] = 'HS25'
                input[2] = '15'
                input[3] = '150'
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert path(process.out.aln.get(0).get(1)).md5 == "7aa88720911ca1a862e4a24d57435e3c"},
                { assert path(process.out.fastq.get(0).get(1)).linesGzip.size() == 11880 },
                {
                    def read_name = path(process.out.fastq.get(0).get(1)).linesGzip[0]
                    assert read_name.equals("@MT192765.1-2970")
                },
                {
                    def read = path(process.out.fastq.get(0).get(1)).linesGzip[1]
                    assert read.equals("GAAAAGAGCTATGAATTGCAGACACCTTTTGAAATTAAATTGGCAAAGAAATTTGACACCTTCTATGGGGAATGTCCAAATTTTGTATTTCCCTTAAATTCCATAATCAAGACTATTCAACCAAGGGTTGAAAAGAAAAAGCTTGATGGC")
                },
                {
                    def read_qc = path(process.out.fastq.get(0).get(1)).linesGzip[3]
                    assert read_qc.equals("C1CGGGCGG=GGGJGJG=JJCJJJCJGJJJJGJJJ1JJJGJJGGJGJJGGGJJGJJJCJGGGJ(=G1GGG(CCCGGGCGCGGGCCGCCG8GGGGGGGGGGCC(CGG1GGGG1GGCGCGGCGGGCGCGGGCGGGGCGCCGGGGGCG8GGGG")
                },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

        test("single-end-stub") {

        options "-stub-run"
        config "./single-end.nextflow.config"

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [id: 'test'],
                    [
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                ]
                input[1] = 'HS25'
                input[2] = '15'
                input[3] = '150'
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("paired-end") {

        config "./paired-end.nextflow.config"

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [id: 'test'],
                    [
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                ]
                input[1] = 'HS25'
                input[2] = '15'
                input[3] = '150'
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert path(process.out.fastq.get(0).get(1).get(0)).linesGzip.size() == 5940 },
                                {
                    def read_name = path(process.out.fastq.get(0).get(1).get(0)).linesGzip[0]
                    assert read_name.equals("@MT192765.1-2970/1")
                },
                {
                    def read = path(process.out.fastq.get(0).get(1).get(0)).linesGzip[1]
                    assert read.equals("GTTGCGACTACGTGATGAGGAACGAGAAGCGGCTTGACTGCCGCCTCTGCTCCCTTCTGCGTAGAAGCCTTTTGGCAATGTTGTTCCTTGAGGAAGTTGTAGCACGATTGCAGCATTGTTAGCAGGATTGCGGGTGCCAATGTGATCTTT")
                },
                {
                    def read_qc = path(process.out.fastq.get(0).get(1).get(0)).linesGzip[3]
                    assert read_qc.equals("CCCGGGGGGGGGGGCJCJJJJJ1JJJGJJ(JJJGGGJJJJGGJGJJGJJJCCGCJCJC=GCGGG8GJGGGCGG=1G1CJGG=GGCGGCGGGGGCCGG=8GJCCGCCGCGGGGGGGC=GGG=CCGCGGCGGGCC=GGGGGGCGGCCCGCGG")
                },
                { assert path(process.out.fastq.get(0).get(1).get(1)).linesGzip.size() == 5940 },
                {
                    def read_name = path(process.out.fastq.get(0).get(1).get(1)).linesGzip[0]
                    assert read_name.equals("@MT192765.1-2970/2")
                },
                {
                    def read = path(process.out.fastq.get(0).get(1).get(1)).linesGzip[1]
                    assert read.equals("GAGCTACCAGACGAATTCGTGGTGGTGACGGTAAAATGAAAGATCTCAGTCCAAGATGGTATTTCTACTACCTAGGAACTGGGCCAGAAGCTGGACTTCCCTATGGTGCTAACAAAGACGGCATCATATGGGTTGCAACTGAGGGAGCCT")
                },
                {
                    def read_qc = path(process.out.fastq.get(0).get(1).get(1)).linesGzip[3]
                    assert read_qc.equals("1CCGGGGGGGCGGGJJJJJGJG1GJGJ=JGJJCJJJCJJJGJ1GJGJGGJJC8JGG=JGGCGCCGCGGCCCGJCGGGGCJC==CGG88CGGGCGGGCCCGGC8JJJJCGGCGGCCGGGG=CGGGGCCGGCCCGCGCCCCG8GGGG=GGGC")
                },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("paired-end-stub") {

        options "-stub-run"
        config "./paired-end.nextflow.config"

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [id: 'test'],
                    [
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                ]
                input[1] = 'HS25'
                input[2] = '15'
                input[3] = '150'
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
