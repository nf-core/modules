nextflow_process {

    name "Test Process FASTPLONG"
    script "../main.nf"
    process "FASTPLONG"

    tag "modules"
    tag "modules_nfcore"
    tag "fastplong"


    test("test_fastplong - pacbio") {

        when {

            process {
                """
                input[0] = Channel.of([
                    [ id:'alz.ccs', single_end:true ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/fastq/alz.ccs.fastq.gz', checkIfExists: true), ]
                ])
                input[1] = []
                input[2] = false
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.html.get(0).get(1)).getText().contains("<tr><td class='col1'>total bases:</td><td class='col2'>272.128000 K</td></tr>") },
                { assert path(process.out.log.get(0).get(1)).getText().contains("reads passed filter: 100") },
                { assert snapshot(
                    process.out.json,
                    process.out.reads,
                    process.out.reads_fail,
                    process.out.versions).match() }
            )
        }
    }

    test("test_fastplong - pacbio - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/fastq/alz.ccs.fastq.gz', checkIfExists: true), ]
                ])
                input[1] = []
                input[2] = false
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}