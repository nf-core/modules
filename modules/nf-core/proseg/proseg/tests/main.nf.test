nextflow_process {

    name "Test Process PROSEG"
    script "../main.nf"
    process "PROSEG"

    tag "modules"
    tag "modules_nfcore"
    tag "proseg"
    tag "segmentation"
    tag "cell_segmentation"

    test("proseg - transcripts.csv") {

        when {
            process {
                """
                input[0] = [
                    [id: "test_run_proseg"],
                    file(params.modules_testdata_base_path + "spatial_omics/xenium/homo_sapiens/spatial_gene_expression.csv", checkIfExists: true)
                ]
                input[1] = 'xenium'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.transcript_metadata.collect { meta, files ->
                        [meta, files.findAll { file(it).name.endsWith("transcript-metadata.csv.gz") }.collect { file(it).name }]
                    },
                    process.out.cell_polygons.collect { meta, files ->
                        [meta, files.findAll { file(it).name.endsWith("cell-polygons.geojson.gz") }.collect { file(it).name }]
                    },
                    process.out.versions
                ).match() }
            )
        }
    }

    test("proseg stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [id: "test_run_proseg"],
                    file(params.modules_testdata_base_path + "spatial_omics/xenium/homo_sapiens/spatial_gene_expression.csv", checkIfExists: true)
                ]
                input[1] = 'xenium'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions) }
            )
        }
    }
}