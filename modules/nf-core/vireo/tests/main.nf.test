// nf-core modules test vireo
nextflow_process {

    name "Test Process VIREO"
    script "../main.nf"
    process "VIREO"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "vireo"

    test("demultiplexing") {
        setup {
            run("SAMTOOLS_INDEX") {
                script "../../samtools/index/main.nf"
                process {
                    """
                    input[0] = [
                    [ id:'sample1' ],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/demultiplexing/chr21.bam', checkIfExists: true) ]
                    """
                }
            } 
            run("CELLSNP_MODEA") {
                script "../../cellsnp/modea/main.nf"
                process {
                    """
                    input[0] = SAMTOOLS_INDEX.out.bai.collect{ meta, bai -> bai }.map{ 
                               bai -> [[ id: 'sample1'], 
                                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/demultiplexing/chr21.bam', checkIfExists: true),
                                    bai,
                                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/demultiplexing/donor_genotype_chr21.vcf', checkIfExists: true),
                                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/demultiplexing/barcodes.tsv', checkIfExists: true)]}
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = CELLSNP_MODEA.out.collect{ meta, cell -> cell }.map{ 
                            cell -> [[id:'test'],
                                      2,
                                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/demultiplexing/donor_genotype_chr21.vcf', checkIfExists: true),
                                      []
                                    ]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:
                
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }

    }

}
