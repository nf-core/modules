nextflow_process {

    name "Test Process ANTISMASH_ANTISMASHLITE"
    script "../main.nf"
    process "ANTISMASH_ANTISMASHLITE"
    config './nextflow.config'

    tag "modules"
    tag "modules_nfcore"
    tag "antismash"
    tag "antismash/antismashlite"
    tag "antismash/antismashlitedownloaddatabases"
    tag "gunzip"
    tag "untar"

    setup {
        run("UNTAR", alias: "UNTAR_CSS") {
            script "../../../untar"
            process {
            """
            input[0] = [
                [ ],
                file('https://github.com/nf-core/test-datasets/raw/59ddeb5929f89ddddaff292d67f9025812762b87/data/delete_me/antismash/css.tar.gz', checkIfExists: true)
            ]
            """
            }
        }

        run("UNTAR", alias: "UNTAR_DETECTION") {
            script "../../../untar"
            process {
            """
            input[0] = [
                [ ],
                file('https://github.com/nf-core/test-datasets/raw/59ddeb5929f89ddddaff292d67f9025812762b87/data/delete_me/antismash/detection.tar.gz', checkIfExists: true)
            ]
            """
            }
        }

        run("UNTAR", alias: "UNTAR_MODULES") {
            script "../../../untar"
            process {
            """
            input[0] = [
                [ ],
                file('https://github.com/nf-core/test-datasets/raw/59ddeb5929f89ddddaff292d67f9025812762b87/data/delete_me/antismash/modules.tar.gz', checkIfExists: true)
            ]
            """
            }
        }

        run("ANTISMASH_ANTISMASHLITEDOWNLOADDATABASES") {
            script "../../../antismash/antismashlitedownloaddatabases"
            process {
                """
                input[0] = UNTAR_CSS.out.untar.map{ it[1] }
                input[1] = UNTAR_DETECTION.out.untar.map{ it[1] }
                input[2] = UNTAR_MODULES.out.untar.map{ it[1] }
                """
            }
        }

        run("GUNZIP") {
            script "../../../gunzip"
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/genome/genome.gbff.gz', checkIfExists: true)
                ]
                """
            }
        }
    }

    test("antismashlite - bacteroides_fragilis - genome") {

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = ANTISMASH_ANTISMASHLITEDOWNLOADDATABASES.out.database
                input[2] = ANTISMASH_ANTISMASHLITEDOWNLOADDATABASES.out.antismash_dir
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.failed },
                { assert process.errorReport.contains("WARNING: This module has been deprecated.")},
            )
        }
    }

    test("antismashlite - bacteroides_fragilis - genome - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = ANTISMASH_ANTISMASHLITEDOWNLOADDATABASES.out.database
                input[2] = ANTISMASH_ANTISMASHLITEDOWNLOADDATABASES.out.antismash_dir
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.failed },
                { assert process.errorReport.contains("WARNING: This module has been deprecated.")},
            )
        }
    }
}
