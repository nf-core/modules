nextflow_process {

    name "Test Process ANTISMASH_ANTISMASHLITEDOWNLOADDATABASES"
    script "../main.nf"
    process "ANTISMASH_ANTISMASHLITEDOWNLOADDATABASES"

    tag "modules"
    tag "modules_nfcore"
    tag "antismash"
    tag "antismash/antismashlitedownloaddatabases"

    setup {

        run("UNTAR") {
            script "modules/nf-core/untar/main.nf"
            process {
            """
            input[0] = Channel.fromList([
                [],
                file('https://github.com/nf-core/test-datasets/raw/91bb8781c576967e23d2c5315dd4d43213575033/data/delete_me/antismash/css.tar.gz', checkIfExists: true)
            ])
            """
            }
        }

        run("UNTAR") {
            script "modules/nf-core/untar/main.nf"
            process {
            """
            input[0] = Channel.fromList([
                [],
                file('https://github.com/nf-core/test-datasets/raw/91bb8781c576967e23d2c5315dd4d43213575033/data/delete_me/antismash/detection.tar.gz', checkIfExists: true)
            ])
            """
            }
        }

        run("UNTAR") {
            script "modules/nf-core/untar/main.nf"
            process {
            """
            input[0] = Channel.fromList([
                [],
                file('https://github.com/nf-core/test-datasets/raw/91bb8781c576967e23d2c5315dd4d43213575033/data/delete_me/antismash/modules.tar.gz', checkIfExists: true)
            ])
            """
            }
        }
    }

test("antiSMASH-lite downloaddatabases") {
        when {
            process {
                """
                input[0] = UNTAR.out.untar.map{ it[1] }
                input[1] = UNTAR.out.untar.map{ it[1] }
                input[2] = UNTAR.out.untar.map{ it[1] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                { assert snapshot(process.out.database).match("antismash_db") }
                { assert snapshot(process.out.antismash_dir).match("antismash_dir") }
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("antiSMASH-lite downloaddatabases - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ UNTAR.out.untar.map{ it[1] } ]
                input[1] = [ UNTAR.out.untar.map{ it[1] } ]
                input[2] = [ UNTAR.out.untar.map{ it[1] } ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                { assert snapshot(process.out.database).match("antismash_db") }
                { assert snapshot(process.out.antismash_dir).match("antismash_dir") }
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

}
