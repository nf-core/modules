nextflow_process {

    name "Test Process WISECONDORX_PREDICT"
    script "../main.nf"
    process "WISECONDORX_PREDICT"

    tag "modules"
    tag "modules_nfcore"
    tag "wisecondorx"
    tag "wisecondorx/predict"
    tag "wisecondorx/convert"

    test("sarscov2 - npz, reference, []") {

        // Stub because the reference is too large
        options "-stub"

        setup {
            run("WISECONDORX_CONVERT") {
                script "../../convert/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test' ], // meta map
                        file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam_bai'], checkIfExists: true)
                    ]
                    input[1] = [[], []]
                    input[2] = [[], []]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = WISECONDORX_CONVERT.out.npz
                input[1] = [
                    [ id:'reference' ],
                    file("reference.npz")
                ]
                input[2] = [[], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.aberrations_bed.collect { it.collect { it instanceof Map ? it : file(it).name }},
                    process.out.bins_bed.collect { it.collect { it instanceof Map ? it : file(it).name }},
                    process.out.segments_bed.collect { it.collect { it instanceof Map ? it : file(it).name }},
                    process.out.chr_statistics.collect { it.collect { it instanceof Map ? it : file(it).name }},
                    process.out.chr_plots.collect { it.collect { it instanceof Map ? it : it.collect { file(it).name } }},
                    process.out.genome_plot.collect { it.collect { it instanceof Map ? it : file(it).name }}
                ).match() }
            )
        }

    }

}
