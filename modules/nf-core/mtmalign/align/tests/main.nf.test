nextflow_process {

    name "Test Process MTMALIGN_ALIGN"
        script "../main.nf"
        process "MTMALIGN_ALIGN"
        tag "modules"
        tag "modules_nfcore"
        tag "mtmalign"
        tag "mtmalign/align"
        tag "untar"

        test("Test on seatoxin dataset - uncompressed") {
            setup {

                run("UNTAR") {
                    script "../../../../../modules/nf-core/untar/main.nf"
                        process {
                            """
                                archive = file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/structures/seatoxin-ref.tar.gz", checkIfExists: true)
                                input[0] = Channel.of(tuple([id:'test'], archive))
                            """
                        }
                }
            }

            when {
                params {
                }
                process {
                    """
                        input[0] = UNTAR.out.untar.map { meta,dir -> [[ id:'test' ], file(dir).listFiles().collect()]}
                        input[1] = false
                    """
                }
            }

            then {
                assertAll(
                    { assert process.success  },
                    // mTMalign may be nondeterministic, just check if the pdbs are all in there
                    //{ assert snapshot(process.out).match() }
                    { assert path(process.out.alignment[0][1]).getText().contains(">1.pdb") },
                    { assert path(process.out.alignment[0][1]).getText().contains(">2.pdb") },
                    { assert path(process.out.alignment[0][1]).getText().contains(">3.pdb") },
                    { assert path(process.out.alignment[0][1]).getText().contains(">4.pdb") },
                    { assert path(process.out.alignment[0][1]).getText().contains(">5.pdb") },
                    { assert snapshot(process.out.versions).match("versions0") }
                    )
            }
        }

        test("Test on seatoxin dataset - compressed") {
            setup {

                run("UNTAR") {
                    script "../../../../../modules/nf-core/untar/main.nf"
                        process {
                            """
                                archive = file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/structures/seatoxin-ref.tar.gz", checkIfExists: true)
                                input[0] = Channel.of(tuple([id:'test'], archive))
                            """
                        }
                }
            }

            when {
                params {
                }
                process {
                    """
                        input[0] = UNTAR.out.untar.map { meta,dir -> [[ id:'test' ], file(dir).listFiles().collect()]}
                        input[1] = true
                    """
                }
            }

            then {
                assertAll(
                    { assert process.success  },
                    // mTMalign may be nondeterministic, just check if the pdbs are all in there
                    //{ assert snapshot(process.out).match() }
                    { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1.pdb") },
                    { assert path(process.out.alignment[0][1]).getTextGzip().contains(">2.pdb") },
                    { assert path(process.out.alignment[0][1]).getTextGzip().contains(">3.pdb") },
                    { assert path(process.out.alignment[0][1]).getTextGzip().contains(">4.pdb") },
                    { assert path(process.out.alignment[0][1]).getTextGzip().contains(">5.pdb") },
                    { assert snapshot(process.out.versions).match("versions1") }
                    )
            }
        }
}