
nextflow_process {

    name "Test Process PBBAM_PBMERGE"
    script "../main.nf"
    process "PBBAM_PBMERGE"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "pbbam"
    tag "pbbam/pbmerge"

    test("test-pbbam-pbmerge") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test' ], // meta map
				    [
				        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/alz.ccs.fl.NEB_5p--NEB_Clontech_3p.flnc.clustered.bam', checkIfExists: true),
				        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/alz.ccs.fl.NEB_5p--NEB_Clontech_3p.flnc.clustered.singletons.bam', checkIfExists: true)
				    ]
                ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					file(process.out.bam[0][1]).name, // With bam(), htsjdk.samtools.SAMFormatException: Error parsing SAM header. @RG line missing SM tag.
					file(process.out.pbi[0][1]).name, //unstable
					process.out.versions,
                    file(process.out.versions[0]).readLines().collect { it.trim() }, // Trap to catch bioconda version mismatches
					).match()
				}
            )
        }
    }

    test("test-pbbam-pbmerge-stub") {
        options '-stub'

        when {
            process {
                """
                input[0] = [
				    [ id:'test' ], // meta map
				    [
				        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/alz.ccs.fl.NEB_5p--NEB_Clontech_3p.flnc.clustered.bam', checkIfExists: true),
				        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/alz.ccs.fl.NEB_5p--NEB_Clontech_3p.flnc.clustered.singletons.bam', checkIfExists: true)
				    ]
                ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
