nextflow_process {

    name "Test Process BISCUIT_BLASTER"
    script "../main.nf"
    process "BISCUIT_BLASTER"
    tag "modules"
    tag "modules_nfcore"
    tag "biscuit"
    tag "biscuit/biscuitblaster"
    tag "biscuit/index"

    setup {
        run("BISCUIT_INDEX") {
            script "../../index/main.nf"
            process {
            """
            input[0] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
            """
            }
        }
    }

    test("sarscov2 - single") {
        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                                [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz", checkIfExists: true) ]
                            ]

                input[1] = BISCUIT_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.bai[0][1]).name,
                                  process.out.bam.collect { bam(it[1]).getHeaderMD5() },
                                  process.out.bam.collect { bam(it[1]).getReadsMD5() },
                                  process.out.versions).match() }
            )
        }

    }

    test("sarscov2 - paired-end") {
        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                                [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz", checkIfExists: true),
                                  file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test.methylated_2.fastq.gz", checkIfExists: true) ]
                            ]

                input[1] = BISCUIT_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.bai,
                                  process.out.bam.collect { bam(it[1]).getHeaderMD5() },
                                  process.out.bam.collect { bam(it[1]).getReadsMD5() },
                                  process.out.versions).match() }
            )
        }
    }

    test("sarscov2 - paired-end -stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                                [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz", checkIfExists: true),
                                  file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test.methylated_2.fastq.gz", checkIfExists: true) ]
                            ]

                input[1] = BISCUIT_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
