nextflow_process {

    name "Test Process BISCUIT_MERGECG"
    script "../main.nf"
    process "BISCUIT_MERGECG"
    tag "modules"
    tag "modules_nfcore"
    tag "biscuit"
    tag "biscuit/index"
    tag "biscuit/mergecg"

    test("sars_cov_bed") {

        setup {
            run("BISCUIT_INDEX") {
                script "../../index/main.nf"
                process {
                    """
                    input[0] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], // meta map
                            file(params.modules_testdata_base_path + "delete_me/biscuit/test-cg.bed.gz", checkIfExists: true)
                        ]

                input[1] = BISCUIT_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sars_cov_bed -stub") {
        options "-stub"
        setup {
            run("BISCUIT_INDEX") {
                script "../../index/main.nf"
                process {
                    """
                    input[0] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], // meta map
                            file(params.modules_testdata_base_path + "delete_me/biscuit/test-cg.bed.gz", checkIfExists: true)
                        ]

                input[1] = BISCUIT_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
