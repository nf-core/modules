nextflow_process {

    name "Test Process STIMULUS_ANALYSISDEFAULT"
    script "../main.nf"
    process "STIMULUS_ANALYSISDEFAULT"

    tag "modules"
    tag "modules_nfcore"
    tag "stimulus"
    tag "stimulus/analysisdefault"

    test("analysis_default") {

        setup {
            run("STIMULUS_SPLITCSV") {
                script "../../../stimulus/splitcsv/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/experiment_config.json', checkIfExists: true)
                    ]
                    input[1] = [
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/input_data_with_split.csv', checkIfExists: true)
                    ]
                    """
                }
            }
            run("STIMULUS_TORCHTUNE") {
                script "../../../stimulus/torchtune/main.nf"
                process {
                    """
                    experiment_ch = Channel.of([
                        [ id:'test'],
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/experiment_config.json', checkIfExists: true)
                    ])
                    input[0] = STIMULUS_SPLITCSV.out.split_csv.join(experiment_ch)
                    input[1] = [
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/tune_config.yaml',  checkIfExists: true),
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/dna_to_float_model.py',  checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                config_ch = Channel.of([
                        [ id:'test'],
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/experiment_config.json', checkIfExists: true),
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/tune_config.yaml', checkIfExists: true)
                ])

                split_csv_ch = STIMULUS_SPLITCSV.out.split_csv.join(config_ch)
                weights_ch = split_csv_ch.join(STIMULUS_TORCHTUNE.out.weights)
                optimizer_ch = weights_ch.join(STIMULUS_TORCHTUNE.out.optimizer)
                metrics_ch = optimizer_ch.join(STIMULUS_TORCHTUNE.out.metrics)
                input[0] = metrics_ch
                input[1] = file(params.modules_testdata_base_path + "../../deepmodeloptim/testdata/dna_experiment/dna_to_float_model.py", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("analysis_default - stub") {

        options "-stub"

        setup {
            run("STIMULUS_SPLITCSV") {
                script "../../../stimulus/splitcsv/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/experiment_config.json', checkIfExists: true)
                    ]
                    input[1] = [
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/input_data_with_split.csv', checkIfExists: true)
                    ]
                    """
                }
            }
            run("STIMULUS_TORCHTUNE") {
                script "../../../stimulus/torchtune/main.nf"
                process {
                    """
                    experiment_ch = Channel.of([
                        [ id:'test'],
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/experiment_config.json', checkIfExists: true)
                    ])
                    input[0] = STIMULUS_SPLITCSV.out.split_csv.join(experiment_ch)
                    input[1] = [
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/tune_config.yaml',  checkIfExists: true),
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/dna_to_float_model.py',  checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                config_ch = Channel.of([
                        [ id:'test'],
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/experiment_config.json', checkIfExists: true),
                        file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/tune_config.yaml', checkIfExists: true)
                ])

                split_csv_ch = STIMULUS_SPLITCSV.out.split_csv.join(config_ch)
                weights_ch = split_csv_ch.join(STIMULUS_TORCHTUNE.out.weights)
                optimizer_ch = weights_ch.join(STIMULUS_TORCHTUNE.out.optimizer)
                metrics_ch = optimizer_ch.join(STIMULUS_TORCHTUNE.out.metrics)
                input[0] = metrics_ch
                input[1] = file(params.modules_testdata_base_path + "../../deepmodeloptim/testdata/dna_experiment/dna_to_float_model.py", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
