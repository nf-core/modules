nextflow_process {

    name "Test Process RTN_TNI"
    script "../main.nf"
    process "RTN_TNI"

    tag "modules"
    tag "modules_nfcore"
    tag "rtn"
    tag "rtn/tni"

    test("network inference and filtering without optional channels") {
        when {
            config "./nextflow.config1"
            process {
                """
                input[0] = [
                  [id:'test'],
                  file(params.modules_testdata_base_path + 'delete_me/rtn/expData.tsv', checkIfExists: true)
                ]
                input[1] = file(params.modules_testdata_base_path + 'delete_me/rtn/tfs.tsv', checkIfExists: true)
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert file(process.out.tni[0][1]).exists() },
                { assert file(process.out.tni_perm[0][1]).exists() },
                { assert file(process.out.tni_bootstrap[0][1]).exists() },
                { assert file(process.out.tni_filtered[0][1]).exists() },
                { assert file(process.out.versions[0]).exists() },
                { assert process.stdout.contains('Nb permutations          : 10') } // the default value is 10
            )
        }

    }

    test("network inference and filtering with optional channels") {
        when {
            config "./nextflow.config1"
            process {
                """
                input[0] = [
                  [id:'test'],
                  file(params.modules_testdata_base_path + 'delete_me/rtn/expData.tsv', checkIfExists: true)
                ]
                input[1] = file(params.modules_testdata_base_path + 'delete_me/rtn/tfs_symbol.tsv', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'delete_me/rtn/sample_annotation.tsv', checkIfExists: true)
                input[3] = file(params.modules_testdata_base_path + 'delete_me/rtn/gene_annotation.tsv', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert file(process.out.tni[0][1]).exists() },
                { assert file(process.out.tni_perm[0][1]).exists() },
                { assert file(process.out.tni_bootstrap[0][1]).exists() },
                { assert file(process.out.tni_filtered[0][1]).exists() },
                { assert file(process.out.versions[0]).exists() },
                { assert process.stdout.contains('Nb permutations          : 10') } // the default value is 10
            )
        }

    }

    test("network inference and filtering with optional channels with --n_params 12") {
        when {
            config "./nextflow.config2"
            process {
                """
                input[0] = [
                  [id:'test'],
                  file(params.modules_testdata_base_path + 'delete_me/rtn/expData.tsv', checkIfExists: true)
                ]
                input[1] = file(params.modules_testdata_base_path + 'delete_me/rtn/tfs_symbol.tsv', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'delete_me/rtn/sample_annotation.tsv', checkIfExists: true)
                input[3] = file(params.modules_testdata_base_path + 'delete_me/rtn/gene_annotation.tsv', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert file(process.out.tni[0][1]).exists() },
                { assert file(process.out.tni_perm[0][1]).exists() },
                { assert file(process.out.tni_bootstrap[0][1]).exists() },
                { assert file(process.out.tni_filtered[0][1]).exists() },
                { assert file(process.out.versions[0]).exists() },
                { assert process.stdout.contains('Nb permutations          : 12') } // the default value is 10
            )
        }

    }

    test("network inference and filtering with optional channels with --p_value_cutoff 1e-3") {
        when {
            config "./nextflow.config3"
            process {
                """
                input[0] = [
                  [id:'test'],
                  file(params.modules_testdata_base_path + 'delete_me/rtn/expData.tsv', checkIfExists: true)
                ]
                input[1] = file(params.modules_testdata_base_path + 'delete_me/rtn/tfs_symbol.tsv', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'delete_me/rtn/sample_annotation.tsv', checkIfExists: true)
                input[3] = file(params.modules_testdata_base_path + 'delete_me/rtn/gene_annotation.tsv', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert file(process.out.tni[0][1]).exists() },
                { assert file(process.out.tni_perm[0][1]).exists() },
                { assert file(process.out.tni_bootstrap[0][1]).exists() },
                { assert file(process.out.tni_filtered[0][1]).exists() },
                { assert file(process.out.versions[0]).exists() },
                { assert process.stdout.contains('Nb permutations          : 10') }, // the default value is 10
                { assert process.stdout.contains('P-value cut off          : 0.001') } // the default value is 1e-04
            )
        }

    }
}
