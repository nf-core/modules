nextflow_process {

    name "Test Process TRIMAL"
    script "../main.nf"
    process "TRIMAL"

    tag "modules"
    tag "modules_nfcore"
    tag "trimal"
    tag "gunzip"

    setup {
        run("GUNZIP") {
            script "../../gunzip/main.nf"
            process {
                """
                input[0] = [
                    [ id:'PF14720' ], // meta map
                    file(params.modules_testdata_base_path + 'delete_me/hmmer/PF14720_seed.alnfaa.gz', checkIfExists: true)
                ]
                """
            }
        }
    }

    test("PF14720 - aln - no trimming, fasta output") {
        config "./test_fasta_only.config"

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.trimal,
                    // The log file should not be produced in this case
                    !process.out.log || process.out.log.isEmpty(),
                    //path(process.out.log.get(0).get(1)).readLines().any { it.contains("Number of sites kept:") },
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("PF14720 - aln - gappyout trimming, mega output") {
        config "./test_gappyout_mega.config"

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.trimal,
                    // The log file should not be produced in this case
                    !process.out.log || process.out.log.isEmpty(),
                    //path(process.out.log.get(0).get(1)).readLines().any { it.contains("Number of sites kept:") },
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("PF14720 - aln - complex trimming (gt, cons, w), htmlout") {
        config "test_complex_trim_html.config"

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success }, // Check if the process completed successfully.
                { assert snapshot(
                    process.out.trimal,      // Snapshot the main output.
                    process.out.html_report, // Snapshot the HTML report (now correctly named).
                    process.out.log,         // Snapshot the standard log file (will be empty).
                    process.out.versions     // Snapshot the versions file.
                    ).match()
                }
            )
        }
    }
    test("PF14720 - aln - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}

