nextflow_process {

    name "Test Process PICARD_COLLECTRNASEQMETRICS"
    script "../main.nf"
    process "PICARD_COLLECTRNASEQMETRICS"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "picard"
    tag "picard/collectrnaseqmetrics"
    tag "ucsc/gtftogenepred"

    setup {
        run("UCSC_GTFTOGENEPRED") {
            script "../../../ucsc/gtftogenepred/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true) ]
                ])
                """
            }
        }
    }

    test("sarscov2 - fasta - gtf") {
        
        when {
            process {
                """
                input[0] = [
        	    [ id:'test', single_end:false, strandedness:'forward' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ]
                input[1] = UCSC_GTFTOGENEPRED.out.refflat.map{ it[1] }
                input[2] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert file(process.out.metrics[0][1]).text.contains('CollectRnaSeqMetrics') },
                { assert snapshot(
                    process.out.versions,
                    process.out.pdf
                ).match() }
            )
        }
    }
    
    test("sarscov2 - fasta - gtf - stub") {
        
        options "-stub"
        
        when {
            process {
                """
                input[0] = [
        	    [ id:'test', single_end:false, strandedness:'forward' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ]
                input[1] = UCSC_GTFTOGENEPRED.out.refflat.map{ it[1] }
                input[2] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
