
nextflow_process {

    name "Test Process PICARD_COLLECTWGSMETRICS"
    script "../main.nf"
    process "PICARD_COLLECTWGSMETRICS"

    tag "modules"
    tag "modules_nfcore"
    tag "picard"
    tag "picard/collectwgsmetrics"

    test("test-picard-collectwgsmetrics") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
				]
				input[1] = [
				    [id:'genome'],
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
				]
				input[2] = [
				    [id:'genome'],
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
				]
				input[3] = []

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.metrics[0][1]).text.contains('coverage	high_quality_coverage_count'),
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("test-picard-collectwgsmetrics-with-interval") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
				    []
				]
				input[1] = [
				    [id:'genome'],
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
				]
				input[2] = [
				    [id:'genome'],
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
				]
				input[3] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/picard/baits.interval_list', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.metrics[0][1]).text.contains('coverage	high_quality_coverage_count'),
                    process.out.versions
                    ).match()
                }
            )
        }
    }

}
