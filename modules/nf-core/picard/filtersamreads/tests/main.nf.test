nextflow_process {

    name "Test Process PICARD_FILTERSAMREADS"
    script "../main.nf"
    process "PICARD_FILTERSAMREADS"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "picard"
    tag "picard/filtersamreads"
    tag "picard/sortsam"

    setup {
        run("PICARD_SORTSAM") {
	    script "../../../picard/sortsam/main.nf"
	    process {
	        """
	        input[0] = [
		    [ id:'test', single_end:false, strandedness:'forward' ], // meta map
		    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true)
	        ]
	        input[1] = 'queryname'
	        """
	    }
        }
    }

    test("sarscov2 - bam") {
        
        when {
            process {
                """
                input[0] = PICARD_SORTSAM.out.bam.map{[ it[0], it[1], [] ]}
                input[1] = 'includeAligned'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    process.out.versions
                ).match() }
            )
        }
    }

    test("sarscov2 - stub") {
        
        options "-stub"
        
        when {
            process {
                """
                input[0] = PICARD_SORTSAM.out.bam.map{[ it[0], it[1], [] ]}
                input[1] = 'includeAligned'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("sarscov2 - bam - readlist") {
        
        when {
            process {
                """
	        input[0] = [
		    [ id:'test', single_end:false, strandedness:'forward' ], // meta map
		    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true),
		    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/picard/test.single_end.bam.readlist.txt', checkIfExists: true)
	        ]
                input[1] = 'includeReadList'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    process.out.versions
                ).match() }
            )
        }
    }

    test("sarscov2 - bam - readlist - stub") {
        
        options "-stub"
        
        when {
            process {
                """
	        input[0] = [
		    [ id:'test', single_end:false, strandedness:'forward' ], // meta map
		    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true),
		    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/picard/test.single_end.bam.readlist.txt', checkIfExists: true)
	        ]
                input[1] = 'includeReadList'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
