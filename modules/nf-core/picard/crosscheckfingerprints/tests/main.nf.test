nextflow_process {

    name "Test Process PICARD_CROSSCHECKFINGERPRINTS"
    script "../main.nf"
    config "./nextflow.config"

    process "PICARD_CROSSCHECKFINGERPRINTS"

    tag "modules"
    tag "modules_nfcore"
    tag "picard"
    tag "picard/crosscheckfingerprints"

    test("homo sapiens - bam - index") {
        when {
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], //meta
                            [
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true)
                            ],  // input1
                            [
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true)
                            ], // input1_index
                            [], // input2
                            [], // input2_index
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/germlineresources/haplotype_map.txt', checkIfExists: true) // haplotype_map
                        ]
                input[1] = [[:],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.crosscheck_metrics[0][1]).name).match("Crosscheck - bam") },
                { assert snapshot(process.out.versions).match("Crosscheck versions - bam") }
            )
        }
    }

    test("homo sapiens - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], //meta
                            [
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true)
                            ],  // input1
                            [
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true)
                            ], // input1_index
                            [], // input2
                            [], // input2_index
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/germlineresources/haplotype_map.txt', checkIfExists: true) // haplotype_map
                        ]
                input[1] = [[:],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.crosscheck_metrics[0][1]).name).match("Crosscheck stub") },
                { assert snapshot(process.out.versions).match("Crosscheck versions stub") }
            )
        }

    }

}
