
nextflow_process {

    name "Test Process PICARD_ADDORREPLACEREADGROUPS"
    script "../main.nf"
    process "PICARD_ADDORREPLACEREADGROUPS"

    tag "modules"
    tag "modules_nfcore"
    tag "picard"
    tag "picard/addorreplacereadgroups"

    test("sarscov2 - bam") {
        config "./bam.config"

        when {
            process {
                """
                input[0] = [ [:], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ]
                input[1] = [ [:], [] ]
                input[2] = [ [:], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - cram") {
        config "./cram.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),                    ]
                ]
                input[1] = [ [:], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                input[2] = [ [:], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.cram).match("cram") },
                { assert snapshot(process.out.crai).match("crai") },
                { assert snapshot(process.out.versions).match("versions") },
            )
        }

    }

    test("sarscov2 - bam - stub") {
        config "./bam.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [ [:], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ]
                input[1] = [ [:], [] ]
                input[2] = [ [:], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
