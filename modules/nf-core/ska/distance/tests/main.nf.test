nextflow_process {

    name "Test Process SKA_DISTANCE"
    script "../main.nf"
    process "SKA_DISTANCE"

    tag "modules"
    tag "modules_nfcore"
    tag "ska"
    tag "ska/distance"
    tag "ska/distance/wget.nf"

    test("sarscov2 - plasmodium - skf") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/ska/sarscov2_reduced.skf', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/eukaryotes/plasmodium_falciparum/ska/plasmodium_reduced.skf', checkIfExists: true)],
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    path(process.out.distances[0][1]).csv(sep:"\t").sort(),
                    path(process.out.cluster_list[0][1]).csv(sep:"\t").sort(),
                    process.out.dot
                ).match() }
            )
        }

    }

    test("sarscov2 - plasmodium - skf - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/ska/sarscov2_reduced.skf', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/eukaryotes/plasmodium_falciparum/ska/plasmodium_reduced.skf', checkIfExists: true)],
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - plasmodium - list") {

        setup {
            run("WGET", alias: "WGET1") {
                script "modules/nf-core/ska/distance/wget.nf"
                process {
                """
                input[0] = params.modules_testdata_base_path + 'genomics/sarscov2/genome/ska/sarscov2_reduced.skf'
                input[1] = "sarscov2_reduced.skf"
                """
                }
            }

            run("WGET", alias: "WGET2") {
                script "modules/nf-core/ska/distance/wget.nf"
                process {
                """
                input[0] = params.modules_testdata_base_path + 'genomics/eukaryotes/plasmodium_falciparum/ska/plasmodium_reduced.skf'
                input[1] = "plasmodium_reduced.skf"
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = WGET1.out.outfile.mix(WGET2.out.outfile).map {it -> it.toString()}.collectFile(name: 'samples.txt', newLine: true).map { it -> [['id': 'test'], [], it] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    path(process.out.distances[0][1]).csv(sep:"\t").columnNames.sort(),
                    path(process.out.distances[0][1]).csv(sep:"\t").rows[0].values().sort(),
                    path(process.out.cluster_list[0][1]).csv(sep:"\t").columnNames.sort(),
                    path(process.out.cluster_list[0][1]).csv(sep:"\t").columns["ID"].sort(),
                    path(process.out.cluster_list[0][1]).csv(sep:"\t").columns["Cluster__autocolour"].sort(),
                    process.out.dot
                ).match() }
            )
        }

    }

    test("sarscov2 - plasmodium - list - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [],
                    [file(params.modules_testdata_base_path + 'generic/txt/ska_sketches.txt', checkIfExists: true)]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
