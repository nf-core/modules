// nf-core modules test shovill
nextflow_process {

    name "Test Process SHOVILL"
    script "../main.nf"
    process "SHOVILL"

    tag "modules"
    tag "modules_nfcore"
    tag "shovill"

    test("shovill with spades") {
        config "./nextflow.spades.config"
        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                [ file("https://github.com/nf-core/test-datasets/raw/bacass/ERR044595_1M_1.fastq.gz", checkIfExists: true),
                  file("https://github.com/nf-core/test-datasets/raw/bacass/ERR044595_1M_2.fastq.gz", checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path(process.out.versions.get(0))).match() },
                { assert process.out.raw_contigs.size() == 1 },
                { assert path(process.out.gfa.get(0).get(1)).readLines().any { it.contains("S") } },
                { assert path(process.out.gfa.get(0).get(1)).readLines().any { it.contains("KC") } },
                { assert process.out.raw_contigs.get(0).get(1) ==~ ".*spades.fasta" },
                { assert path(process.out.raw_contigs.get(0).get(1)).readLines().any { it.contains(">") } },
                { assert path(process.out.raw_contigs.get(0).get(1)).readLines().any { it.contains("NODE") } },
                { assert path(process.out.raw_contigs.get(0).get(1)).readLines().any { it.contains("pilon") } }
            )
        }

    }

    test("shovill with skesa") {
        config "./nextflow.skesa.config"
        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path(process.out.versions.get(0))).match() },
                { assert process.out.raw_contigs.size() == 1 },
                { assert process.out.raw_contigs.get(0).get(1) ==~ ".*skesa.fasta" },
                { assert path(process.out.raw_contigs.get(0).get(1)).readLines().any { it.contains(">Contig_1") } },
                { assert path(process.out.raw_contigs.get(0).get(1)).readLines().any { it.contains("pilon") } }
            )
        }

    }
    test("shovill with megahit") {
        config "./nextflow.megahit.config"
        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                  file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path(process.out.versions.get(0))).match() },
                { assert process.out.raw_contigs.size() == 1 },
                { assert process.out.raw_contigs.get(0).get(1) ==~ ".*megahit.fasta" },
                { assert path(process.out.raw_contigs.get(0).get(1)).readLines().any { it.contains("pilon") } }
            )
        }

    }
    test("shovill with velvet") {
        config "./nextflow.velvet.config"
        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                  file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path(process.out.versions.get(0))).match() },
                { assert process.out.raw_contigs.size() == 1 },
                { assert process.out.raw_contigs.get(0).get(1) ==~ ".*velvet.fasta" },
                { assert path(process.out.raw_contigs.get(0).get(1)).readLines().any { it.contains("pilon") } }
            )
        }

    }
}
