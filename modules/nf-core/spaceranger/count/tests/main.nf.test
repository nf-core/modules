nextflow_process {

    name "Test Process SPACERANGER_COUNT"
    script "../main.nf"
    config "./nextflow.config"
    process "SPACERANGER_COUNT"

    tag "modules"
    tag "modules_nfcore"
    tag "spaceranger"
    tag "spaceranger/count"
    tag "spaceranger/mkgtf"
    tag "spaceranger/mkref"

    test("spaceranger v1 - homo_sapiens - fasta - gtf - fastq - tif - csv") {

        setup {
            run("SPACERANGER_MKGTF") {
                script "../../mkgtf/main.nf"
                process {
                    """
                    input[0] = file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true)
                    """
                }
            }
        }

        setup {
            run("SPACERANGER_MKREF") {
                script "../../mkref/main.nf"
                process {
                    """
                    input[0] = file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                    input[1] = file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true)
                    input[2] = 'homo_sapiens_chr22_reference'
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'Visium_FFPE_Human_Ovarian_Cancer',
                        slide: 'V10L13-020',
                        area: 'D1'
                    ], // Meta map
                    [
                        file(params.test_data['homo_sapiens']['10xgenomics']['spaceranger']['test_10x_ffpe_v1_fastq_1_gz']),
                        file(params.test_data['homo_sapiens']['10xgenomics']['spaceranger']['test_10x_ffpe_v1_fastq_2_gz'])
                    ], // Reads
                    file(params.test_data['homo_sapiens']['10xgenomics']['spaceranger']['test_10x_ffpe_v1_image']), // Image
                    [], // Cytaimage
                    [], // Darkimage
                    [], // Colorizedimage
                    [], // Manual alignment (default: automatic alignment)
                    [], // Slide specification (default: automatic download)
                ]
                input[1] = SPACERANGER_MKREF.out.reference // Reference
                input[2] = [] // Probeset (default: use the one included with Space Ranger)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.outs.get(0).get(1).findAll { file(it).name !in [
                        'web_summary.html',
                        'scalefactors_json.json',
                        'barcodes.tsv.gz',
                        'features.tsv.gz',
                        'matrix.mtx.gz'
                        ]}
                    ).match()
                },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'web_summary.html' }).exists() },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'scalefactors_json.json' }).exists() },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'barcodes.tsv.gz' }).exists() },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'features.tsv.gz' }).exists() },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'matrix.mtx.gz' }).exists() }
            )
        }
    }

    test("spaceranger v1 (stub) - homo_sapiens - fasta - gtf - fastq - tif - csv") {

        setup {
            run("SPACERANGER_MKGTF") {
                script "../../mkgtf/main.nf"
                process {
                    """
                    input[0] = file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true)
                    """
                }
            }
        }

        setup {
            run("SPACERANGER_MKREF") {
                script "../../mkref/main.nf"
                process {
                    """
                    input[0] = file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                    input[1] = file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true)
                    input[2] = 'homo_sapiens_chr22_reference'
                    """
                }
            }
        }

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'Visium_FFPE_Human_Ovarian_Cancer',
                        slide: 'V10L13-020',
                        area: 'D1'
                    ], // Meta map
                    [
                        file(params.test_data['homo_sapiens']['10xgenomics']['spaceranger']['test_10x_ffpe_v1_fastq_1_gz']),
                        file(params.test_data['homo_sapiens']['10xgenomics']['spaceranger']['test_10x_ffpe_v1_fastq_2_gz'])
                    ], // Reads
                    file(params.test_data['homo_sapiens']['10xgenomics']['spaceranger']['test_10x_ffpe_v1_image']), // Image
                    [], // Cytaimage
                    [], // Darkimage
                    [], // Colorizedimage
                    [], // Manual alignment (default: automatic alignment)
                    [], // Slide specification (default: automatic download)
                ]
                input[1] = SPACERANGER_MKREF.out.reference // Reference
                input[2] = [] // Probeset (default: use the one included with Space Ranger)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() }
            )
        }
    }

    test("spaceranger v2 - homo_sapiens - fasta - gtf - fastq - tif - csv") {
        setup {
            run("SPACERANGER_MKGTF") {
                script "../../mkgtf/main.nf"
                process {
                    """
                    input[0] = file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true)
                    """
                }
            }
        }

        setup {
            run("SPACERANGER_MKREF") {
                script "../../mkref/main.nf"
                process {
                    """
                    input[0] = file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                    input[1] = file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true)
                    input[2] = 'homo_sapiens_chr22_reference'
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'CytAssist_11mm_FFPE_Human_Glioblastoma_2',
                        slide: 'V52Y10-317',
                        area: 'B1'
                    ], // Meta map
                    [
                        file(params.test_data['homo_sapiens']['10xgenomics']['spaceranger']['test_10x_ffpe_cytassist_fastq_1_gz']),
                        file(params.test_data['homo_sapiens']['10xgenomics']['spaceranger']['test_10x_ffpe_cytassist_fastq_2_gz'])
                    ], // Reads
                    [], // Image
                    file(params.test_data['homo_sapiens']['10xgenomics']['spaceranger']['test_10x_ffpe_cytassist_image']), // Cytaimage
                    [], // Darkimage
                    [], // Colorizedimage
                    [], // Manual alignment (default: automatic alignment)
                    file('https://s3.us-west-2.amazonaws.com/10x.spatial-slides/gpr/V52Y10/V52Y10-317.gpr') // Slide specification (default: automatic download)
                ]
                input[1] = SPACERANGER_MKREF.out.reference // Reference
                input[2] = file(params.test_data['homo_sapiens']['10xgenomics']['spaceranger']['test_10x_ffpe_cytassist_probeset']) // Probeset (default: use the one included with Space Ranger)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.outs.get(0).get(1).findAll { file(it).name !in [
                        'web_summary.html',
                        'scalefactors_json.json',
                        'molecule_info.h5',
                        'barcodes.tsv.gz',
                        'features.tsv.gz',
                        'matrix.mtx.gz',
                        'cloupe.cloupe'
                        ]}
                    ).match()
                },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'web_summary.html' }).exists() },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'scalefactors_json.json' }).exists() },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'molecule_info.h5' }).exists() },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'barcodes.tsv.gz' }).exists() },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'features.tsv.gz' }).exists() },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'matrix.mtx.gz' }).exists() }
            )
        }
    }
}