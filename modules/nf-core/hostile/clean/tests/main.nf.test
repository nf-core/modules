nextflow_process {

    name "Test Process HOSTILE_CLEAN"
    script "../main.nf"
    process "HOSTILE_CLEAN"
    config './nextflow.config'

    tag "modules"
    tag "modules_nfcore"
    tag "hostile"
    tag "hostile/clean"
    tag "bowtie2/build"

    setup {
        run("BOWTIE2_BUILD") {
            script "../../../bowtie2/build/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }
    }

    test("sarscov2 - fastq - single-end") {
        when {
            params {
                module_args = "--aligner bowtie2"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    ],
                ]
                input[1] = BOWTIE2_BUILD.out.index.map{it[1]}
                input[2] = 'genome'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.fastq,
                        process.out.versions,
                        path(process.out.json[0][1]).readLines().any{ it.contains('\"reads_removed\": 0')}
                    ).match() }
            )
        }

    }


    test("sarscov2 - fastq - paired-end") {
        when {
            params {
                module_args = ""
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_2.fastq.gz', checkIfExists: true),
                    ],
                ]
                input[1] = BOWTIE2_BUILD.out.index.map{it[1]}
                input[2] = 'genome'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        path(process.out.fastq[0][1][0]).linesGzip.size(),
                        path(process.out.fastq[0][1][1]).linesGzip.size(),
                        process.out.versions,
                        path(process.out.json[0][1]).readLines().any{ it.contains('\"reads_removed\": 0')}
                    ).match() }
            )
        }

    }

    test("sarscov2 - fastq - single-end - stub") {

        options "-stub"

        when {
            params {
                module_args = ""
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_1.fastq.gz', checkIfExists: true)],
                ]
                input[1] = BOWTIE2_BUILD.out.index.map{it[1]}
                input[2] = 'genome'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
