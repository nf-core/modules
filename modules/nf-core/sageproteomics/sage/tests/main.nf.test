nextflow_process {

    name "Test Process SAGEPROTEOMICS_SAGE"
    script "../main.nf"
    process "SAGEPROTEOMICS_SAGE"

    tag "modules"
    tag "modules_nfcore"
    tag "sageproteomics"
    tag "sageproteomics/sage"

    test("sageproteomics - mzML") {
        when {
            process {
                """
		input[0] = Channel.of([
                    [ id:'test'], // meta map
                    file(params.modules_testdata_base_path + 'proteomics/msspectra/peakpicker_tutorial_1.mzML', checkIfExists: true)
	        ])
		input[1] = Channel.of([
		    [id:'test'], // meta2 map
		    file(params.modules_testdata_base_path + 'proteomics/database/yeast_UPS.fasta', checkIfExists: true)
	        ])
		input[2] = Channel.of([
		    [id:'test'], // meta3 map
		    file(params.modules_testdata_base_path + 'proteomics/parameter/sage_base_config.json', checkIfExists: true)
	        ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.results_pin, process.out.results_tsv, process.out.versions).match() }
            )
        }

    }
    test("sageproteomics - mzML.gz - stub") {
        options "-stub"
        when {
            process {
                """
		input[0] = Channel.of([
                    [ id:'test'], // meta map
                    file(params.modules_testdata_base_path + 'proteomics/msspectra/peakpicker_tutorial_1.mzML', checkIfExists: true)
	        ])
		input[1] = Channel.of([
		    [id:'test'], // meta2 map
		    file(params.modules_testdata_base_path + 'proteomics/database/yeast_UPS.fasta', checkIfExists: true)
	        ])
		input[2] = Channel.of([
		    [id:'test'], // meta3 map
		   file(params.modules_testdata_base_path + 'proteomics/parameter/sage_base_config.json', checkIfExists: true)
	        ])
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
