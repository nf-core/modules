nextflow_process {

    name "Test Process PARAPHASE"
    script "../main.nf"
    process "PARAPHASE"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "paraphase"
    tag "tabix/bgzip"

    setup {
        run("TABIX_BGZIP") {
            script "../../tabix/bgzip/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test_ref' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr22_chr22_KI270734v1_random/sequence/genome.fa.gz', checkIfExists: true),
                ]
                """
            }
        }
    }

    test("homo_sapiens - [ bam, bai ], []") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam.bai', checkIfExists: true),
                ]
                input[1] = TABIX_BGZIP.out.output
                input[2] = [
                    [:],
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.json.get(0).get(1)).readLines()[0..39],
                    process.out.versions,
                    file(process.out.vcf.get(0).get(1)).readLines()[0..962],
                    process.out.bam ==~ "test.paraphase.bam",
                    process.out.bai ==~ "test.paraphase.bam.bai",
                    ).match()
                },
                { assert process.out.bam.get(0).get(1) =~ "test.paraphase.bam" },
                { assert process.out.bai.get(0).get(1) =~ "test.paraphase.bam.bai" },
            )
        }

    }

    test("homo_sapiens - [ bam, bai ], config") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam.bai', checkIfExists: true),
                ]
                input[1] = TABIX_BGZIP.out.output
                input[2] = [
                    [ id:'test_config' ],
                    file(params.modules_testdata_base_path + 'generic/config/paraphase_config.yaml', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.json.get(0).get(1)).readLines()[0..39],
                    process.out.versions,
                    file(process.out.vcf.get(0).get(1)).readLines()[0..962],
                    process.out.bam ==~ "test.paraphase.bam",
                    process.out.bai ==~ "test.paraphase.bam.bai",
                    ).match()
                },
                { assert process.out.bam.get(0).get(1) =~ "test.paraphase.bam" },
                { assert process.out.bai.get(0).get(1) =~ "test.paraphase.bam.bai" },
            )
        }
    }

    test("homo_sapiens - [ bam, bai ], [] - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam.bai', checkIfExists: true),
                ]
                input[1] = TABIX_BGZIP.out.output
                input[2] = [
                    [:],
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("homo_sapiens - [ bam, bai ], config - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam.bai', checkIfExists: true),
                ]
                input[1] = TABIX_BGZIP.out.output
                input[2] = [
                    [ id:'test_config' ],
                    file(params.modules_testdata_base_path + 'generic/config/paraphase_config.yaml', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}