nextflow_process {

    name "Test Process XENIUMRANGER_RENAME"
    script "../main.nf"
    process "XENIUMRANGER_RENAME"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "xeniumranger"
    tag "xeniumranger/rename"
    tag "unzip"

    setup {
            run("UNZIP") {
                script "modules/nf-core/unzip/main.nf"
                process {
                    """
                    input[0] = [[], file('https://raw.githubusercontent.com/nf-core/test-datasets/spatialxe/Xenium_Prime_Mouse_Ileum_tiny_outs.zip', checkIfExists: true)]
                    """
                }
            }
    }

    test("xeniumranger rename") {
        when {
            process {
                """
                input[0] = Channel.of([
                            [id: "test_xeniumranger_rename"],
                        ]).combine(UNZIP.out.unzipped_archive.map { it[1] })
                input[1] = "test_region"
                input[2] = "test_cassette"
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert process.out.outs != null },
                {
                    assert snapshot(
                        process.out.versions,
                        process.out.outs.get(0).get(1).findAll { file(it).name !in [
                            'analysis_summary.html',
                            'experiment.xenium',
                        ]}
                    ).match()
                },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'analysis_summary.html' }).exists() },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'experiment.xenium' }).exists() },
                { assert file(process.out.outs.get(0).get(1).find { file(it).name == 'metrics_summary.csv' }).exists() }
            )
        }
    }

    test("xeniumranger rename stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = Channel.of([
                            [id: "test_xeniumranger_rename"],
                        ]).combine(UNZIP.out.unzipped_archive.map { it[1] })
                input[1] = "test_region"
                input[2] = "test_cassette"
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}