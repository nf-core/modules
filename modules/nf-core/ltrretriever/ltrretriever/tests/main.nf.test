nextflow_process {

    name "Test Process LTRRETRIEVER_LTRRETRIEVER"
    script "../main.nf"
    process "LTRRETRIEVER_LTRRETRIEVER"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "ltrretriever"
    tag "ltrretriever/ltrretriever"
    tag "gunzip/main"
    tag "gt/ltrharvest"
    tag "gt/suffixerator"
    tag "ltrfinder"
    tag "cat/cat"

    test("actinidia_chinensis-genome_21_fasta_gz-success") {

        setup {

            run('GUNZIP') {
                script "../../../gunzip/main"

                process {
                    """
                    input[0] = [
                        [ id:'test' ], // meta map
                        file(params.test_data['actinidia_chinensis']['genome']['genome_21_fasta_gz'], checkIfExists: true)
                    ]
                    """
                }
            }

            run("GT_SUFFIXERATOR") {
                script "../../../gt/suffixerator"

                process {
                    """
                    input[0] = GUNZIP.out.gunzip
                    input[1] = 'dna'
                    """
                }
            }

            run("GT_LTRHARVEST") {
                script "../../../gt/ltrharvest"

                process {
                    """
                    input[0] = GT_SUFFIXERATOR.out.index
                    """
                }
            }

            run("LTRFINDER") {
                script "../../../ltrfinder"

                process {
                    """
                    input[0] = GUNZIP.out.gunzip
                    """
                }
            }

            run("CAT_CAT") {
                script "../../../cat/cat"

                process {
                    """
                    input[0] = GT_LTRHARVEST.out.tabout.mix(LTRFINDER.out.scn).groupTuple()
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = CAT_CAT.out.file_out.map { meta, tabout -> tabout }
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.log[0][1]).text.contains("####### Result files #########") },
                { assert snapshot(process.out.pass_list).match("pass_list") },
                { assert path(process.out.pass_list_gff[0][1]).text.contains("chr1\tLTR_retriever\ttarget_site_duplication") },
                { assert path(process.out.ltrlib[0][1]).text.contains("LTR#LTR/Copia") },
                { assert snapshot(process.out.annotation_out).match("annotation_out") },
                { assert path(process.out.annotation_gff[0][1]).text.contains("Classification=LTR/Copia") },
                { assert snapshot(path(process.out.versions[0]).text).match("versions") }
            )
        }

    }

    test("stub") {

        options '-stub'

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['actinidia_chinensis']['genome']['genome_21_fasta_gz'], checkIfExists: true)
                ]
                input[1] = []
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert snapshot(path(process.out.versions[0]).text).match("versions_stub") }
            )
        }

    }

}
