nextflow_process {

    name "Test Process LTRRETRIEVER_LTRRETRIEVER"
    script "../main.nf"
    process "LTRRETRIEVER_LTRRETRIEVER"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "ltrretriever"
    tag "ltrretriever/ltrretriever"
    tag "gunzip/main"
    tag "ltrharvest"
    tag "ltrfinder"
    tag "cat/cat"

    test("sarscov2-genome-no_ltr") {

        setup {

            run("LTRHARVEST") {
                script "../../../ltrharvest"

                process {
                    """
                    input[0] = [
                        [ id: 'test' ],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }

            run("LTRFINDER") {
                script "../../../ltrfinder"

                process {
                    """
                    input[0] = [
                        [ id: 'test' ],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }

            run("CAT_CAT") {
                script "../../../cat/cat"

                process {
                    """
                    input[0] = LTRHARVEST.out.scn.mix(LTRFINDER.out.scn).groupTuple()
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = input[0] = [
                    [ id: 'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = CAT_CAT.out.file_out.map { meta, tabout -> tabout }
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.log[0][1]).text.contains("ERROR: No candidate is found in the file(s) you specified.") },
                { assert snapshot(process.out.versions).match("versions_no_ltr") }
            )
        }

    }

    test("actinidia_chinensis-genome_21_fasta_gz-success") {

        setup {

            run('GUNZIP') {
                script "../../../gunzip/main"

                process {
                    """
                    input[0] = [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/eukaryotes/actinidia_chinensis/genome/chr1/genome.fasta.gz', checkIfExists: true)
                    ]
                    """
                }
            }

            run("LTRHARVEST") {
                script "../../../ltrharvest"

                process {
                    """
                    input[0] = GUNZIP.out.gunzip
                    """
                }
            }

            run("LTRFINDER") {
                script "../../../ltrfinder"

                process {
                    """
                    input[0] = GUNZIP.out.gunzip
                    """
                }
            }

            run("CAT_CAT") {
                script "../../../cat/cat"

                process {
                    """
                    input[0] = LTRHARVEST.out.scn.mix(LTRFINDER.out.scn).groupTuple()
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = CAT_CAT.out.file_out.map { meta, tabout -> tabout }
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.log[0][1]).text.contains("####### Result files #########") },
                { assert path(process.out.pass_list[0][1]).text.contains("Copia\tLTR") },
                { assert path(process.out.pass_list_gff[0][1]).text.contains("chr1\tLTR_retriever\ttarget_site_duplication") },
                { assert path(process.out.ltrlib[0][1]).text.contains("LTR#LTR/Copia") },
                { assert snapshot(process.out.annotation_out).match("annotation_out") },
                { assert path(process.out.annotation_gff[0][1]).text.contains("Classification=LTR/Copia") },
                { assert snapshot(path(process.out.versions[0]).text).match("versions") }
            )
        }

    }

    test("stub") {

        options '-stub'

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/eukaryotes/actinidia_chinensis/genome/chr1/genome.fasta.gz', checkIfExists: true)
                ]
                input[1] = []
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
