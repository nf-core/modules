// nf-core modules test ale
nextflow_process {

    name "Test Process ALE"
    script "../main.nf"
    process "ALE"

    tag "modules"
    tag "modules_nfcore"
    tag "ale"

    test("sarscov2 [fasta] - paired-end sorted bam") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert path(process.out.ale[0][1]).readLines().first().contains("ALE_score") }
            )
        }

    }

    test("sarscov2 [fasta_gz] - paired-end sorted bam") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['genome']['genome_fasta_gz'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert path(process.out.ale[0][1]).readLines().first().contains("ALE_score") }
            )
        }

    }

    test("sarscov2 [fasta] - single-end sorted bam") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_single_end_bam'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert path(process.out.ale[0][1]).readLines().first().contains("ALE_score") }
                )
        }

    }

    test("sarscov2 [fasta_gz] - single-end sorted bam") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['genome']['genome_fasta_gz'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_single_end_bam'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert path(process.out.ale[0][1]).readLines().first().contains("ALE_score") }
                )
        }

    }

}
