nextflow_process {

    name "Test Process STRELKA_SOMATIC"
    script "../main.nf"
    process "STRELKA_SOMATIC"

    tag "modules"
    tag "modules_nfcore"
    tag "strelka"
    tag "strelka/somatic"

    test("human - cram") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            file(params.modules_testdata_base_path + genomics/homo_sapiens/illumina/cram/test.paired_end.recalibrated.sorted.cram, checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_cram_crai'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_cram'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_cram_crai'], checkIfExists: true),
                            [],[],
                            file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed_gz'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed_gz_tbi'], checkIfExists: true)
                            ]
                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                input[2] = file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.vcf_indels.get(0).get(1)).linesGzip.contains("##fileformat=VCFv4.1") },
                { assert path(process.out.vcf_snvs.get(0).get(1)).linesGzip.contains("##fileformat=VCFv4.1") },
                { assert snapshot(process.out.version).match("version") }
            )
        }

    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:

                input[0] = file(params.test_data['sarscov2']['illumina']['test_single_end_bam'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }

    }

}
