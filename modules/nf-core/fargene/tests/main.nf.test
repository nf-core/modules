nextflow_process {

    name "Test Process FARGENE"
    script "../main.nf"
    process "FARGENE"

    tag "modules"
    tag "modules_nfcore"
    tag "fargene"
    tag "gunzip"

    setup {

        run("GUNZIP") {
            script "../../gunzip/main.nf"
            process {
                """
                input[0] =  Channel.fromList([
                    tuple([ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true))
                ])
                """
            }
        }
    }

    test("fargene - bacteroides fragilis - contigs.fa.gz") {

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = 'class_a'
                """
            }
        }

        then {
            assertAll {
                { assert process.success }
                { assert snapshot(
                            process.out.txt,
                            path(process.out.log[0][1]).readLines().last().contains("Output can be found in"),
                            path(process.out.hmm[0][1]).readLines().last().contains("[ok]"),
                            file(process.out.tmp[0][1].find { file(it).name == "tmp.out" }).readLines().last().contains("[ok]"),
                            process.out.versions
                    ).match()
                }
            }
        }

    }

    test("fargene - bacteroides fragilis - contigs.fa.gz - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = 'class_a'
                """
            }
        }

        then {
            assertAll {
                { assert process.success }
                { assert snapshot(process.out).match() }
            }
        }

    }

}
