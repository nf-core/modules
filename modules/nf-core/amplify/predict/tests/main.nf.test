// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test amplify/predict
nextflow_process {

    name "Test Process AMPLIFY_PREDICT"
    script "../main.nf"
    process "AMPLIFY_PREDICT"

    tag "modules"
    tag "modules_nfcore"
    tag "amplify"
    tag "amplify/predict"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    
    test("AMPlify predict (with Prodigal) - sarscov2 - contigs fasta") {

        // TODO nf-core: If you are created a test for a chained module
        // (the module requires running more than one process to generate the required output)
        // add the 'setup' method here.
        // You can find more information about how to use a 'setup' method in the docs (https://nf-co.re/docs/contributing/modules#steps-for-creating-nf-test-for-chained-modules).

        setup { 
            run("PRODIGAL") {
                script "../../../prodigal/main.nf"
                process {
                    """
                    input[0] =  Channel.fromList([
                        tuple([ id:'test', single_end:false ], // meta map
                        file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true))
                    ])
                    input[1] = "gff"
                    """
                }
            }
        }

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:
                
                input[0] = PRODIGAL.out.amino_acid_fasta
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") }
                //TODO nf-core: Add all required assertions to verify the test output.
                //{ assert snapshot(process.out).match() }
            )
        }

    }

}
