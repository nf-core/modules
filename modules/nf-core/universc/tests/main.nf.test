nextflow_process {

    name "Test Process UNIVERSC"
    script "../main.nf"
    config "./nextflow.config"
    process "UNIVERSC"

    tag "modules"
    tag "modules_nfcore"
    tag "untar"
    tag "universc"

    test("universc_10x") {
        setup {
            run("UNTAR") {
                script "../../untar/main.nf"
                process {
                    """
                    input[0] = [
                        [id: "homo_sapiens_chr22_reference"],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/universc/homo_sapiens_chr22_reference.tar.gz', checkIfExists:true)
                    ]
                    """
                }
            }
        }
        when {
            params {
                universc_args = "--chemistry 'SC3Pv3' --description test_10x"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/gex_1/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_gex_S2_L001_R1_001.fastq.gz', checkIfExists:true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/gex_1/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_gex_S2_L001_R2_001.fastq.gz', checkIfExists:true)
                    ]
                ]
                input[1] = UNTAR.out.untar
                input[2] = "10x"
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.outs[0][1].collect{
                        file(it).name.find(/_err|_log|\.h5|\.bam/)
                            ? file(it).name : it // _err is empty and others are not stable
                    },
                    process.out.versions
                ).match() }
            )
        }
    }


    test("universc_10x -- stub") {
        options '-stub'
        when {
            params {
                universc_args = ""
            }
            process {
                """
                input[0] = [
                    [id:'test', single_end:false ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/gex_1/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_gex_S2_L001_R1_001.fastq.gz',checkIfExists:true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/gex_1/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_gex_S2_L001_R2_001.fastq.gz',checkIfExists:true)
                    ]
                ]
                input[1] = [[], []]
                input[2] = [[]]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
}