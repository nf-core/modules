nextflow_process {

    name "Test Process PEDDY"
    script "modules/nf-core/peddy/main.nf"
    process "PEDDY"

    tag "modules"
    tag "modules_nfcore"
    tag "peddy"

    test("test - peddy") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/vcf/FAM_snvs_annotated_ranked.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/vcf/FAM_snvs_annotated_ranked.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'ped_file' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/vcf/FAM.ped', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'sites_file' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/vcf/peddy.sites', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.vs_html,
                    process.out.het_check_csv,
                    process.out.ped_check_csv,
                    process.out.sex_check_csv,
                    process.out.ped_check_rel_difference_csv).match()
                },
                { assert path(process.out.het_check_png[0][1]).exists() },
                { assert path(process.out.ped_check_png[0][1]).exists() },
                { assert path(process.out.sex_check_png[0][1]).exists() },
                { assert path(process.out.ped[0][1]).exists() }, // rounding discrepancies between conda and docker/singularity containers
                { assert path(process.out.html[0][1]).exists() }

            )
        }

    }

    test("test - peddy - double_sites") {

        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/vcf/FAM_snvs_annotated_ranked.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/vcf/FAM_snvs_annotated_ranked.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'ped_file' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/vcf/FAM.ped', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'sites_file' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/vcf/peddy.sites', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert !process.success },
                { assert process.exitStatus != 0 }
            )
        }
    }

        test("test - peddy - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/vcf/FAM_snvs_annotated_ranked.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/vcf/FAM_snvs_annotated_ranked.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'ped_file' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/vcf/FAM.ped', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'sites_file' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/vcf/peddy.sites', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
}
