nextflow_process {

    name "Test Process CLIPPY"
    script "../main.nf"
    process "CLIPPY"

    tag "modules"
    tag "modules_nfcore"
    tag "clippy"

    test("non-intergenic") {

        config "./nextflow.config"

        when {
            params {
                module_args = '-inter 3'
            }
            process {
                """
                input[0] = [
                    [  id:'test' ], // meta map
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/clipseq/crosslinks/clippy.bed", checkIfExists: true)
                ]
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/chr21_gencode.gtf', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("intergenic") {

        when {
            process {
                """
                input[0] = [
                    [  id:'test' ], // meta map
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/clipseq/crosslinks/clippy.bed", checkIfExists: true)
                ]
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/chr21_gencode.gtf', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("non-intergenic - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [  id:'test' ], // meta map
                    []
                ]
                input[1] = []
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
