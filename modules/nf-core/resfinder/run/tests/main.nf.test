nextflow_process {

    name "Test Process RESFINDER_RUN"
    script "../main.nf"
    process "RESFINDER_RUN"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "untar"
    tag "resfinder"
    tag "resfinder/run"

    setup {
        run("UNTAR") {
            script "modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [],
                    file(params.test_data['sarscov2']['genome']['resfinder_tar_gz'], checkIfExists: true)
                ])
                """
            }
        }
    }

    test("sarscov2 - fastq se") {

        when {
            process {
                """

                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                    ],
                    []
                ]

                input[1] = UNTAR.out.untar.map{ it[1] + "/resfinder" }

                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - fastq pe") {

        when {
            process {
                """

                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ],
                    []
                ]

                input[1] = UNTAR.out.untar.map{ it[1] + "/resfinder" }

                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - fasta") {

        when {
            process {
                """

                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [],
                    [
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                ]

                input[1] = UNTAR.out.untar.map{ it[1] + "/resfinder" }

                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - fastq - stub") {

        options "-stub"

        when {
            process {
                """

                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                    ],
                    []
                ]

                input[1] = UNTAR.out.untar.map{ it[1] + "/resfinder" }

                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
