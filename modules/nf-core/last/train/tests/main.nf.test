nextflow_process {

    name "Test Process LAST_TRAIN"
    script "../main.nf"
    process "LAST_TRAIN"

    tag "modules"
    tag "modules_nfcore"
    tag "last"
    tag "last/train"
    tag "untar"

    test("sarscov2 - genome - contigs") {

        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                """
                input[0] = [
                    [id:'genome'], // meta map
                    file(params.test_data['sarscov2']['genome']['lastdb_tar_gz'], checkIfExists: true)
                ]
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'contigs', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true),
                ]
                input[1] = UNTAR.out.untar.map{ it[1] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - genome - contigs - stub") {

        options "-stub"
        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                """
                input[0] = [
                    [id:'genome'], // meta map
                    file(params.test_data['sarscov2']['genome']['lastdb_tar_gz'], checkIfExists: true)
                ]
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'contigs', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true),
                ]
                input[1] = UNTAR.out.untar.map{ it[1] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
