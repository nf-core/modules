nextflow_process {

    name "Test Process LAST_DOTPLOT"
    script "../main.nf"
    process "LAST_DOTPLOT"

    tag "modules"
    tag "modules_nfcore"
    tag "last"
    tag "last/dotplot"

    test("sarscov2 - contigs - genome - png") {

        when {
            process {
                """
                input[0] = channel.of('NODE_1_length_20973_cov_191.628754\t2000\t2010')
                         . collectFile(name: 'dummy_annot_b.bed', newLine: true)
                         . map { [
                                   [ id:'test' ], // meta map
                                   file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/alignment/last/contigs.genome.maf.gz', checkIfExists: true),
                                   it
                                 ] }
                input[1] = channel.of('MT192765.1\t1000\t1010')
                         . collectFile(name: 'dummy_annot_a.bed', newLine: true)
                         . map { [ [ id:'test'], it ] }
                input[2] = channel.of("png")
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert process.out.png.get(0).get(1).endsWith("test.png") }
            )
        }

    }

    test("sarscov2 - contigs - genome - gif") {
    // Test a different output format and absence of annotation files
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/alignment/last/contigs.genome.maf.gz', checkIfExists: true),
                    []
                ]
                input[1] = [ [id: 'test'], [] ]
                input[2] = "gif"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert process.out.gif.get(0).get(1).endsWith("test.gif") }
            )
        }

    }

    test("sarscov2 - contigs - genome - png - stub") {

        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/alignment/last/contigs.genome.maf.gz', checkIfExists: true),
                    []
                ]
                input[1] = [ [id: 'test'], [] ]
                input[2] = "png"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert process.out.png.get(0).get(1).endsWith("test.png") }
            )
        }

    }

}
