nextflow_process {

    name "Test Process LAST_DOTPLOT"
    script "../main.nf"
    process "LAST_DOTPLOT"

    tag "modules"
    tag "modules_nfcore"
    tag "last"
    tag "last/dotplot"

    test("sarscov2 - contigs - genome - png") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['genome']['contigs_genome_maf_gz'], checkIfExists: true)
                ]
                input[1] = channel.of("png")
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert process.out.png.get(0).get(1).endsWith("test.png") }
            )
        }

    }

    test("sarscov2 - contigs - genome - gif") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['genome']['contigs_genome_maf_gz'], checkIfExists: true)
                ]
                input[1] = channel.of("gif")
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert process.out.gif.get(0).get(1).endsWith("test.gif") }
            )
        }

    }

    test("sarscov2 - contigs - genome - png - stub") {

        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['genome']['contigs_genome_maf_gz'], checkIfExists: true)
                ]
                input[1] = channel.of("png")
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert process.out.png.get(0).get(1).endsWith("test.png") }
            )
        }

    }

}
