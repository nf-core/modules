nextflow_process {

    name "Test Process BAKTA_BAKTA"
    script "../main.nf"
    config "./nextflow.config"
    process "BAKTA_BAKTA"

    tag "modules"
    tag "modules_nfcore"
    tag "bakta"
    tag "bakta/bakta"
    tag "bakta/baktadbdownload"

    test("Bakta - bacteroides_fragilis - genome.fasta") {

        setup {
            run("BAKTA_BAKTADBDOWNLOAD") {
                script "../../baktadbdownload/main.nf"
                process {
                    """
                    """
                }
            }
        }

        when {
            process {
                """             
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['bacteroides_fragilis']['illumina']['test1_contigs_fa_gz'], checkIfExists: true)
                ]
                input[1] = BAKTA_BAKTADBDOWNLOAD.out.db
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.embl.get(0).get(1)).text.contains("/translation=\"MKNTLKIAILLIAIISMGHWMPVKQVCDLNSLSLQNVEALANGET") },
                { assert path(process.out.faa.get(0).get(1)).text.contains("MKNTLKIAILLIAIISMGHWMPVKQVCDLNSLSLQNVEALANGETPNYTFCIGAGSVDCPIQHDKVKYVSQGFSLDY") },
                { assert path(process.out.ffn.get(0).get(1)).text.contains("ATGAAAAACACTTTAAAAATAGCTATTCTTCTTATTGCTATTATTTCTATGGGGCATTGGATGCCTGTAAAACAAGT") },
                { assert path(process.out.fna.get(0).get(1)).text.contains("TCTTTTTACTCATAATCTACTTTTATGATGTTAATTATTTTTTCCGTGTCTCTCTTTCGG") },
                { assert path(process.out.gbff.get(0).get(1)).text.contains("/translation=\"MKNTLKIAILLIAIISMGHWMPVKQVCDLNSLSLQNVEALANGET") },
                { assert path(process.out.gff.get(0).get(1)).text.contains("##sequence-region contig_1 1 2926") },
                { assert path(process.out.hypotheticals_tsv.get(0).get(1)).text.contains("#Annotated with Bakta") },
                { assert path(process.out.hypotheticals_faa.get(0).get(1)).text.contains("MKNLILVLGCFFFLISCQQTEKEKLEELVKNWNGKEVLL") },
                { assert path(process.out.tsv.get(0).get(1)).text.contains("SO:0001217, UniRef:UniRef50_A0A0I9S7A3") },
                { assert path(process.out.txt.get(0).get(1)).text.contains("Length: 1739120") },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("Bakta - stub") {

        options "-stub"

        when {
            process {
                """  
                input[0] = [[id: 'stub'],file('stub')]
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
