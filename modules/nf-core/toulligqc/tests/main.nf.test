nextflow_process {

    name "Test Process TOULLIGQC"
    script "../main.nf"
    process "TOULLIGQC"

    tag "modules"
    tag "modules_nfcore"
    tag "toulligqc"

    test("sarscov2 - nanopore sequencing_summary") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['nanopore']['test2_sequencing_summary'], checkIfExists: true),
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("toulligqc_versions_sequencing_summary") },
                { assert snapshot(file(process.out.report_data.get(0).get(1)).readLines()[11..74]).match() },
                { assert process.out.report_html[0][1] ==~ ".*/report.html"}
            )
        }

    }

    test("sarscov2 - nanopore sequencing_summary + barcodes") {
        config  "./nextflow.config"
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['nanopore']['test2_sequencing_summary'], checkIfExists: true),
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("toulligqc_versions_sequencing_summary_barcodes") },
                { assert snapshot(file(process.out.report_data.get(0).get(1)).readLines()[11..74]).match() },
                { assert process.out.report_html[0][1] ==~ ".*/report.html"}
            )
        }

    }

    test("sarscov2 - nanopore fastq") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['nanopore']['test_fastq_gz'], checkIfExists: true),
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("toulligqc_versions_fastq") },
                { assert snapshot(file(process.out.report_data.get(0).get(1)).readLines()[11..67]).match() },
                { assert process.out.report_html[0][1] ==~ ".*/report.html"}
            )
        }

    }

    test("sarscov2 - nanopore bam") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['nanopore']['test_sorted_bam'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("toulligqc_versions_bam") },
                { assert snapshot(file(process.out.report_data.get(0).get(1)).readLines()[11..74]).match() },
                { assert process.out.report_html[0][1] ==~ ".*/report.html"}
            )
        }

    }
    test("sarscov2 - nanopore bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['nanopore']['test_sorted_bam'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("toulligqc_versions_stub") }
            )
        }
    }
}