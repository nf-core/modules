nextflow_process {

    name "Test Process GSEA_GSEA"
    script "../main.nf"
    process "GSEA_GSEA"
    tag "modules"
    tag "modules_nfcore"
    tag "gsea_gsea"
    tag "gsea"
    tag "gsea/gsea"

    test("test") {

        when {
            process {
                """
                input[0] = [['id':'Condition_genotype_WT_KO', 'variable':'Condition genotype', 'reference':'WT', 'target':'KO', 'blocking':'batch'], file("https://github.com/nf-core/test-datasets/raw/refs/heads/differentialabundance/modules_testdata/Condition_treatment_Control_Treated.gct", checkIfExists:true), file("https://github.com/nf-core/test-datasets/raw/refs/heads/differentialabundance/modules_testdata/Condition_genotype_WT_KO.cls", checkIfExists:true), file("https://github.com/nf-core/test-datasets/raw/refs/heads/modules/data/genomics/mus_musculus/gene_set_analysis/mh.all.v2022.1.Mm.symbols.gmt", checkIfExists:true)]
                input[1] = ['WT', 'KO']
                input[2] = file("https://github.com/nf-core/test-datasets/raw/refs/heads/differentialabundance/modules_testdata/Mus_musculus.anno.feature_metadata.chip", checkIfExists:true)
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.rpt.collect{ meta,rpt -> file(rpt).name }, //assert unstable file,
                    process.out.index_html.collect{ meta,index_html -> file(index_html).name }, //assert unstable file
                    process.out.heat_map_corr_plot,
                    process.out.report_tsvs_ref.collect{ meta,report_tsvs_ref -> file(report_tsvs_ref).name },
                    process.out.report_htmls_ref.collect{ meta,report_htmls_ref -> file(report_htmls_ref).name }, //assert unstable file
                    process.out.report_tsvs_target.collect{ meta,report_tsvs_target -> file(report_tsvs_target).name }, //assert unstable file
                    process.out.report_htmls_target.collect{ meta,report_htmls_target -> file(report_htmls_target).name }, //assert unstable file
                    process.out.ranked_gene_list.collect{ meta,ranked_gene_list -> file(ranked_gene_list).name }, //assert unstable file
                    process.out.gene_set_sizes,
                    process.out.histogram.collect{ meta,histogram -> file(histogram).name }, //assert unstable file
                    process.out.heatmap,
                    process.out.pvalues_vs_nes_plot.collect{ meta,pvalues_vs_nes_plot -> file(pvalues_vs_nes_plot).name }, //assert unstable file
                    process.out.ranked_list_corr,
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [['id':'Condition_genotype_WT_KO', 'variable':'Condition genotype', 'reference':'WT', 'target':'KO', 'blocking':'batch'], file("https://github.com/nf-core/test-datasets/raw/refs/heads/differentialabundance/modules_testdata/Condition_treatment_Control_Treated.gct", checkIfExists:true), file("https://github.com/nf-core/test-datasets/raw/refs/heads/differentialabundance/modules_testdata/Condition_genotype_WT_KO.cls", checkIfExists:true), file("https://github.com/nf-core/test-datasets/raw/refs/heads/modules/data/genomics/mus_musculus/gene_set_analysis/mh.all.v2022.1.Mm.symbols.gmt", checkIfExists:true)]
                input[1] = ['WT', 'KO']
                input[2] = file("https://github.com/nf-core/test-datasets/raw/refs/heads/differentialabundance/modules_testdata/Mus_musculus.anno.feature_metadata.chip", checkIfExists:true)
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }
    }
}
