nextflow_process {

    name "Test Process VARLOCIRAPTOR_ESTIMATEALIGNMENTPROPERTIES"
    script "../main.nf"
    process "VARLOCIRAPTOR_ESTIMATEALIGNMENTPROPERTIES"

    tag "modules"
    tag "modules_nfcore"
    tag "varlociraptor"
    tag "varlociraptor/estimatealignmentproperties"

    test("sarscov2 - [bam,fasta]") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists:true),
				]
				input[1] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
				]
				input[2] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
				]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.alignment_properties_json[0][1]).json.sort { a, b -> a.key <=> b.key }.collectEntries { k, v -> 
                        [k, v instanceof Map ? v.sort { it.key } : v] 
                    }.toString().md5(),
                    process.out.versions
                    ).match() }
            )
        }
    }

    test("sarscov2 - [bam,fasta] - stub") {

        options '-stub'

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists:true),
				]
				input[1] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
				]
				input[2] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
				]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }

}
