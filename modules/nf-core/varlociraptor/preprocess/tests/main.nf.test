nextflow_process {

    name "Test Process VARLOCIRAPTOR_PREPROCESS"
    
    script "../main.nf"
    process "VARLOCIRAPTOR_PREPROCESS"
   
    tag "modules"
    tag "modules_nfcore"
    tag "varlociraptor"
    tag "varlociraptor/estimatealignmentproperties"
    tag "varlociraptor/preprocess"
   
    test("sarscov2 - bam vcf json - fasta") {
        setup {
            run("VARLOCIRAPTOR_ESTIMATEALIGNMENTPROPERTIES") {
                script "../../estimatealignmentproperties/main.nf"
                
                process {
                    """
                    input[0] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    ]
                    input[1] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists:true)
                    ]
                    input[2] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists:true)
                    ]
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = Channel.of([
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf', checkIfExists:true),
                ])
                .collect()
                .join(VARLOCIRAPTOR_ESTIMATEALIGNMENTPROPERTIES.out.alignment_properties_json)
                input[1] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists:true)
                ]
                input[2] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists:true)
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bcf[0][1]).name,
                    // path(process.out.bcf[0][1]).vcf.variantsMD5,
                    // Error: BCF magic header info not found with current version of nf-test htjsk
                    // Might be linked to https://github.com/samtools/htsjdk/issues/946 and block gzipped BCF
                    process.out.versions
                ).match() }
            )
        }
    }

    test("sarscov2 - bam vcf [] - fasta -- stub") {
        when {
            process {
                """
                input[0] = Channel.of([
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf', checkIfExists:true),
                    []
                ])
                input[1] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists:true)
                ]
                input[2] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists:true)
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
}