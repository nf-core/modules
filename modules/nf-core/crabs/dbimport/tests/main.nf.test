nextflow_process {

    name "Test Process CRABS_DBIMPORT"
    script "../main.nf"
    process "CRABS_DBIMPORT"

    tag "modules"
    tag "modules_nfcore"
    tag "crabs"
    tag "crabs/dbimport"
    tag "crabs/downloadtaxonomy"

    setup {
        run("CRABS_DOWNLOADTAXONOMY") {
            script "../../downloadtaxonomy/main.nf"
            process {
                """
                input[0] = [ id:'taxonomy' ]
                """
            }
        }
    }

    test("sarscov2 - fasta") {

        config "./nextflow.config"

        when {
            params {
                module_args = "--import-format embl --ranks 'superkingdom;phylum;class;order;family;genus;species' \\"
            }
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path +'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = CRABS_DOWNLOADTAXONOMY.out.accession2taxid
                input[2] = CRABS_DOWNLOADTAXONOMY.out.names
                input[3] = CRABS_DOWNLOADTAXONOMY.out.nodes
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - fasta - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path +'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = CRABS_DOWNLOADTAXONOMY.out.accession2taxid
                input[2] = CRABS_DOWNLOADTAXONOMY.out.names
                input[3] = CRABS_DOWNLOADTAXONOMY.out.nodes
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }

    }

}