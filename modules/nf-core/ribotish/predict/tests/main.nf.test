nextflow_process {

    name "Test Process RIBOTISH_PREDICT"
    script "../main.nf"
    process "RIBOTISH_PREDICT"

    tag "gunzip"
    tag "modules"
    tag "modules_nfcore"
    tag "ribotish"
    tag "ribotish/predict"

    setup {
        run("GUNZIP") {
            script "modules/nf-core/gunzip/main.nf"
            process {
            """
            input[0] = [
                [ ],
                file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/Homo_sapiens.GRCh38.dna.chromosome.20.fa.gz", checkIfExists: true)
            ]
            """
            }
        }
    }

    test("sarscov2 [bam] - single_end - single ribo bam") {

        when {
            process {
                """
                input[0] = [ 
                    [ id:'test', single_end:true, strandedness:'forward' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780888_chr20.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780888_chr20.bam.bai", checkIfExists: true)
                ]
                input[1] = Channel.of([[],[],[]])
                input[2] = GUNZIP.out.gunzip.map{[
                    [id:'homo_sapiens_chr20'], 
                    it[1],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/Homo_sapiens.GRCh38.111_chr20.gtf", checkIfExists: true)
                ]}
                input[3] = Channel.of([[],[]])
                input[4] = Channel.of([[],[]])
                input[5] = Channel.of([[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.predictions[0][1]).getText().contains("ENSG00000132640\tENST00000254977\tBTBD3\tprotein_coding\t20:11890767-11923666:+\tATG\t45\t1743\tExtended\t0\t0\tNone\t0.013377070461772932\tT\tNone\tNone\t0.02118962148347") },
                { assert path(process.out.all[0][1]).getText().contains("ENSG00000132640\tENST00000254977\tBTBD3\tprotein_coding\t20:11890767-11923666:+\tATG\t45\t1743\tExtended\t0\t0\tNone\t0.013377070461772932\tT\tNone\tNone\t0.02118962148347") },
                { assert snapshot(process.out.transprofile).match("transprofile_single_end_single_ribo_bam") },
                { assert snapshot(process.out.versions).match("versions_single_end_single_ribo_bam") }
            )
        }
    }

    test("sarscov2 [bam] - single_end - single ribo bam - stub") {

        options '-stub'

        when {
            process {
                """
                input[0] = [ 
                    [ id:'test', single_end:true, strandedness:'forward' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780888_chr20.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780888_chr20.bam.bai", checkIfExists: true)
                ]
                input[1] = Channel.of([[],[],[]])
                input[2] = GUNZIP.out.gunzip.map{[
                    [id:'homo_sapiens_chr20'], 
                    it[1],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/Homo_sapiens.GRCh38.111_chr20.gtf", checkIfExists: true)
                ]}
                input[3] = Channel.of([[],[]])
                input[4] = Channel.of([[],[]])
                input[5] = Channel.of([[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.predictions).match("predictions_single_end_single_ribo_bam_stub") },
                { assert snapshot(process.out.all).match("all_single_end_single_ribo_bam_stub") },
                { assert snapshot(process.out.transprofile).match("transprofile_single_end_single_ribo_bam_stub") },
                { assert snapshot(process.out.versions).match("versions_single_end_single_ribo_bam_stub") }
            )
        }
    }
    
    test("sarscov2 [bam] - single_end - multi ribo bam") {

        when {
            process {
                """
                input[0] = [ 
                    [ id:'test', single_end:true, strandedness:'forward' ], // meta map
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780887_chr20.bam", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780888_chr20.bam", checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780887_chr20.bam.bai", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780888_chr20.bam.bai", checkIfExists: true)
                    ]
                ]
                input[1] = Channel.of([[],[],[]])
                input[2] = GUNZIP.out.gunzip.map{[
                    [id:'homo_sapiens_chr20'], 
                    it[1],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/Homo_sapiens.GRCh38.111_chr20.gtf", checkIfExists: true)
                ]}
                input[3] = Channel.of([[],[]])
                input[4] = Channel.of([[],[]])
                input[5] = Channel.of([[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.predictions[0][1]).getText().contains("ENSG00000284776\tENST00000618693\t\tprotein_coding\t20:18567478-18744216:+\tATG\t26\t695\tAnnotated\t0\t0\tNone\t0.0006123183014212") },
                { assert path(process.out.all[0][1]).getText().contains("ENSG00000284776\tENST00000618693\t\tprotein_coding\t20:18567478-18744216:+\tATG\t26\t695\tAnnotated\t0\t0\tNone\t0.0006123183014212") },
                { assert snapshot(process.out.transprofile).match("transprofile_single_end_multi_ribo_bam") },
                { assert snapshot(process.out.versions).match("versions_single_end_multi_ribo_bam") }
            )
        }
    }

    test("sarscov2 [bam] - single_end - multi ribo bam - stub") {

        options '-stub'
        
        when {
            process {
                """
                input[0] = [ 
                    [ id:'test', single_end:true, strandedness:'forward' ], // meta map
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780887_chr20.bam", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780888_chr20.bam", checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780887_chr20.bam.bai", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780888_chr20.bam.bai", checkIfExists: true)
                    ]
                ]
                input[1] = Channel.of([[],[],[]])
                input[2] = GUNZIP.out.gunzip.map{[
                    [id:'homo_sapiens_chr20'], 
                    it[1],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/Homo_sapiens.GRCh38.111_chr20.gtf", checkIfExists: true)
                ]}
                input[3] = Channel.of([[],[]])
                input[4] = Channel.of([[],[]])
                input[5] = Channel.of([[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.predictions).match("predictions_single_end_multi_ribo_bam_stub") },
                { assert snapshot(process.out.all).match("all_single_end_multi_ribo_bam_stub") },
                { assert snapshot(process.out.transprofile).match("transprofile_single_end_multi_ribo_bam_stub") },
                { assert snapshot(process.out.versions).match("versions_single_end_multi_ribo_bam_stub") }
            )
        }
    }
}
