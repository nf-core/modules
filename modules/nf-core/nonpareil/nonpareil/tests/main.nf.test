nextflow_process {

    name "Test Process NONPAREIL_NONPAREIL"
    script "../main.nf"
    process "NONPAREIL_NONPAREIL"
    config "./nextflow.config"
    tag "modules"
    tag "modules_nfcore"
    tag "nonpareil"
    tag "nonpareil/nonpareil"
    tag "gunzip"

    test("candidatus_portiera_aleyrodidarum - gzipped") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/candidatus_portiera_aleyrodidarum/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = 'fastq'
                input[2] = 'kmer'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        file(process.out.npa[0][1]).name,
                        file(process.out.npc[0][1]).name,
                        path(process.out.npo[0][1]).readLines()[0],
                        path(process.out.npl[0][1]).readLines().last().contains("Everything seems correct"),
                        process.out.versions
                    ).match()
                }
            )
        }

    }

    test("candidatus_portiera_aleyrodidarum - uncompressed") {


        setup {
            run("GUNZIP") {
                script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/prokaryotes/candidatus_portiera_aleyrodidarum/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = 'fastq'
                input[2] = 'kmer'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        file(process.out.npa[0][1]).name,
                        file(process.out.npc[0][1]).name,
                        path(process.out.npo[0][1]).readLines()[0],
                        path(process.out.npl[0][1]).readLines().last().contains("Everything seems correct"),
                        process.out.versions
                    ).match()
                }
            )
        }

    }

test("candidatus_portiera_aleyrodidarum - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/candidatus_portiera_aleyrodidarum/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = 'fastq'
                input[2] = 'kmer'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }


}
