nextflow_process {

    name "Test Process ARRIBA_VISUALISATION"
    script "../main.nf"
    process "ARRIBA_VISUALISATION"
    tag "modules"
    tag "modules_nfcore"
    tag "arriba"
    tag "arriba/visualisation"
    tag "star/align"
    tag "star/genomegenerate"
    tag "arriba/arriba"
    tag "arriba/download"

    test("ARRIBA_VISUALISATION") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [],
                    [],
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/rnafusion/testdata/reference/arriba/test_fastqs.arriba.fusions.tsv", checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test_gtf' ],
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/rnafusion/testdata/reference/ensembl/Homo_sapiens.GRCh38.102.chr4.gtf", checkIfExists: true)
                ]
                input[2] = [
                    [ id:'test_protein_domains' ],
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/rnafusion/testdata/reference/arriba/protein_domains_hg38_GRCh38_v2.5.0.gff3", checkIfExists: true)
                ]
                input[3] = [
                    [ id:'test_cytobands' ],
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/rnafusion/testdata/reference/arriba/cytobands_hg38_GRCh38_v2.5.0.tsv", checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.pdf[0][1]).length()) },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }
    }

    test("ARRIBA_VISUALISATION - arriba test") {
        config "./nextflow.config"

        setup{

            run("STAR_GENOMEGENERATE") {
                script '../../../star/genomegenerate/main.nf'
                process {
                """
                input[0] = Channel.of([
                    [ id:'test_fasta' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                """
                }
            }

            run("STAR_ALIGN") {
                script '../../../star/align/main.nf'
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                        ]
                    ])
                    input[1] = STAR_GENOMEGENERATE.out.index
                    input[2] = Channel.of([
                        [ id:'test_gtf' ],
                        [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                    ])
                    input[3] = false
                    input[4] = 'illumina'
                    input[5] = false
                    """
                }
            }

            run("ARRIBA_ARRIBA") {
                script '../../arriba/main.nf'
                process {
                    """
                    input[0] = STAR_ALIGN.out.bam
                    input[1] = Channel.of([
                        [ id:'test_fasta' ],
                        [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                    ])
                    input[2] = Channel.of([
                        [ id:'test_gtf' ],
                        [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                    ])
                    input[3] = []
                    input[4] = []
                    input[5] = []
                    input[6] = []
                    """
                }
            }
            run("ARRIBA_DOWNLOAD") {
                script '../../download/main.nf'
                process {
                """
                input[0] = 'GRCh38'
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = ARRIBA_ARRIBA.out.fusions.map { meta, fusions -> [ meta, [], [], fusions ] }
                input[1] = [
                    [ id:'test_gtf' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                ]
                input[2] = ARRIBA_DOWNLOAD.out.protein_domains.map { protein_domains -> [[ id:'test_protein_domains' ], protein_domains] }
                input[3] = ARRIBA_DOWNLOAD.out.cytobands.map { cytobands -> [[ id:'test_cytobands' ], cytobands] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.pdf[0][1]).length()) },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }
    }

    test("ARRIBA_VISUALISATION stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam", checkIfExists: true),
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam.bai", checkIfExists: true),
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/rnafusion/testdata/reference/arriba/test_fastqs.arriba.fusions.tsv", checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test_gtf' ],
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/rnafusion/testdata/reference/ensembl/Homo_sapiens.GRCh38.102.chr4.gtf", checkIfExists: true)
                ]
                input[2] = [
                    [ id:'test_protein_domains' ],
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/rnafusion/testdata/reference/arriba/protein_domains_hg38_GRCh38_v2.5.0.gff3", checkIfExists: true)
                ]
                input[3] = [
                    [ id:'test_cytobands' ],
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/rnafusion/testdata/reference/arriba/cytobands_hg38_GRCh38_v2.5.0.tsv", checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}