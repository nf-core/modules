nextflow_process {
    name "Test Process PYPGX_COMPUTECONTROLSTATISTICS"
    script "../main.nf"
    process "PYPGX_COMPUTECONTROLSTATISTICS"

    tag "modules"
    tag "modules_nfcore"
    tag "pypgx"
    tag "pypgx/computecontrolstatistics"

    test("human paired end bam CYP2D6 locus - GRCh37 - VDR control gene") {
        when {
            process {
                """
                input[0] = [
                    [id: 'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.PGx.CYP2D6.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.PGx.CYP2D6.bam.bai', checkIfExists: true)
                ]
                input[1] = "VDR"
                input[2] = "GRCh37"
                """
            }
        }
        then {
            def zipFile = path(process.out.control_stats[0][1]).zip
            def paths = zipFile.extractAll()
            def metaFile = paths.find { it.getFileName().toString() == 'metadata.txt' }
            def dataFile = paths.find { it.getFileName().toString() == 'data.tsv' }

            assertAll(
                {assert process.success},
                {assert zipFile.isValid()},
                {assert snapshot(
		    metaFile,
                    dataFile).match()}
            )
        }
    }


    test("stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [id: 'test'],
                    [],
                    []
                ]
                input[1] = ""
                input[2] = ""
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
