// nf-core modules test pypgx/createinputvcf
nextflow_process {

    name "Test Process PYPGX_CREATEINPUTVCF"
    script "../main.nf"
    process "PYPGX_CREATEINPUTVCF"

    tag "modules"
    tag "modules_nfcore"
    tag "pypgx"
    tag "pypgx/createinputvcf"


    test("human paired end bam CYP2D6 locus - GR37_chr22.fasta") {
        when {
            process {
                """
                input[0] = [
                    [id: 'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.PGx.CYP2D6.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.PGx.CYP2D6.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [id: 'GRCh37'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/GRCh37_chr22.fasta.gz', checkIfExists: true)
                ]
                input[2] = ["CYP2D6"]
                input[3] = "GRCh37"
                """
            }
        }

        then {
            def vcfFile = path(process.out.vcf[0][1]).vcf
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.vcf[0][1]).name,
                    process.out.versions,
                    vcfFile.variantsMD5).match() },
                {assert vcfFile.chromosomes == ['22'] as Set},
                {assert vcfFile.sampleCount == 1}
            )
        }
    }


    test("stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [id: 'test'],
                    [],
                    []
                ]
                input[1] = [
                    [id: 'test_genome'],
                    []
                ]
                input[2] = []
                input[3] = ""
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
