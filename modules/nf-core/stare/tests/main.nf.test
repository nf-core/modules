nextflow_process {

    name "Test Process STARE"
    script "../main.nf"
    process "STARE"

    tag "modules"
    tag "modules_nfcore"
    tag "stare"

    test("testing stare") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'placeholder', checkIfExists: true),
                ]
                input[1] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'placeholder', checkIfExists: true),
                ]
                input[2] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'placeholder', checkIfExists: true),
                ]
                input[3] = [[], []]
                input[4] = [[], []]
                input[5] = [[], []]
                input[6] = [[], []]
                input[7] = [[], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("testing stare - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'placeholder', checkIfExists: true),
                ]
                input[1] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'placeholder', checkIfExists: true),
                ]
                input[2] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'placeholder', checkIfExists: true),
                ]
                input[3] = [[], []]
                input[4] = [[], []]
                input[5] = [[], []]
                input[6] = [[], []]
                input[7] = [[], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
