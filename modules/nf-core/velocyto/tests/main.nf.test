// nf-core modules test velocyto
nextflow_process {
    name 'Test Process VELOCYTO'
    tag "modules"
    tag "modules_nfcore"
    tag "velocyto"
    tag "samtools/sort"

    script '../main.nf'
    process 'VELOCYTO'

    
    
    test('mus_musculus - barcodes and bam with setup') {
        setup {
            run("SAMTOOLS_SORT") {
                script "../../samtools/sort/main.nf"
                config "modules/nf-core/velocyto/tests/test.config"
                
                process {                                        

                    """
                    input[0] = [
                        [ id:'Sample_X' ], // meta map
                        file(params.test_data['mus_musculus']['velocity']['bam'], checkIfExists: true)
                    ]
                    input[1] = [
                        [ id:'Sample_X' ], // meta map
                        file(params.test_data['mus_musculus']['genome']['genome_19_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                
                """
                input[0] = Channel
                    .fromList(
                        [
                            [ id:'Sample_X' ], // meta map
                            file(params.test_data['mus_musculus']['velocity']['barcodes'], checkIfExists: true),
                            file(params.test_data['mus_musculus']['velocity']['bam'], checkIfExists: true)
                        ]
                    )
                    .collect()
                    .join(SAMTOOLS_SORT.out.bam)                

                input[1] = file(params.test_data['mus_musculus']['velocity']['gtf'], checkIfExists: true)
                """
            }
        }
        then {
            assertAll(
            { assert process.success },
            {
                assert snapshot(
                    process.out.versions
                ).match()
            },
            // this is to check if velocyto is correctly skipping the samtools sort part
            {
                with(process.out.loom) {
                    with(get(0)) {
                        assert path(get(2)).readLines().any {
                            it.contains('cellsorted_possorted_genome_bam.bam already exists')
                        }
                    }
                }
            },
            { assert process.out.loom.get(0).get(1) ==~ ".*/Sample_X.loom" }
            )
        }
    }

    test('mus_musculus - barcodes and bam presorted') {
        when {
            process {
                """
                input[0] = [
                    [ id:'Sample_X' ], // meta map
                    file(params.test_data['mus_musculus']['velocity']['barcodes'], checkIfExists: true),
                    file(params.test_data['mus_musculus']['velocity']['bam'], checkIfExists: true),
                    file(params.test_data['mus_musculus']['velocity']['cellsorted_bam'], checkIfExists: true)
                ]

                input[1] = file(params.test_data['mus_musculus']['velocity']['gtf'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            {
                assert snapshot(
                    process.out.versions
                ).match()
            },
            // this is to check if velocyto is correctly skipping the samtools sort part
            {
                with(process.out.loom) {
                    with(get(0)) {
                        assert path(get(2)).readLines().any {
                            it.contains('cellsorted_possorted_genome_bam.bam already exists')
                        }
                    }
                }
            },
            { assert process.out.loom.get(0).get(1) ==~ ".*/Sample_X.loom" }
            )
        }
    }



    // mask location file(params.test_data['mus_musculus']['velocity']['mask'], checkIfExists: true)
    // test('mus_musculus - barcodes and bam and mask') {

    // }

    

    // test('mus_musculus - barcodes and bam - stub') {
    //     options '-stub'

    //     when {
    //         process {
    //             """
    //             input[0] = [
    //                 [ id:'Sample_X' ], // meta map
    //                 file(params.test_data['mus_musculus']['velocity']['barcodes'], checkIfExists: true),
    //                 file(params.test_data['mus_musculus']['velocity']['bam'], checkIfExists: true),
    //                 file(params.test_data['mus_musculus']['velocity']['cellsorted_bam'], checkIfExists: true)
    //             ]
    //             input[1] = file(params.test_data['mus_musculus']['velocity']['gtf'], checkIfExists: true)
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             {
    //                 assert snapshot(
    //                     process.out.versions,
    //                     process.out.loom
    //                 ).match()
    //             },
    //         )
    //     }
    // }
}
