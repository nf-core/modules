nextflow_process {

    name "Test Process DECOUPLER"
    script "../main.nf"
    process "DECOUPLER"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "decoupler"
    tag "decoupler/decoupler"

    test("differential abundance data - normalized counts - mouse") {

        when {
            params {
                module_args = "--min_n 2 --transpose TRUE --ensembl_ids TRUE --methods mlm"
            }
            process {
                """
                input[0] = [
                    ['id':'treatment_mCherry_hND6', 'method_differential':'deseq2'],
                    file("https://github.com/nf-core/test-datasets/raw/differentialabundance/modules_testdata/treatment_mCherry_hND6_.deseq2.results.tsv", checkIfExists: true)
                ]
                input[1] = [
                    file("https://github.com/nf-core/test-datasets/raw/differentialabundance/modules_testdata/progeny/mouse_network.tsv", checkIfExists: true)
                ]
                input[2] = [file("https://ftp.ensembl.org/pub/release-81/gtf/mus_musculus/Mus_musculus.GRCm38.81.gtf.gz", checkIfExists: true)]
                """
            }
        }

    then {
        def estimateFiles = process.out.dc_estimate[0][1].collect { path(it) }
        def pvalsFiles = process.out.dc_pvals[0][1].collect { path(it) }
        def pngFiles = process.out.png[0][1].collect { path(it) }

        assertAll(
            { assert process.success },
            { estimateFiles.each { f -> assert f.exists() } },
            { pvalsFiles.each { f -> assert f.exists() } },
            { pngFiles.each { f -> assert f.exists() } },
            { estimateFiles.each { f -> assert f.getText().contains("Androgen") } },
            { assert snapshot(
                    estimateFiles*.getFileName().toString(),
                    pvalsFiles*.getFileName().toString(),
                    pngFiles*.getFileName().toString(),
                    estimateFiles*.readLines().size(),
                    pvalsFiles*.readLines().size(),
                    process.out.versions
            ).match("file_structure") }
        )
    }
    }

    test("decoupler_test") {

        when {
            params {
                module_args = "--min_n 1"
            }

            process {
                """
                input[0] = [
                    [ id: 'test', 'method_differential':'deseq2'],
                    file(params.test_data['generic']['tsv']['expression'], checkIfExists: true)
                ]
                input[1] = [
                    file(params.test_data['generic']['tsv']['network'], checkIfExists: true)
                ]
                input[2] = [file("https://ftp.ensembl.org/pub/release-81/gtf/mus_musculus/Mus_musculus.GRCm38.81.gtf.gz", checkIfExists: true)]
                """
            }
        }

        then {
            def estimateFiles = process.out.dc_estimate[0][1].collect { path(it) }
            def pvalsFiles = process.out.dc_pvals[0][1].collect { path(it) }
            def pngFiles = process.out.png[0][1].collect { path(it) }

            assertAll(
                { assert process.success },
                //{ assert snapshot(process.out).match() },
                { estimateFiles.each { f -> assert f.exists() } },
                { pvalsFiles.each { f -> assert f.exists() } },
                { pngFiles.each { f -> assert f.exists() } }
            )
        }
    }

    test("decoupler stub") {
        options "-stub"

        when {
            params {
                module_args = "--min_n 1"
            }
            process {
                """
                input[0] = [
                    [ id: 'test' ],
                    file(params.test_data['generic']['tsv']['expression'], checkIfExists: true)
                ]
                input[1] = [
                    file(params.test_data['generic']['tsv']['network'], checkIfExists: true)
                ]
                input[2] = [file("https://ftp.ensembl.org/pub/release-81/gtf/mus_musculus/Mus_musculus.GRCm38.81.gtf.gz", checkIfExists: true)]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
