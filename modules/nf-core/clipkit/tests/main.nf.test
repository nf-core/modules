nextflow_process {

    name "Test Process CLIPKIT"
    script "../main.nf"
    process "CLIPKIT"

    tag "modules"
    tag "modules_nfcore"
    tag "clipkit"
    tag "gunzip"

    setup {
        run("GUNZIP") {
            script "../../gunzip/main.nf"
            process {
                """
                input[0] = [
                    [ id:'PF14720' ], // meta map
                    file(params.modules_testdata_base_path + 'delete_me/hmmer/PF14720_seed.alnfaa.gz', checkIfExists: true)
                ]
                """
            }
        }
    }

    test("PF14720 - aln") {

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.clipkit,
                    path(process.out.log.get(0).get(1)).readLines().contains("Number of sites kept: 79"),
                    process.out.versions
                    ).match()
                }
            )
        }

    }

    test("PF14720 - aln - gap threshold - ends only") {

        config "./nextflow.config"

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = "alnfaa"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.clipkit,
                    path(process.out.log.get(0).get(1)).readLines().contains("Number of sites kept: 86"),
                    process.out.versions
                    ).match()
                }
            )
        }

    }

    test("PF14720 - aln - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = ""
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
