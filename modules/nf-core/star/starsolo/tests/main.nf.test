nextflow_process {

    name "Test Process STAR_STARSOLO"
    script "../main.nf"
    process "STARSOLO"

    tag "modules"
    tag "modules_nfcore"
    tag "star"
    tag "star/starsolo"
    tag "star/genomegenerate"

    test("homo_sapiens - CB_UMI_Simple") {

        setup {
            run("STAR_GENOMEGENERATE") {
                script "../../../star/genomegenerate/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test_fasta' ],
                        [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                    ])
                    input[1] = Channel.of([
                        [ id:'test_gtf' ],
                        [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                    ])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', umi_len:'12' ],
                    'CB_UMI_Simple',
                    [
                        file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_5k_cmvpos_tcells_gex1_fastq_1_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_5k_cmvpos_tcells_gex1_fastq_2_gz'], checkIfExists: true)
                    ]
                ])
                input[1] = file('./NO_FILE')
                input[2] = STAR_GENOMEGENERATE.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.counts,
                    file(process.out.log_final[0][1]).name,
                    file(process.out.log_out[0][1]).name,
                    file(process.out.log_progress[0][1]).name,
                    process.out.summary,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - CB_UMI_Simple - stub") {

        options "-stub"

        setup {
            run("STAR_GENOMEGENERATE") {
                script "../../../star/genomegenerate/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test_fasta' ],
                        [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                    ])
                    input[1] = Channel.of([
                        [ id:'test_gtf' ],
                        [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                    ])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', umi_len:'12' ],
                    'CB_UMI_Simple',
                    [
                        file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_5k_cmvpos_tcells_gex1_fastq_1_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_5k_cmvpos_tcells_gex1_fastq_2_gz'], checkIfExists: true)
                    ]
                ])
                input[1] = file('./NO_FILE')
                input[2] = STAR_GENOMEGENERATE.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
