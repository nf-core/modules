// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test star/starsolo
nextflow_process {

    name "Test Process STAR_STARSOLO"
    script "../main.nf"
    process "STAR_STARSOLO"

    tag "modules"
    tag "modules_nfcore"
    tag "star"
    tag "star/starsolo"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("sarscov2 - bam") {

        // TODO nf-core: If you are created a test for a chained module
        // (the module requires running more than one process to generate the required output)
        // add the 'setup' method here.
        // You can find more information about how to use a 'setup' method in the docs (https://nf-co.re/docs/contributing/modules#steps-for-creating-nf-test-for-chained-modules).

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:

                input[0] = file(params.test_data['sarscov2']['illumina']['test_single_end_bam'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
                // See https://nf-co.re/docs/contributing/tutorials/nf-test_assertions for more information and examples.
            )
        }

    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:

                input[0] = file(params.test_data['sarscov2']['illumina']['test_single_end_bam'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }

    }

}

//PYTEST
         include { STARSOLO                          } from '../../../../../modules/nf-core/star/starsolo/main.nf'
         include { STAR_GENOMEGENERATE               } from '../../../../../modules/nf-core/star/genomegenerate/main.nf'

         workflow test_starsolo {

             input = [ [ id:'test_starsolo', umi_len:'12'  ],
                     'CB_UMI_Simple',
                     [ file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_5k_cmvpos_tcells_gex1_fastq_1_gz'],
         checkIfExists: true),
                     file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_5k_cmvpos_tcells_gex1_fastq_2_gz'],
         checkIfExists: true)
                 ]
             ]
             fasta = [
                 [ id:'test_fasta' ], // meta map
                 [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
             ]
             gtf = [
                 [ id:'test_gtf' ], // meta map
                 [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]
             ]

             STAR_GENOMEGENERATE ( fasta, gtf )
             STARSOLO ( input, STAR_GENOMEGENERATE.out.index )
         }  
