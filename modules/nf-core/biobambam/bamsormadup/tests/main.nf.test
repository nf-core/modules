
nextflow_process {

    name "Test Process BIOBAMBAM_BAMSORMADUP"
    script "../main.nf"
    process "BIOBAMBAM_BAMSORMADUP"

    tag "modules"
    tag "modules_nfcore"
    tag "biobambam"
    tag "biobambam/bamsormadup"

    test("test-biobambam-bamsormadup-multi-input") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                    ]
				]
				input[1] = [[:],[]]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					bam(process.out.bam[0][1]).getReadsMD5(),
					process.out.bam_index,
					process.out.cram,
					file(process.out.metrics[0][1]).readLines()[3..5],
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-biobambam-bamsormadup-single-input") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.bam', checkIfExists: true)
                    ]
				]
				input[1] = [[:],[]]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					bam(process.out.bam[0][1]).getReadsMD5(),
					process.out.bam_index,
					process.out.cram,
					file(process.out.metrics[0][1]).readLines()[3..5],
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-biobambam-bamsormadup-single-input-stub") {

        options '-stub'

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.bam', checkIfExists: true)
                    ]
				]
				input[1] = [[:],[]]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
