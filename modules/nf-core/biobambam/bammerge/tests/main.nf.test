
nextflow_process {

    name "Test Process BIOBAMBAM_BAMMERGE"
    script "../main.nf"
    process "BIOBAMBAM_BAMMERGE"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "biobambam"
    tag "biobambam/bammerge"

    test("test-biobambam-bammerge-paired") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    [
				        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
				        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true)
				    ]
                ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					bam(process.out.bam[0][1]).getReadsMD5(),
					file(process.out.bam_index[0][1]).name,
					process.out.checksum,
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-biobambam-bammerge-single") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    [
				        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true),
				    ]
                ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					bam(process.out.bam[0][1]).getReadsMD5(),
					file(process.out.bam_index[0][1]).name,
					process.out.checksum,
					process.out.versions
					).match()
				}
            )
        }
    }

}
