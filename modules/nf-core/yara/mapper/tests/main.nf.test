nextflow_process {

    name "Test Process YARA_MAPPER"
    script "../main.nf"
    process "YARA_MAPPER"

    tag "modules"
    tag "modules_nfcore"
    tag "yara"
    tag "yara/index"
    tag "yara/mapper"

    setup {
        run("YARA_INDEX") {
            script "../../index/main.nf"
                process {
                    """
                    input[0] = [[ id:'sarscov2' ],
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ]
                    """
                }
        }
    }

    test("sarscov2 - single_end") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = YARA_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1]).getHeaderMD5(),
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    file(process.out.bam[0][1]).name,
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("sarscov2 - single_end - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = YARA_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - paired_end") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                      file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                ]
                input[1] = YARA_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1][0]).getHeaderMD5(),
                    bam(process.out.bam[0][1][0]).getReadsMD5(),
                    bam(process.out.bam[0][1][1]).getHeaderMD5(),
                    bam(process.out.bam[0][1][1]).getReadsMD5(),
                    file(process.out.bam[0][1][0]).name,
                    file(process.out.bam[0][1][1]).name,
                    process.out.versions
                    ).match() }
            )
        }

    }


    test("sarscov2 - paired_end - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                      file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                ]
                input[1] = YARA_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
