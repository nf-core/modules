
nextflow_process {

    name "Test Process WGSIM"
    script "../main.nf"
    process "WGSIM"

    tag "modules"
    tag "modules_nfcore"
    tag "wgsim"

    test("sarscov2 - fasta") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                            ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.fastq[0][1].collect { file(it).name },
                    file(process.out.versions[0]).readLines(),
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 - fasta - seed") {

        config "./seed.config"

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                            ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.fastq[0][1].collect { file(it).name },
                    file(process.out.versions[0]).readLines(),
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 - fasta - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                            ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    file(process.out.versions[0]).readLines()
                    ).match()
                }
            )
        }
    }

}
