nextflow_process {

    name "Test Process MANTA_SOMATIC"
    script "../main.nf"
    process "MANTA_SOMATIC"

    tag "modules"
    tag "modules_nfcore"
    tag "manta"
    tag "manta/somatic"

    test("human - cram") {
        
        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_cram'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_cram_crai'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_cram'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_cram_crai'], checkIfExists: true),
                            [], []
                        ]
                input[1] = [ [id:'genome'],
                            file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                        ]
                input[2] = [ [id:'genome'],
                            file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                        ]
                input[3] = Channel.of("[manta]", "enableRemoteReadRetrievalForInsertionsInGermlineCallingModes = 0")
                            .collectFile(name:"manta_options.ini", newLine:true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match("version") },
            )
        }

    }

    test("human - cram - bed") {
        
        when {
            process {
                """
                input[0] = [ [ id:'bed_test', single_end:false ], // meta map
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_cram'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_cram_crai'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_cram'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_cram_crai'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed_gz'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed_gz_tbi'], checkIfExists: true),
                        ]
                input[1] = [ [id:'genome'],
                            file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                        ]
                input[2] = [ [id:'genome'],
                            file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                        ]
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match("bed_version") },
            )
        }

    }

    test("human - cram - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_cram'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_cram_crai'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_cram'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_cram_crai'], checkIfExists: true),
                            [], []
                        ]
                input[1] = [ [id:'genome'],
                            file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                        ]
                input[2] = [ [id:'genome'],
                            file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                        ]
                input[3] = Channel.of("[manta]", "enableRemoteReadRetrievalForInsertionsInGermlineCallingModes = 0")
                            .collectFile(name:"manta_options.ini", newLine:true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
