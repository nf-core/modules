nextflow_process {

    name "Test Process SIMPLEAF_QUANT"
    script "../main.nf"
    process "SIMPLEAF_QUANT"

    tag "modules"
    tag "modules_nfcore"
    tag "simpleaf"
    tag "simpleaf/quant"
    tag "simpleaf/index"


    //Requires SIMPLEAF_INDEX to run prior to quant
    setup {
        run("SIMPLEAF_INDEX") {
            script "../../index/main.nf"
            process {
                """
                genome_fasta = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                gtf = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                meta = [ 'id': 'human']

                input[0] = Channel.of([meta, genome_fasta, gtf])
                input[1] = Channel.of([[],[]])
                """
            }
        }
    }

    test("test_simpleaf_quant") {
        when {
            // config "./nextflow.config"
            process {
                """
                meta = [id:'test_10x', single_end:false, strandedness:'auto']
                files = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/gex_1/subsampled_5k_human_antiCMV_T_TBNK_connect_GEX_1_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/gex_1/subsampled_5k_human_antiCMV_T_TBNK_connect_GEX_1_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                input[0] = Channel.of([meta, '10xv3', files])
                input[1] = SIMPLEAF_INDEX.out.index.combine(SIMPLEAF_INDEX.out.t2g, by: 0)
                input[2] = [[],"knee",[],[]]
                input[3] = Channel.of('cr-like')
                input[4] = Channel.of([[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert file("${process.out.map.get(0).get(1)}/map.rad").exists() },
                { assert file("${process.out.map.get(0).get(1)}/map_info.json").exists() },
                { assert file("${process.out.map.get(0).get(1)}/unmapped_bc_count.bin").exists() },
                { assert file("${process.out.quant.get(0).get(1)}/permit_map.bin").exists() },
                { assert file("${process.out.quant.get(0).get(1)}/collate.json").exists() },
                { assert file("${process.out.quant.get(0).get(1)}/generate_permit_list.json").exists() },
                { assert file("${process.out.quant.get(0).get(1)}/quant.json").exists() },
                { assert file("${process.out.quant.get(0).get(1)}/featureDump.txt").exists() },
                { assert file("${process.out.quant.get(0).get(1)}/permit_freq.bin").exists() },
                { assert file("${process.out.quant.get(0).get(1)}/unmapped_bc_count_collated.bin").exists() },
                { assert file("${process.out.quant.get(0).get(1)}/alevin/quants_mat.mtx").exists() },
                { assert file("${process.out.quant.get(0).get(1)}/alevin/quants_mat_cols.txt").exists() },
                { assert file("${process.out.quant.get(0).get(1)}/alevin/quants_mat_rows.txt").exists() },
                // { assert snapshot(
                //     process.out.versions,
                //     path("${process.out.map.get(0).get(1)}/map.rad"),
                //     path("${process.out.map.get(0).get(1)}/unmapped_bc_count.bin"),
                //     path("${process.out.quant.get(0).get(1)}/map.collated.rad"),
                //     path("${process.out.quant.get(0).get(1)}/featureDump.txt"))
                //     .match() }
            )
        }

    }

    test("test_simpleaf_quant stub") {
        options "-stub-run"
            // config "./nextflow.config"

        when {
            process {
                """
                meta = [id:'test_10x', single_end:false, strandedness:'auto']
                files = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/gex_1/subsampled_5k_human_antiCMV_T_TBNK_connect_GEX_1_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/gex_1/subsampled_5k_human_antiCMV_T_TBNK_connect_GEX_1_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                input[0] = Channel.of([meta, '10xv3', files])
                input[1] = SIMPLEAF_INDEX.out.index.combine(SIMPLEAF_INDEX.out.t2g, by: 0)
                input[2] = [[],"knee",[],[]]
                input[3] = Channel.of('cr-like')
                input[4] = Channel.of([[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}

