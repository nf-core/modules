nextflow_process {

    name "Test Process SIMPLEAF_QUANT"
    script "../main.nf"
    process "SIMPLEAF_QUANT"

    tag "modules"
    tag "modules_nfcore"
    tag "simpleaf"
    tag "simpleaf/quant"
    tag "simpleaf/index"

    test("test_simpleaf_quant") {
        //Requires SIMPLEAF_INDEX to run prior to quant
        setup {

            run("SIMPLEAF_INDEX") {
                script "../../index/main.nf"
                process {
                    """
                    transcriptome_fasta = file(params.test_data['homo_sapiens']['genome']['transcriptome_fasta'], checkIfExists: true)
                    meta = [ 'id': 'human_transcriptome']

                    input[0] = Channel.of([[],[]])
                    input[1] = Channel.of([[],[]])
                    input[2] = Channel.of([ meta, transcriptome_fasta ])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel.of([ id:'test_10x', single_end:false, strandedness:'auto'  ],
                '10xv3',
                [
                file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_5k_cmvpos_tcells_gex1_fastq_1_gz'], checkIfExists: true),
                file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_5k_cmvpos_tcells_gex1_fastq_2_gz'], checkIfExists: true)
                ])
                input[1] = SIMPLEAF_INDEX.out.index
                input[2] = SIMPLEAF_INDEX.out.transcript_tsv
                input[3] = Channel.of([[],[]])
                input[4] = Channel.of([[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path("${process.out.results[0][1]}/genome_results.txt"),
                    process.out.versions)
                    .match() }
            )
        }

    }

}


