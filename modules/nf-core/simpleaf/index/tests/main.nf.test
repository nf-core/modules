nextflow_process {

    name "Test Process SIMPLEAF_INDEX"
    script "../main.nf"
    process "SIMPLEAF_INDEX"

    tag "modules"
    tag "modules_nfcore"
    tag "simpleaf"
    tag "simpleaf/index"

    // test piscem
    test("Homo sapiens - genome index - expanded - fasta + gtf") {

        when {
            process {
                """
                genome_fasta = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                gtf = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                meta = [ 'id': 'human_genome']

                input[0] = Channel.of([ meta, genome_fasta, gtf ])
                input[1] = Channel.of([[],[]])
                input[2] = Channel.of([[],[]])
                input[3] = Channel.of([[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx_cfish.json").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.ctab").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.ectab").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.json").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.refinfo").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.sshash").exists() },
                { assert file("${process.out.index.get(0).get(1)}/simpleaf_index.json").exists() },
                { assert file("${process.out.ref.get(0).get(1)}/roers_ref.fa").exists() },
                { assert file("${process.out.ref.get(0).get(1)}/t2g_3col.tsv").exists() },
                { assert file("${process.out.ref.get(0).get(1)}/gene_id_to_name.tsv").exists() },
                { assert file("${process.out.ref.get(0).get(1)}/roers_make-ref.json").exists() },
                { assert file("${process.out.t2g.get(0).get(1)}").exists() },
            )
        }

    }

    test("Homo sapiens - transcriptome index - direct - transcriptome fasta") {

        when {
            process {
                """
                transcriptome_fasta = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/transcriptome.fasta', checkIfExists: true)
                meta = [ 'id': 'human_transcriptome']

                input[0] = Channel.of([[],[],[]])
                input[1] = Channel.of([ meta, transcriptome_fasta ])
                input[2] = Channel.of([[],[]])
                input[3] = Channel.of([[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx_cfish.json").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.ctab").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.ectab").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.json").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.refinfo").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.sshash").exists() },
                { assert file("${process.out.index.get(0).get(1)}/simpleaf_index.json").exists() }
                // { assert snapshot(
                //     path("${process.out.index.get(0).get(1)}/piscem_idx.ctab"),
                //     path("${process.out.index.get(0).get(1)}/piscem_idx.json"),
                //     path("${process.out.index.get(0).get(1)}/piscem_idx_cfish.json"),
                //     process.out.versions)
                //     .match() }
            )
        }
    }

    test("Homo sapiens - probe index - direct - probe csv") {
        when {
            process {
                """
                probe_csv = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/spaceranger/human-brain-cancer-11-mm-capture-area-ffpe-2-standard_v2_ffpe_cytassist/CytAssist_11mm_FFPE_Human_Glioblastoma_probe_set.csv', checkIfExists: true)
                meta = [ 'id': 'CytAssist_11mm_FFPE_Human_Glioblastoma_probe_set']

                input[0] = Channel.of([[],[],[]])
                input[1] = Channel.of([[],[]])
                input[2] = Channel.of([ meta, probe_csv ])
                input[3] = Channel.of([[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx_cfish.json").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.ctab").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.ectab").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.json").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.refinfo").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.sshash").exists() },
                { assert file("${process.out.index.get(0).get(1)}/simpleaf_index.json").exists() }
                // { assert snapshot(
                //     path("${process.out.index.get(0).get(1)}/piscem_idx.ctab"),
                //     path("${process.out.index.get(0).get(1)}/piscem_idx.json"),
                //     path("${process.out.index.get(0).get(1)}/piscem_idx_cfish.json"),
                //     process.out.versions)
                //     .match() }
            )
        }
    }

    test("Homo sapiens - feature index - direct - feature csv") {
        when {
            process {
                """
                feature_csv = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/sc5p_v2_hs_PBMC_10k_multi_5gex_5fb_b_t_feature_ref.csv', checkIfExists: true)
                meta = [ 'id': 'sc5p_v2_hs_PBMC_10k_multi_5gex_5fb_b_t_feature_ref']

                input[0] = Channel.of([[],[],[]])
                input[1] = Channel.of([[],[]])
                input[2] = Channel.of([[],[]])
                input[3] = Channel.of([ meta, feature_csv ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx_cfish.json").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.ctab").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.ectab").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.json").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.refinfo").exists() },
                { assert file("${process.out.index.get(0).get(1)}/piscem_idx.sshash").exists() },
                { assert file("${process.out.index.get(0).get(1)}/simpleaf_index.json").exists() }
                // { assert snapshot(
                //     path("${process.out.index.get(0).get(1)}/piscem_idx.ctab"),
                //     path("${process.out.index.get(0).get(1)}/piscem_idx.json"),
                //     path("${process.out.index.get(0).get(1)}/piscem_idx_cfish.json"),
                //     process.out.versions)
                //     .match() }
            )
        }
    }

    test("Homo sapiens - transcriptome index - direct - transcriptome fasta - stub") {
        options "-stub-run"
        when {
            process {
                """
                transcriptome_fasta = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/transcriptome.fasta', checkIfExists: true)
                meta = [ 'id': 'human_transcriptome']

                input[0] = Channel.of([[],[],[]])
                input[1] = Channel.of([ [], [] ])
                input[2] = Channel.of([ [], [] ])
                input[3] = Channel.of([ [], [] ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}