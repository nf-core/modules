
nextflow_process {

    name "Test Process VG_INDEX"
    script "../main.nf"
    process "VG_INDEX"

    tag "modules"
    tag "modules_nfcore"
    tag "vg"
    tag "vg/index"
    tag "vg/construct"

    setup {
        run("VG_CONSTRUCT") {
            script "../../../vg/construct/main.nf"
            process {
                """
                input[0] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true),
				    []
				]
				input[1] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
				]
				input[2] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
				]

                """
            }
        }
    }

    test("test-vg-index") {

        when {
            process {
                """
                input[0] = VG_CONSTRUCT.out.graph

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test-vg-index-stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = VG_CONSTRUCT.out.graph

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
