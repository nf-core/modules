
nextflow_process {

    name "Test Process VG_CONSTRUCT"
    script "../main.nf"
    process "VG_CONSTRUCT"

    tag "modules"
    tag "modules_nfcore"
    tag "vg"
    tag "vg/construct"

    test("test-vg-construct-vcf") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true),
				    []
				]
				input[1] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
				]
				input[2] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test-vg-construct-msa") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'pangenomics/homo_sapiens/pangenome.fa', checkIfExists: true),
				    [],
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
				]
				input[1] = [[],[]]
				input[2] = [[],[]]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test-vg-construct-insertions-fasta-vcf") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'pangenomics/homo_sapiens/pangenome.fa', checkIfExists: true)
				]
				input[1] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
				]
				input[2] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test-vg-construct-insertions-fasta-vcf-stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'pangenomics/homo_sapiens/pangenome.fa', checkIfExists: true)
				]
				input[1] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
				]
				input[2] = [
				    [ id:'test'], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
