// nf-core modules test gmmdemux
nextflow_process {

    name "Test Process GMMDEMUX"
    script "../main.nf"
    process "GMMDEMUX"

    tag "modules"
    tag "modules_nfcore"
    tag "gmmdemux"
    tag "untar"

    
    test("Standard_Multiome - 10x mtx - simple") {
        setup {
            run("UNTAR") {
                script "modules/nf-core/untar/main.nf"
                process {
                """
                input[0] = Channel.of([ [],file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/hto.tar.gz", checkIfExists: true)   ]) 
                """
                }
            }   
        }
        when {
            process {
                """
                input[0] = UNTAR.out.untar.map { meta, files -> [ [ id:'test', single_end:true ], files, "MS-11,MS-12" ] }
                input[1] = false
                input[2] = false
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.matrix.get(0).get(1)).exists() },
                { assert path(process.out.barcodes.get(0).get(1)).exists() },
                { assert path(process.out.features.get(0).get(1)).exists() },
                { assert path(process.out.config_report.get(0).get(1)).exists() },

            )
        }
    }

    test("Standard_Multiome - 10x mtx") {
        config "./nextflow.config"
        setup {
            run("UNTAR") {
                script "modules/nf-core/untar/main.nf"
                process {
                """
                input[0] = Channel.of([ [],file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/hto.tar.gz", checkIfExists: true)   ]) 
                """
                }
            }   
        }
        when {
            process {
                """
                input[0] = UNTAR.out.untar.map { meta, files -> [ [ id:'test', single_end:true ], files, "MS-11,MS-12" ] }
                input[1] = true
                input[2] = true
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.matrix.get(0).get(1)).exists() },
                { assert path(process.out.barcodes.get(0).get(1)).exists() },
                { assert path(process.out.features.get(0).get(1)).exists() },
                { assert path(process.out.config_report.get(0).get(1)).exists() },

            )
        }
    }

    test("Standard_Multiome - 10x mtx - stub") {
        config "./nextflow.config"
        options "-stub"

        when {
            process {
                """
                
                input[0] = [
                    [ id:'test'], 
                    file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/hto.tar.gz", checkIfExists: true),
                    "MS-11,MS-12"
                    ]
                input[1] = true
                input[2] = true
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.matrix.get(0).get(1)).exists() },
                { assert path(process.out.barcodes.get(0).get(1)).exists() },
                { assert path(process.out.features.get(0).get(1)).exists() },
                { assert path(process.out.config_report.get(0).get(1)).exists() },
            )
        }

    }

}
