// nf-core modules test learnmsa/align
nextflow_process {

    name "Test Process LEARNMSA_ALIGN"
    script "../main.nf"
    process "LEARNMSA_ALIGN"

    tag "modules"
    tag "modules_nfcore"
    tag "learnmsa"
    tag "learnmsa/align"

    test("seatoxin - uncompressed") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ],
                             file(params.modules_testdata_base_path + "../../multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                           ]
                input[1] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.alignment.get(0).get(1)).getText().contains(">sample1") },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("seatoxin - compressed") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ],
                             file(params.modules_testdata_base_path + "../../multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                           ]
                input[1] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.alignment.get(0).get(1)).getTextGzip().contains(">sample1") },
                { assert snapshot(process.out.versions).match("versions1") }
            )
        }

    }

    test("seatoxin - uncompressed - stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id:'test' ],
                             file(params.modules_testdata_base_path + "../../multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                           ]
                input[1] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.alignment.get(0).get(1)).getText().contains(">sample1") },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

}