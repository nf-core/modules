nextflow_process {

    name "Test Process GRAPHTYPER_GENOTYPE"
    script "../main.nf"
    process "GRAPHTYPER_GENOTYPE"

    tag "modules"
    tag "modules_nfcore"
    tag "graphtyper"
    tag "graphtyper/genotype"

    test("single - region_file") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true) ]
                ]
                input[1] = [ [ id: 'ref' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)]
                input[2] = [ [ id: 'ref_index' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)]
                input[3] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/graphtyper/regions.txt', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("multiple - region_args") {
        config './nextflow.config'
        when {
            process {
                """
                input[0] = [
                    [ id: 'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.single_end.sorted.bam", checkIfExists: true) ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.single_end.sorted.bam.bai", checkIfExists: true) ]
                ]
                input[1] = [ [ id: 'ref' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)]
                input[2] = [ [ id: 'ref_index' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)]
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("single - region_file - stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true) ]
                ]
                input[1] = [ [ id: 'ref' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)]
                input[2] = [ [ id: 'ref_index' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)]
                input[3] = file(params.test_data['sarscov2']['genome']['regions_txt'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
