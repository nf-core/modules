nextflow_process {

    name "Test Process HASHEDDROPS"
    script "../main.nf"
    process "HASHEDDROPS"

    tag "modules"
    tag "modules_nfcore"
    tag "hasheddrops"
    tag "untar"

    test("hto_matrix - runEmptyDrops:false - rna_matrix") {

        setup {
            run("UNTAR") {
                script "modules/nf-core/untar/main.nf"
                process {
                    """
                    input[0] = Channel.of(
                        [ [id: 'hto'], file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/hto.tar.gz") ],
                        [ [id: 'rna'], file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/rna.tar.gz") ]
                    )
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = UNTAR.out.untar.filter{ meta, _f -> meta.id == 'hto' }
                                        .combine(UNTAR.out.untar.filter{ meta, _f -> meta.id == 'rna' })
                                        .map{ _meta_hto, hto, _meta_rna, rna -> [[id: 'test'], hto, "FALSE", rna] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
/*
    test("hto_matrix - runEmptyDrops:true - rna_matrix") {

        setup {
            run("UNTAR") {
                script "modules/nf-core/untar/main.nf"
                process {
                    """
                    input[0] = Channel.of(
                        [ [id: 'hto'], file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/hto.tar.gz") ],
                        [ [id: 'rna'], file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/rna.tar.gz") ]
                    )
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = UNTAR.out.untar.filter{ meta, _f -> meta.id == 'hto' }
                                        .combine(UNTAR.out.untar.filter{ meta, _f -> meta.id == 'rna' })
                                        .map{ _meta_hto, hto, _meta_rna, rna -> [[id: 'test'], hto, "TRUE", rna] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
*/
    test("hto_matrix - runEmptyDrops:true - rna_matrix - stub") {

        options "-stub"

        setup {
            run("UNTAR") {
                script "modules/nf-core/untar/main.nf"
                process {
                    """
                    input[0] = Channel.of(
                        [ [id: 'hto'], file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/hto.tar.gz") ],
                        [ [id: 'rna'], file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/rna.tar.gz") ]
                    )
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = UNTAR.out.untar.filter{ meta, _f -> meta.id == 'hto' }
                                        .combine(UNTAR.out.untar.filter{ meta, _f -> meta.id == 'rna' })
                                        .map{ _meta_hto, hto, _meta_rna, rna -> [[id: 'test'], hto, "TRUE", rna] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}

