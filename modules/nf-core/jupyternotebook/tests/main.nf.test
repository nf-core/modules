nextflow_process {

    name "Test Process JUPYTERNOTEBOOK"
    config "./nextflow.config"
    script "../main.nf"
    process "JUPYTERNOTEBOOK"

    tag "modules"
    tag "modules_nfcore"
    tag "jupyternotebook"

    test("generic - md") {

        when {
            params {
                module_args = ['parametrize':false]
            }
            process {
                """
                input[0] = [[id:'test_jupyter'],
                    file(params.modules_testdata_base_path + 'generic/notebooks/jupyter/ipython_notebook.md', checkIfExists:true)]
                input[1] = [:]
                input[2] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.report[0][1]).name,
                    path(process.out.report[0][1]).readLines().contains("n_iter = 12"),
                    process.out.versions
                    ).match() }
            )
        }
    }

    test("generic - md - parametrize") {

        when {
            params {
                module_args = ['parametrize':true]
            }
            process {
                """
                input[0] = [[id:'test_jupyter'],
                    file(params.modules_testdata_base_path + 'generic/notebooks/jupyter/ipython_notebook.md', checkIfExists:true)]
                input[1] = [input_filename:"hello.txt", n_iter:12]
                input[2] = file(params.modules_testdata_base_path + 'generic/txt/hello.txt', checkIfExists:true)
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.report[0][1]).name,
                    path(process.out.report[0][1]).readLines().contains("n_iter = 12"),
                    process.out.artifacts,
                    process.out.versions
                    ).match() }
            )
        }
    }

    test("generic - ipynb - parametrize") {


        when {
            params {
                module_args = ['parametrize':true]
            }
            process {
                """
                input[0] = [[id:'test_jupyter'],
                    file(params.modules_testdata_base_path + 'generic/notebooks/jupyter/ipython_notebook.ipynb', checkIfExists:true)]
                input[1] = [input_filename:"hello.txt", n_iter:12]
                input[2] = file(params.modules_testdata_base_path + 'generic/txt/hello.txt', checkIfExists:true)
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.report[0][1]).name,
                    path(process.out.report[0][1]).readLines().contains("n_iter = 12"),
                    process.out.artifacts,
                    process.out.versions
                    ).match() }
            )
        }
    }

    test("generic - md - stub") {

        options "-stub"

        when {
            params {
                module_args = ['parametrize':false]
            }
            process {
                """
                input[0] = [[id:'test_jupyter'],
                    file(params.modules_testdata_base_path + 'generic/notebooks/jupyter/ipython_notebook.md', checkIfExists:true)]
                input[1] = [:]
                input[2] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}