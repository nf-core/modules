nextflow_process {

    name "Test Process VAMB_BIN"
    script "../main.nf"
    process "VAMB_BIN"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "bowtie2/align"
    tag "bowtie2/build"
    tag "coverm/contig"
    tag "gawk"
    tag "vamb"
    tag "vamb/bin"
    tag "subworkflows/mmseqs_contig_taxonomy"

    test("mag contigs - tsv") {

        setup {
            run("BOWTIE2_BUILD") {
                script "../../../bowtie2/build/main.nf"
                process {
                    """
                    input[0] = [
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]
                    """
                }
            }

            run("BOWTIE2_ALIGN") {
                script "../../../bowtie2/align/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [id: "test"],
                        [
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/test_data/test_minigut_R1.fastq.gz", checkIfExists: true),
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/test_data/test_minigut_R2.fastq.gz", checkIfExists: true)
                        ]
                    ])
                    input[1] = BOWTIE2_BUILD.out.index
                    input[2] = [
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]
                    input[3] = false
                    input[4] = true
                    """
                }
            }

            run("COVERM_CONTIG") {
                script "../../../coverm/contig/main.nf"
                process {
                    """
                    input[0] = BOWTIE2_ALIGN.out.bam
                    input[1] = [[], []]
                    input[2] = true
                    input[3] = []
                    """
                }
            }

            run("GAWK") {
                script "../../../gawk/main.nf"
                process {
                    """
                    input[0] = COVERM_CONTIG.out.coverage
                    input[1] = []
                    input[2] = false
                    """
                }
            }
        }

        when {

            params {
                gawk_prefix = "test"
                gawk_args2 = "'BEGIN { OFS = \"\\t\" } NR == 1 {print \"contigname\", \"test\"} NR > 1 {print \$0}'"
                mmseqs_taxonomy_args = ""
                // Recommended parameters for testing in default mode
                vamb_args = "-e 5 -q 2 3 --minfasta 1 -o '' --seed 1"
            }

            process {
                """
                input[0] = Channel.of([
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]).combine(GAWK.out.output)
                    .map { ref_meta, asm, reads_meta, tsv -> [reads_meta, asm, tsv, [], []] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                // Entirely stochastic outputs...
                { path(process.out.clusters_metadata.get(0).get(1)).exists()                 },
                { path(process.out.clusters_unsplit.get(0).get(1)).exists()                  },
                { path(process.out.latent_encoding.get(0).get(1)).exists()                   },
                { path(process.out.composition.get(0).get(1)).exists()                       },
                { path(process.out.log.get(0).get(1)).readLines().contains("Completed Vamb") },
                { assert snapshot(
                    process.out.abundance,
                    process.out.versions
                ).match() }
            )
        }

    }


    test("mag contigs - bam") {

        setup {
            run("BOWTIE2_BUILD") {
                script "../../../bowtie2/build/main.nf"
                process {
                    """
                    input[0] = [
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]
                    """
                }
            }

            run("BOWTIE2_ALIGN") {
                script "../../../bowtie2/align/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [id: "test"],
                        [
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/test_data/test_minigut_R1.fastq.gz", checkIfExists: true),
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/test_data/test_minigut_R2.fastq.gz", checkIfExists: true)
                        ]
                    ])
                    input[1] = BOWTIE2_BUILD.out.index
                    input[2] = [
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]
                    input[3] = false
                    input[4] = true
                    """
                }
            }

        }

        when {

            params {
                // Recommended parameters for testing in default mode
                gawk_args2 = ""
                gawk_prefix = "test"
                mmseqs_taxonomy_args = ""
                vamb_args = "-e 5 -q 2 3 --minfasta 1 -o '' --seed 1"
            }

            process {
                """
                input[0] = Channel.of([
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]).combine(BOWTIE2_ALIGN.out.bam)
                    .map { ref_meta, asm, reads_meta, bam -> [reads_meta, asm, [], bam, []] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                // Entirely stochastic outputs...
                { path(process.out.clusters_metadata.get(0).get(1)).exists()                 },
                { path(process.out.clusters_unsplit.get(0).get(1)).exists()                  },
                { path(process.out.latent_encoding.get(0).get(1)).exists()                   },
                { path(process.out.composition.get(0).get(1)).exists()                       },
                { path(process.out.log.get(0).get(1)).readLines().contains("Completed Vamb") },
                { assert snapshot(
                    process.out.abundance,
                    process.out.versions
                ).match() }
            )
        }

    }


    test("mag contigs - bam - taxonomy") {

        setup {
            run("BOWTIE2_BUILD") {
                script "../../../bowtie2/build/main.nf"
                process {
                    """
                    input[0] = [
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]
                    """
                }
            }

            run("BOWTIE2_ALIGN") {
                script "../../../bowtie2/align/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [id: "test"],
                        [
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/test_data/test_minigut_R1.fastq.gz", checkIfExists: true),
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/test_data/test_minigut_R2.fastq.gz", checkIfExists: true)
                        ]
                    ])
                    input[1] = BOWTIE2_BUILD.out.index
                    input[2] = [
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]
                    input[3] = false
                    input[4] = true
                    """
                }
            }

            run("MMSEQS_CONTIG_TAXONOMY") {
                script "../../../../../subworkflows/nf-core/mmseqs_contig_taxonomy/main.nf"
                process {
                    """
                    input[0] = [
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]
                    input[1] = []
                    input[2] = "UniProtKB/Swiss-Prot"
                    """
                }
            }

            run("GAWK") {
                script "../../../gawk/main.nf"
                process {
                    """
                    input[0] = MMSEQS_CONTIG_TAXONOMY.out.taxonomy
                    input[1] = []
                    input[2] = false
                    """
                }
            }

        }

        when {
            params {
                mmseqs_taxonomy_args = "--tax-lineage 1"
                gawk_args2 = "'BEGIN { FS = OFS = \"\\t\"; print \"contigs\", \"predictions\"} {print \$1, \$9}'"
                gawk_prefix = "test_taxonomy"
                // Recommended parameters for testing in taxonomy mode
                vamb_args = "-e 5 -q 2 3 -pe 5 --minfasta 1 -o '' --seed 1"
            }
            process {
                """
                input[0] = Channel.of([
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]).combine(BOWTIE2_ALIGN.out.bam)
                    .combine(GAWK.out.output)
                    .map { ref_meta, asm, reads_meta, bam, tax_meta, taxonomy -> [reads_meta, asm, [], bam, taxonomy] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                // Entirely stochastic outputs...
                { path(process.out.taxometer_results.get(0).get(1)).exists()                 },
                { path(process.out.clusters_metadata.get(0).get(1)).exists()                 },
                { path(process.out.clusters_unsplit.get(0).get(1)).exists()                  },
                { path(process.out.composition.get(0).get(1)).exists()                       },
                { path(process.out.log.get(0).get(1)).readLines().contains("Completed Vamb") },
                { assert snapshot(
                    process.out.abundance,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("mag contigs - bam - stub") {

        options "-stub"

        setup {
            run("BOWTIE2_BUILD") {
                script "../../../bowtie2/build/main.nf"
                process {
                    """
                    input[0] = [
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]
                    """
                }
            }

            run("BOWTIE2_ALIGN") {
                script "../../../bowtie2/align/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [id: "test"],
                        [
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/test_data/test_minigut_R1.fastq.gz", checkIfExists: true),
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/test_data/test_minigut_R2.fastq.gz", checkIfExists: true)
                        ]
                    ])
                    input[1] = BOWTIE2_BUILD.out.index
                    input[2] = [
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]
                    input[3] = false
                    input[4] = true
                    """
                }
            }

        }

        when {

            params {
                gawk_prefix = "test"
                gawk_args2 = ""
                mmseqs_taxonomy_args = ""
                vamb_args = ""
            }

            process {
                """
                input[0] = Channel.of([
                        [id: "ref"],
                        file(
                            "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/mag/assemblies/SPAdes-test_minigut_contigs.fasta.gz",
                            checkIfExists: true
                        )
                    ]).combine(BOWTIE2_ALIGN.out.bam)
                    .map { ref_meta, asm, reads_meta, bam -> [reads_meta, asm, [], bam, []] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
