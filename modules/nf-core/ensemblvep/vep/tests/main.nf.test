nextflow_process {

    name "Test Process ENSEMBLVEP_VEP"
    script "modules/nf-core/ensemblvep/vep/main.nf"
    process "ENSEMBLVEP_VEP"
    config "./nextflow.config"
    tag "modules"
    tag "modules_nfcore"
    tag "ensemblvep"
    tag "ensemblvep/vep"
    tag "ensemblvep/download"


    test("test_ensemblvep_vep_fasta_vcf") {

        config "./vcf.config"

        setup {
            run("ENSEMBLVEP_DOWNLOAD") {
                script "../../download/main.nf"
                process {
                    """
                    input[0] = Channel.of([[id:"${params.vep_cache_version}_${params.vep_genome}"], params.vep_genome, params.vep_species, params.vep_cache_version])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_vcf'], checkIfExists: true),
                    []
                ])
                input[1] = params.vep_genome
                input[2] = params.vep_species
                input[3] = params.vep_cache_version
                input[4] = ENSEMBLVEP_DOWNLOAD.out.cache.map{ meta, cache -> [cache] }
                input[5] = Channel.value([
                    [id:"fasta"],
                    file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                ])
                input[6] = []
                """
            }
        }

        then {
            assertAll(
            {assert process.success},
            {assert path(process.out.vcf.get(0).get(1)).linesGzip.contains("##fileformat=VCFv4.2")}
            )
        }

    }

    test("test_ensemblvep_vep_fasta_tab_gz") {

        config "./tab.gz.config"

        setup {
            run("ENSEMBLVEP_DOWNLOAD") {
                script "../../download/main.nf"
                process {
                    """
                    input[0] = Channel.of([[id:"${params.vep_cache_version}_${params.vep_genome}"], params.vep_genome, params.vep_species, params.vep_cache_version])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_vcf'], checkIfExists: true),
                    []
                ])
                input[1] = params.vep_genome
                input[2] = params.vep_species
                input[3] = params.vep_cache_version
                input[4] = ENSEMBLVEP_DOWNLOAD.out.cache.map{ meta, cache -> [cache] }
                input[5] = Channel.value([
                    [id:"fasta"],
                    file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                ])
                input[6] = []
                """
            }
        }

        then {
            assertAll(
            {assert process.success},
            {assert path(process.out.tab.get(0).get(1)).linesGzip.contains("## ENSEMBL VARIANT EFFECT PREDICTOR v110.0")}
            )
        }
    }
}
