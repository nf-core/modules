nextflow_process {

    name "Test Process GGET_GGET"
    config "./nextflow.config"
    script "../main.nf"
    process "GGET_GGET"

    tag "modules"
    tag "modules_nfcore"
    tag "gget"
    tag "gget/gget"

    test("test_gget_ref") {


        when {
            params {
                module_args = 'ref -w dna -r 108 mouse'
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    []
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("test_gget_ref_download") {


        when {
            params {
                module_args = 'ref -d -w pep -r 108 ciona_intestinalis'
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    []
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.output).match() }
            )
        }
    }
    test("test_gget_search") {


        when {
            params {
                module_args = 'search -s human gaba gamma-aminobutyric'
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    []
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
            )
        }
    }
    test("test_gget_search_csv") {


        when {
            params {
                module_args = 'search --csv -s human gaba gamma-aminobutyric'
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    []
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
            )
        }
    }
    test("test_gget_info") {


        when {
            params {
                module_args = 'info ENSG00000034713 ENSG00000104853 ENSG00000170296'
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    []
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
            )
        }
    }
    test("test_gget_seq") {


        when {
            params {
                module_args = 'seq -t -iso ENSG00000034713'
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    []
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.output).match() }
            )
        }
    }
    test("test_gget_blat") {


        when {
            params {
                module_args = 'blat -a taeGut2 MKWMFKEDHSLEHRCVESAKIRAKYPDRVPVIVEKVSGSQIVDIDKRKYLVPSDITVAQFMWIIRKRIQLPSEKAIFLFVDKTVPQSR'
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    []
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.output).match() }
            )
        }
    }
    test("test_gget_muscle") {


        when {
            params {
                module_args = 'muscle'
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/proteome.fasta',checkIfExists:true)
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.output).match() }
            )
        }
    }
    test("test_gget_enrichr") {


        when {
            params {
                module_args = 'enrichr -db ontology ACE2 AGT AGTR1'
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    []
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.output).match() }
            )
        }
    }
    test("test_gget_archs4") {


        when {
            params {
                module_args = 'archs4 ACE2'
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    []
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.output).match() }
            )
        }
    }
    test("test_gget_pdb") {


        when {
            params {
                module_args = 'pdb 7S7U'
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    []
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.output).match() }
            )
        }
    }
}