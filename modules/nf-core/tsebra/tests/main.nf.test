nextflow_process {

    name "Test Process TSEBRA"
    script "../main.nf"
    process "TSEBRA"

    tag "modules"
    tag "modules_nfcore"
    tag "tsebra"
    tag "gunzip"

    test("actinidia_chinensis-genome") {

        setup {
            run('GUNZIP', alias: 'GUNZIP_GTF') {
                script "../../../nf-core/gunzip"

                process {
                    """
                    input[0] = [
                        [ id:'test' ], // meta map
                        file(params.test_data['actinidia_chinensis']['genome']['genome_1_gtf_gz'], checkIfExists: true)
                    ]
                    """
                }
            }

            run('GUNZIP', alias: 'GUNZIP_HINTS') {
                script "../../../nf-core/gunzip"

                process {
                    """
                    input[0] = [
                        [ id:'test' ], // meta map
                        file(params.test_data['actinidia_chinensis']['genome']['genome_1_hints_gff_gz'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = GUNZIP_GTF.out.gunzip.map { meta, gtf -> [ meta, [ gtf ] ] }
                input[1] = GUNZIP_HINTS.out.gunzip.map { meta, gff -> [ gff ] }
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("actinidia_chinensis-genome-stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [ file(params.test_data['actinidia_chinensis']['genome']['genome_1_gtf_gz'], checkIfExists: true) ]
                ]
                input[1] = [
                    file(params.test_data['actinidia_chinensis']['genome']['genome_1_hints_gff_gz'], checkIfExists: true)
                ]
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
