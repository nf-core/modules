nextflow_process {

    name "Test Process SVTK_RDTEST2VCF"
    script "../main.nf"
    process "SVTK_RDTEST2VCF"

    tag "modules"
    tag "modules_nfcore"
    tag "svtk"
    tag "svtk/rdtest2vcf"
    tag "svtk/vcf2bed"
    tag "manta/germline"

    test("homo sapiens - vcf") {

        setup {
            run("MANTA_GERMLINE") {
                script "modules/nf-core/manta/germline/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test'], // meta map
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                                [],[]
                            ]
                    input[1] = [ [id:'genome'],
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                            ]
                    input[2] = [ [id:'genome'],
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                            ]
                    input[3] = Channel.of("[manta]", "enableRemoteReadRetrievalForInsertionsInGermlineCallingModes = 0")
                                .collectFile(name:"manta_options.ini", newLine:true)
                    """
                }
            }
            run("SVTK_VCF2BED") {
                script "modules/nf-core/svtk/vcf2bed/main.nf"
                process {
                    """
                    input[0] = MANTA_GERMLINE.out.diploid_sv_vcf.combine(MANTA_GERMLINE.out.diploid_sv_vcf_tbi, by:0)

                    """
                }
            }
        }
        when {
            process {
                """
                // generate samples file
                samples  = Channel.of("test").collectFile(name: "samples.txt")
                input[0] = SVTK_VCF2BED.out.bed.combine(samples)
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo sapiens - bed - stub") {

        options "-stub"

        when {
            process {
                """
                // generate samples file
                samples  = Channel.of("test").collectFile(name: "samples.txt")
                input[0] = Channel.from(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                                    .map{it -> [["test"], it]}.collect().combine(samples, by: 0)
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
