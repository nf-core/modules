nextflow_process {

    name "Test Process PRETEXTMAP"
    script "../main.nf"
    process "PRETEXTMAP"

    tag "modules"
    tag "modules_nfcore"
    tag "pretext"
    tag "pretextmap"

    test("homo_cram_map") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true)
                ]

                input[1] = [
                    [ id: 'test2', single_end: false ],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta']),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'])
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("homo_cram_map_nofai") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true)
                ]

                input[1] = [
                    [ id: 'test2', single_end: false ],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta']),
                    []
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("homo_bam_map") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true)
                ]

                input[1] = [
                    [ id: 'test2', single_end: false ],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta']),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'])
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("mapped_pairs_map") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file("https://raw.githubusercontent.com/4dn-dcic/pairix/master/samples/test_4dn.pairs.gz", checkIfExists: true)
                ]

                input[1] = [
                    [],
                    [],
                    []
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("homo_cram_map_stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end: false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true)
                ]

                input[1] = [
                    [ id: 'test2', single_end: false ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta']),
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'])
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
