
nextflow_process {

    name "Test Process ANGSD_CONTAMINATION"
    script "../main.nf"
    process "ANGSD_CONTAMINATION"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "angsd"
    tag "angsd/contamination"
    tag "angsd/docounts"

    setup {
        run("ANGSD_DOCOUNTS") {
            script "../../../angsd/docounts/main.nf"
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam.bai', checkIfExists: true),
				    []
				]

                """
            }
        }
    }

    test("test-angsd-contamination") {

        when {
            process {
                """
                input[0] = ANGSD_DOCOUNTS.out.icounts
				input[1] = [ [id:'test2'], file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/angsd/HapMapChrX.gz")]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					file(process.out.txt[0][1]).readLines()[3..7],
                    file(process.out.versions[0]).readLines(),
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-angsd-contamination-stub") {
        options '-stub'

        when {
            process {
                """
                input[0] = ANGSD_DOCOUNTS.out.icounts
				input[1] = [ [id:'test2'], file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/angsd/HapMapChrX.gz")]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
