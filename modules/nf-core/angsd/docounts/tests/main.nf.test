
nextflow_process {

    name "Test Process ANGSD_DOCOUNTS"
    script "../main.nf"
    process "ANGSD_DOCOUNTS"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "angsd"
    tag "angsd/docounts"

    test("homo_sapiens - bam bai [] - only qs") {
        when {
            params{
                module_arg = "-doQsDist 1"
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam.bai', checkIfExists: true),
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("homo_sapiens - bam bai [] - all params") {
        when {
            params{
                module_arg = "-doDepth 1 -doQsDist 1 -dumpCounts 3 -iCounts 1"
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam.bai', checkIfExists: true),
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.depth_sample,
                    process.out.depth_global,
                    process.out.qs,
                    path(process.out.pos[0][1]).linesGzip[0..5],
                    path(process.out.counts[0][1]).linesGzip[0..5],
                    file(process.out.icounts[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("homo_sapiens - bam bai [] -- stub") {
        options "-stub"
        when {
            params{
                module_arg = "-doDepth -doQsDist 2 -dumpCounts 3 -iCounts 1"
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam.bai', checkIfExists: true),
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

}
