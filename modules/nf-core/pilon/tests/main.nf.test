nextflow_process {

    name "Test Process PILON"
    script "../main.nf"
    process "PILON"

    tag "modules"
    tag "modules_nfcore"
    tag "pilon"


    test("homo sapiens bam") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true)
                            ]
                input[1] = [ [ id:'test', single_end:false ], // meta map
                               file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true),
                               file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai", checkIfExists: true),
                            ]
                input[2] = "bam"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo sapiens bam - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true)
                            ]
                input[1] = [ [ id:'test', single_end:false ], // meta map
                               file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true),
                               file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai", checkIfExists: true),
                            ]
                input[2] = "bam"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo sapiens frags") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true)
                            ]
                input[1] = [ [ id:'test', single_end:false ], // meta map
                               file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true),
                               file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai", checkIfExists: true),
                            ]
                input[2] = "frags"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo sapiens frags - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true)
                            ]
                input[1] = [ [ id:'test', single_end:false ], // meta map
                               file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true),
                               file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai", checkIfExists: true),
                            ]
                input[2] = "frags"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
