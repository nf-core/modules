// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test malt/build
nextflow_process {

    name "Test Process MALT_BUILD"
    script "../main.nf"
    process "MALT_BUILD"

    tag "modules"
    tag "modules_nfcore"
    tag "malt"
    tag "malt/build"

    set {
        run("UNZIP")
        script "../../unzip/main.nf"
        process {
            """
            input[0] = [[], file("https://software-ab.cs.uni-tuebingen.de/download/megan6/megan-nucl-Feb2022.db.zip", checkIfExists: true)]
            """
        }
    }

//    test("candidatus_portiera_aleyrodidarum - fastq") {
//
//        when {
//            process {
//                """
//                input[0] = file(params.test_data['candidatus_portiera_aleyrodidarum']['genome']['genome_fasta'], checkIfExists: true)
//                input[1] = file(params.test_data['candidatus_portiera_aleyrodidarum']['genome']['test1_gff'], checkIfExists: true)
//                input[2] = UNZIP.out.unzipped_archive.map { it[1] }
//                """
//            }
//        }
//
//        then {
//            assertAll(
//                { assert process.success },
//                { assert snapshot(process.out).match() }
//            )
//        }
//
//    }

    test("candidatus_portiera_aleyrodidarum - fastq - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = file(params.test_data['candidatus_portiera_aleyrodidarum']['genome']['genome_fasta'], checkIfExists: true)
                input[1] = file(params.test_data['candidatus_portiera_aleyrodidarum']['genome']['test1_gff'], checkIfExists: true)
                input[2] = UNZIP.out.unzipped_archive.map { it[1] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
