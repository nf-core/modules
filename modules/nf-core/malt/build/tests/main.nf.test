// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test malt/build
nextflow_process {

    name "Test Process MALT_BUILD"
    script "../main.nf"
    process "MALT_BUILD"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "malt"
    tag "malt/build"
    tag "malt/unzip"

    setup {
        run("UNZIP") {
            script "../../../unzip/main.nf"
            process {
                """
                input[0] = [[], file("/home/james/Downloads/megan-nucl-Feb2022.db(4).zip", checkIfExists: true)]
                """
            }
        }
    }

    test("candidatus_portiera_aleyrodidarum - fastq") {

        when {
            process {
                """
                input[0] = file(params.test_data['candidatus_portiera_aleyrodidarum']['genome']['genome_fasta'], checkIfExists: true)
                input[1] = file(params.test_data['candidatus_portiera_aleyrodidarum']['genome']['test1_gff'], checkIfExists: true)
                input[2] = UNZIP.out.unzipped_archive.map { it[1] }
                """
            }
        }

        then {

            assertAll(
                { assert process.success },
                { assert snapshot(
                        path("${process.out.index[0]}/aadd.dbx"),
                        path("${process.out.index[0]}/aadd.idx"),
                        path("${process.out.index[0]}/index0.idx"),
                        path("${process.out.index[0]}/ref.db"),
                        path("${process.out.index[0]}/ref.idx"),
                        path("${process.out.index[0]}/ref.inf"),
                        path("${process.out.index[0]}/taxonomy.idx"),
                        path("${process.out.index[0]}/taxonomy.map"),
                        path("${process.out.index[0]}/taxonomy.tre")
                        )
                    .match()
                },
                { assert path(process.out.log[0]).readLines().last().contains("Peak memory") },
                { assert path("${process.out.index[0]}/table0.db").exists() },
                { assert path("${process.out.index[0]}/table0.idx").exists() },
            )
        }

    }

    test("candidatus_portiera_aleyrodidarum - fastq - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = file(params.test_data['candidatus_portiera_aleyrodidarum']['genome']['genome_fasta'], checkIfExists: true)
                input[1] = file(params.test_data['candidatus_portiera_aleyrodidarum']['genome']['test1_gff'], checkIfExists: true)
                input[2] = UNZIP.out.unzipped_archive.map { it[1] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
