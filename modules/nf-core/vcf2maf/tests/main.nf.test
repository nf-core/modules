nextflow_process {
    name "Test vcf2maf"
    process "VCF2MAF"
    script "../main.nf"

    tag "modules"
    tag "modules_nfcore"
    tag "vcf2maf"
    tag "untar"

    setup {
        run("UNTAR") {
            script "../../../../modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test_genome_vep' ],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/vep.tar.gz", checkIfExists: true)
                ]
                """
            }
        }
        run("ENSEMBLVEP_DOWNLOAD") {
            script "../../../../modules/nf-core/ensemblvep/download/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test_genome_vep' ],
                    'GRCh38',
                    'homo_sapiens',
                    '113'
                ]
                """
            }
        }
    }

    test("Run without VEP") {

        config "./nextflow.config"

        when {
            params {
                module_args = '--ncbi-build GRCh38 --species homo_sapiens --inhibit-vep'
                module_setup_args = ""
            }
            process {
                """
                input[0] = [
                                [ id:'test'], // meta map
                                file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test.genome.vcf", checkIfExists: true)
                            ]
                input[1] = file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true)
                input[2] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.maf[0][1]).readLines()[5..131],
                    process.out.versions,
                    path(process.out.versions[0]).readLines()
                ).match() },
            )
        }
    }

    test("Run with VEP"){

        config "./nextflow.config"

        when {
            params {
                module_args = "--ncbi-build GRCh38 --species homo_sapiens"
                module_setup_args = '--AUTO c --CONVERT --NO_BIOPERL --NO_HTSLIB --NO_TEST --NO_UPDATE'
            }
            process {
                """
                input[0] = [
                                [ id:'test'], // meta map
                                file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test.genome.vcf", checkIfExists: true)
                            ]
                input[1] = [ file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true) ]
                input[2] = ENSEMBLVEP_DOWNLOAD.out.cache.map { it[1] }
                """
            } //UNTAR.out.untar.map { it[1] }
        }

        then{
            assertAll(
                { assert process.success },
                { assert path(process.out.maf[0][1]).readLines().size() == 2 }, // no variants, only header lines
                { assert snapshot(process.out.versions, path(process.out.versions[0]).readLines()).match() }
            )
        }
    }

    test("Run without VEP - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                                [ id:'test'], // meta map
                                file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test.genome.vcf", checkIfExists: true)
                            ]
                input[1] = [ file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true) ]
                input[2] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).readLines()
                    ).match()
                },
            )
        }
    }

    test("Run with VEP - stub"){

        options "-stub"

        when {
            process {
                """
                input[0] = [
                                [ id:'test'], // meta map
                                file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test.genome.vcf", checkIfExists: true)
                            ]
                input[1] = [ file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true) ]
                input[2] = UNTAR.out.untar.map { it[1] }
                """
            }
        }

        then{
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).readLines()
                    ).match()
                },
            )
        }
    }

}
