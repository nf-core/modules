nextflow_process {

    name "Test Process IQTREE"
    script "../main.nf"
    process "IQTREE"

    tag "modules"
    tag "modules_nfcore"
    tag "iqtree"

    test("hydrogenase - bootstrap") {

        config "./iqtree_bootstrap.config"

        when {
            process {
                """
                input[0] = [ [ id: "test" ],
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/phyloplace/testdata/PF14720_seed.alnfaa", checkIfExists:true) ]
                input[1]  = [ [ id: "test" ] , [] ]
                input[2]  = [ [ id: "test" ] , [] ]
                input[3]  = [ [ id: "test" ] , [] ]
                input[4]  = [ [ id: "test" ] , [] ]
                input[5]  = [ [ id: "test" ] , [] ]
                input[6]  = [ [ id: "test" ] , [] ]
                input[7]  = [ [ id: "test" ] , [] ]
                input[8]  = [ [ id: "test" ] , [] ]
                input[9]  = [ [ id: "test" ] , [] ]
                input[10] = [ [ id: "test" ] , [] ]
                input[11] = [ [ id: "test" ] , [] ]
                input[12] = [ [ id: "test" ] , [] ]
                input[13] = [ [ id: "test" ] , [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.phylogeny.get(0).get(1)).readLines().first().contains("E1QGS5_DESB2/226-309") },
                { assert path(process.out.bootstrap.get(0).get(1)).readLines().first().contains("E1QGS5_DESB2/226-309,") },
                { assert path(process.out.contree.get(0).get(1)).readLines().first().contains("E1QGS5_DESB2/226-309") },
                { assert path(process.out.splits.get(0).get(1)).readLines().first().contains("*") },
                { assert snapshot(  path(process.out.nex.get(0).get(1)).readLines()[0..12],
                                    path(process.out.mldist.get(0).get(1)).readLines().first(),
                                    path(process.out.report.get(0).get(1)).readLines().first(),
                                    path(process.out.log.get(0).get(1)).readLines().first(),
                                    process.out.versions ).match() }
            )
        }
    }

    test("hydrogenase - sup") {

        when {
            process {
                """
                input[0]  = [ [ id: "test" ], [] ]
                input[1]  = [ [ id: "test" ],
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/phyloplace/testdata/PF14720_seed.ft.LGCAT.newick", checkIfExists:true) ]
                input[2]  = [ [ id: "test" ] , [] ]
                input[3]  = [ [ id: "test" ] , [] ]
                input[4]  = [ [ id: "test" ] , [] ]
                input[5]  = [ [ id: "test" ] , [] ]
                input[6]  = [ [ id: "test" ] , [] ]
                input[7]  = [ [ id: "test" ] , [] ]
                input[8]  = [ [ id: "test" ] , [] ]
                input[9]  = [ [ id: "test" ] , [] ]
                input[10] = [ [ id: "test" ] , [] ]
                input[11] = [ [ id: "test" ] , [] ]
                input[12] = Channel.of([ id: "test" ])
                            .combine(Channel.of(
                                file("https://raw.githubusercontent.com/nf-core/test-datasets/phyloplace/testdata/PF14720_seed.ft.LGCAT.newick", checkIfExists:true)
                                .text)
                                .collectFile(name: 'hydrogenase.newick')
                                )
                input[13] = [ [ id: "test" ] , [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.log.get(0).get(1)).readLines().first().contains("IQ-TREE") },
                { assert snapshot(  path(process.out.log.get(0).get(1)).readLines().first(),
                                    process.out.suptree,
                                    process.out.versions ).match() }
            )
        }
    }

    test("hydrogenase - optional") {

        config "./iqtree_optional.config"

        when {
            process {
                """
                input[0]  = [ [ id: "test" ] ,
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/phyloplace/testdata/PF14720_seed.alnfaa", checkIfExists:true) ]
                input[1]  = [ [ id: "test" ] , [] ]
                input[2]  = [ [ id: "test" ] ,
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/phyloplace/testdata/PF14720_seed.ft.LGCAT.newick", checkIfExists:true)  ]
                input[3]  = [ [ id: "test" ] , [] ]
                input[4]  = [ [ id: "test" ] , [] ]
                input[5]  = [ [ id: "test" ] , [] ]
                input[6]  = [ [ id: "test" ] , [] ]
                input[7]  = [ [ id: "test" ] , [] ]
                input[8]  = [ [ id: "test" ] , [] ]
                input[9]  = [ [ id: "test" ] , [] ]
                input[10] = [ [ id: "test" ] , [] ]
                input[11] = [ [ id: "test" ] , [] ]
                input[12] = [ [ id: "test" ] , [] ]
                input[13] = [ [ id: "test" ] , [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.phylogeny.get(0).get(1)).readLines().first().contains("E1QGS5_DESB2/226-309") },
                { assert snapshot(  path(process.out.lmap_eps.get(0).get(1)).readLines()[0..4],
                                    path(process.out.lmap_svg.get(0).get(1)).readLines()[0..5],
                                    path(process.out.lmap_quartetlh.get(0).get(1)).readLines().first(),
                                    path(process.out.mlrate.get(0).get(1)).readLines()[0..5],
                                    path(process.out.report.get(0).get(1)).readLines().first(),
                                    path(process.out.log.get(0).get(1)).readLines().first(),
                                    process.out.alninfo,
                                    process.out.siteprob,
                                    process.out.sitelh,
                                    process.out.rate,
                                    process.out.treels,
                                    process.out.state,
                                    process.out.splits,
                                    process.out.versions ).match() }
            )
        }
    }

    test("stub") {

        options "-stub"

        when {
            process {
                """
                input[0]  = [ [ id: "test" ] , [] ]
                input[1]  = [ [ id: "test" ] , [] ]
                input[2]  = [ [ id: "test" ] , [] ]
                input[3]  = [ [ id: "test" ] , [] ]
                input[4]  = [ [ id: "test" ] , [] ]
                input[5]  = [ [ id: "test" ] , [] ]
                input[6]  = [ [ id: "test" ] , [] ]
                input[7]  = [ [ id: "test" ] , [] ]
                input[8]  = [ [ id: "test" ] , [] ]
                input[9]  = [ [ id: "test" ] , [] ]
                input[10] = [ [ id: "test" ] , [] ]
                input[11] = [ [ id: "test" ] , [] ]
                input[12] = [ [ id: "test" ] , [] ]
                input[13] = [ [ id: "test" ] , [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot( process.out ).match() }
            )
        }
    }

}