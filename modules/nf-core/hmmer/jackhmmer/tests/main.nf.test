nextflow_process {

    name "Test Process HMMER_JACKHMMER"
    script "../main.nf"
    process "HMMER_JACKHMMER"

    tag "modules"
    tag "modules_nfcore"
    tag "hmmer"
    tag "hmmer/jackhmmer"

    test("mgnifams - fasta") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + "../../proteinfamilies/test_data/subworkflows/chunk_1.fasta", checkIfExists: true),
                    file(params.modules_testdata_base_path + "../../proteinfamilies/test_data/mgnifams_input_small.fa", checkIfExists: true),
                    false,
                    false,
                    false
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.output[0][1]).linesGzip.toString().contains('[ok]') }, // CPU execution time in result
                { assert snapshot(process.out.versions).match() }
            )
        }

    }

    test("mgnifams - fasta - optional") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + "../../proteinfamilies/test_data/subworkflows/chunk_1.fasta", checkIfExists: true),
                    file(params.modules_testdata_base_path + "../../proteinfamilies/test_data/mgnifams_input_small.fa", checkIfExists: true),
                    true,
                    true,
                    true
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.output.get(0).get(1)).linesGzip.toString().contains('[ok]') },         // CPU execution time in result
                { assert path(process.out.target_summary.get(0).get(1)).linesGzip.toString().contains('[ok]') }, // Timestamp in result
                { assert path(process.out.target_summary.get(0).get(1)).linesGzip.toString().contains('[ok]') }, // Timestamp in result
                { assert snapshot(
                    process.out.alignments +
                    process.out.versions
                ).match() }
            )
        }

    }

    test("mgnifams - fasta - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + "../../proteinfamilies/test_data/subworkflows/chunk_1.fasta", checkIfExists: true),
                    file(params.modules_testdata_base_path + "../../proteinfamilies/test_data/mgnifams_input_small.fa", checkIfExists: true),
                    false,
                    false,
                    false
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("mgnifams - fasta - optional - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + "../../proteinfamilies/test_data/subworkflows/chunk_1.fasta", checkIfExists: true),
                    file(params.modules_testdata_base_path + "../../proteinfamilies/test_data/mgnifams_input_small.fa", checkIfExists: true),
                    true,
                    true,
                    true
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
