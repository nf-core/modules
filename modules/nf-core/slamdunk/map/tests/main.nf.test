nextflow_process {

    name "Test Process SLAMDUNK_MAP"
    script "../main.nf"
    process "SLAMDUNK_MAP"

    tag "modules"
    tag "modules_nfcore"
    tag "slamdunk"
    tag "slamdunk/map"

    test("slamdunk - map - fastq") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test_ref' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect{ file(it[1]).getName() },
                    process.out.versions
                ).match() }
            )
        }

    }

    test("slamdunk - map - fastq - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test_ref' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("slamdunk - map - bam") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.unaligned.bam', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test_ref' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect{ file(it[1]).getName() },
                    process.out.versions
                ).match() }
            )
        }

    }

    test("slamdunk - map - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.unaligned.bam', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test_ref' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
