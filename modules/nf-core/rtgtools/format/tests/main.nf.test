nextflow_process {

    name "Test Process RTGTOOLS_FORMAT"
    script "../main.nf"
    process "RTGTOOLS_FORMAT"

    tag "modules"
    tag "modules_nfcore"
    tag "rtgtools"
    tag "rtgtools/format"

    test("sarscov2 - fasta") {

        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                    [],
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.sdf[0][1]).list().collect { file(it.toString()).name },
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - fastqs") {

        config "./fastq.config"

        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true),
                    []
                ]
                """
            }
        }

        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true),
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.sdf[0][1]).list().collect { file(it.toString()).name },
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - bam, rg") {

        config "./sam.config"

        when {
            process {
                """
                def rg = Channel.of("@RG\tID:READGROUP1\tSM:SAMPLE\tPL:ILLUMINA")
                    .collectFile(name:'sam_rg.txt')

                input[0] = Channel.of([
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.bam', checkIfExists: true),
                    []
                ]).combine(rg)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.sdf[0][1]).list().collect { file(it.toString()).name },
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - fasta - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                    [],
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
