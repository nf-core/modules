nextflow_process {

    name "Test Process GRIDSS_GENERATEPONBEDPE"
    script "../main.nf"
    process "GRIDSS_GENERATEPONBEDPE"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "gridss"
    tag "gridss/generateponbedpe"
    tag "gridss/gridss"
    tag "bwa/index"

    setup {

        run("BWA_INDEX") {
            script "../../../bwa/index/main.nf"
            process {
                """
                input[0] = [ [id:'fasta'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                        ]
                """
            }
        }

        run("GRIDSS_GRIDSS") {
            script "../../../gridss/gridss/main.nf"
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true), //inputs
                        [] //assembly
                        ]
                input[1] = [ [id:'fasta'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                        ]
                input[2] = [ [id:'fasta_fai'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                        ]
                input[3] = BWA_INDEX.out.index
                """
            }
        }

    }

    test("human - vcf") {

        when {
            process {
                """
                input[0] = GRIDSS_GRIDSS.out.vcf.map{ it -> tuple( it[0], it[1], [], [] ) }
                input[1] = [ [id:'fasta'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                        ]
                input[2] = [ [id:'fasta_fai'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                        ]
                input[3] = BWA_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    file(process.out.bed.get(0).get(1)).name,
                    file(process.out.bedpe.get(0).get(1)).name
                    ).match() }
            )
        }

    }

    test("human - vcf - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = GRIDSS_GRIDSS.out.vcf.map{ it -> tuple( it[0], it[1], [], [] ) }
                input[1] = [ [id:'fasta'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                        ]
                input[2] = [ [id:'fasta_fai'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                        ]
                input[3] = BWA_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
