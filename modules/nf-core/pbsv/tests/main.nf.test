// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test pbsv
nextflow_process {

    name "Test Process PBSV"
    script "../main.nf"
    process "PBSV"

    tag "modules"
    tag "modules_nfcore"
    tag "pbsv"

    test("pbsv_bam") {
        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:
                
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path +  'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam', checkIfExists: true)
                ]

                input[1] = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome3.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") },
                { assert process.out.vcf != null },                
                { assert file(process.out.vcf[0][1]).name == "test.pbsv.vcf" }
            )
        }


    }

    test("pbsv_bam_stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:
                
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path +  'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam', checkIfExists: true)
                    ]
                input[1] = [
		            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome3.fasta', checkIfExists: true)
		    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
