nextflow_process {

    name "Test Process PYCLONEVI"
    script "../main.nf"
    process "PYCLONEVI"

    tag "modules"
    tag "modules_nfcore"
    tag "pyclonevi"

    test("pyclonevi") {


        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    meta = [ id : "test", patient : "HCC1395", tumour_sample : "HCC1395_HCC1395T" ],
                    file(params.modules_testdata_base_path + 'delete_me/pyclonevi/HCC1395_WXS_HCC1395_joint_table.tsv', checkIfExists: true),
                    [ 'HCC1395_HCC1395T' ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert file(process.out.ctree_input[0][1]).exists() },
                { assert file(process.out.pyclone_input[0][1][0]).exists() },
                { assert file(process.out.pyclone_input[0][1][1]).exists() },
                { assert file(process.out.pyclone_all_fits[0][1]).exists() },
                { assert file(process.out.pyclone_best_fit[0][1]).exists() }
            )
        }

    }

    test("pyclonevi - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    meta = [ id : "test", patient : "HCC1395", tumour_sample : "HCC1395_HCC1395T" ],
                    file(params.modules_testdata_base_path + 'delete_me/pyclonevi/HCC1395_WXS_HCC1395_joint_table.tsv', checkIfExists: true),
                    [ 'HCC1395_HCC1395T']
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
