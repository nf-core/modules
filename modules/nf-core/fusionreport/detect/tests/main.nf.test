nextflow_process {

    name "Test Process FUSIONREPORT_DETECT"
    script "../main.nf"
    process "FUSIONREPORT_DETECT"
    tag "modules"
    tag "modules_local"
    tag "fusionreport"
    tag "fusionreport/detect"
    tag "modules_nfcore"
    tag "fusionreport/download"


    test("FUSIONREPORT - arriba - starfusion - fusioncatcher") {
        config './nextflow.config'

        setup {
            run("FUSIONREPORT_DOWNLOAD") {
                script "../../../fusionreport/download/main.nf"
                process {
                    """
                    """
                }
            }
        }

        when {
            process {
                """

                input[0] = [
                    [ id:'test_sample' ], // meta map
                    file("https://github.com/Clinical-Genomics/fusion-report/raw/master/tests/test_data/arriba.tsv"),
                    file("https://github.com/Clinical-Genomics/fusion-report/raw/master/tests/test_data/starfusion.tsv"),
                    file("https://github.com/Clinical-Genomics/fusion-report/raw/master/tests/test_data/fusioncatcher.txt")
                ]

                input[1] = FUSIONREPORT_DOWNLOAD.out.fusionreport_ref
                input[2] = 1
                """
            }
            params {
                arriba                     = true
                starfusion                 = true
                fusioncatcher              = true
                no_cosmic                  = true
                outdir                     = "$outputDir"
                fusionreport_download_args = '--no-cosmic'
                fusionreport_detect_args   = {params.no_cosmic} ? "--no-cosmic" : ""
                fusionreport_detect_args2  = "--export csv"
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.fusion_list,
                    process.out.fusion_list_filtered,
                    process.out.csv,
                    file(process.out.report[0][1]).name,
                    process.out.html[0][1].collect { file(it).name },
                    process.out.json,
                    process.out.versions.flatten().first().toString().split('/')[-1]  // md5sum not stable as versions contains DB timestamp
                    ).match() }
            )
        }

    }

    test("FUSIONREPORT - arriba - starfusion - fusioncatcher - stub") {
        config './nextflow.config'

        setup {
            run("FUSIONREPORT_DOWNLOAD") {
                script "../../../fusionreport/download/main.nf"
                process {
                    """
                    """
                }
            }
        }

        options "-stub"

        when {
            process {
                """

                input[0] = [
                    [ id:'test_sample' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/arriba.tsv', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/starfusion.tsv', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/fusioncatcher.txt', checkIfExists: true)
                ]

                input[1] = FUSIONREPORT_DOWNLOAD.out.fusionreport_ref

                input[2] = 1

                """
            }
        params {
                arriba                     = true
                starfusion                 = true
                fusioncatcher              = true
                no_cosmic                  = true
                outdir                     = "$outputDir"
                fusionreport_download_args = '--no-cosmic'
                fusionreport_detect_args   = {params.no_cosmic} ? "--no-cosmic" : ""
                fusionreport_detect_args2  = "--export csv"
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}