nextflow_process {

    name "Test Process NGSCHECKMATE_PATTERNGENERATOR"
    script "../main.nf"
    process "NGSCHECKMATE_PATTERNGENERATOR"

    tag "modules"
    tag "modules_nfcore"
    tag "ngscheckmate"
    tag "ngscheckmate/patterngenerator"
    tag "bowtie/build"

    setup {

        run("BOWTIE_BUILD") {
            script "../../../bowtie/build/main.nf"
            process {
                """
                input[0] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                """
            }
        }

    }

    test("sarscov2") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['genome']['test_bed'], checkIfExists: true)
                ]
                input[1] = [
                    [ id: 'sarscov2' ],
                    file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[2] = BOWTIE_BUILD.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.pt.get(0).get(1).endsWith("test.pt") },
                { assert snapshot(process.out.versions).match("versions") }

            )
        }

    }

    test("sarscov2 - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['genome']['test_bed'], checkIfExists: true)
                ]
                input[1] = [
                    [ id: 'sarscov2' ],
                    file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[2] = BOWTIE_BUILD.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
