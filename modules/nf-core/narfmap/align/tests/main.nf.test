nextflow_process {

    name "Test Process NARFMAP_ALIGN"
    script "../main.nf"
    process "NARFMAP_ALIGN"
    tag "modules"
    tag "modules_nfcore"
    tag "narfmap"
    tag "narfmap/align"

    test("sarscov2 - fastq, hashtable, false") {

        setup {
            run("NARFMAP_HASHTABLE") {
                script "../../hashtable/main.nf"
                process {
                    """
                    input[0] = [
                        [id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = NARFMAP_HASHTABLE.out.hashmap
                input[2] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    file(process.out.log[0][1]).readLines().findAll { it.startsWith("decompHash") },
                    file(process.out.versions[0]).name
                ).match() }
            )
        }

    }

    test("sarscov2 - fastq, hashtable, true") {

        setup {
            run("NARFMAP_HASHTABLE") {
                script "../../hashtable/main.nf"
                process {
                    """
                    input[0] = [
                        [id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = NARFMAP_HASHTABLE.out.hashmap
                input[2] = true //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    file(process.out.log[0][1]).readLines().findAll { it.startsWith("decompHash") },
                    file(process.out.versions[0]).name
                ).match() }
            )
        }

    }

    test("sarscov2 - [fastq1, fastq2], hashtable, false") {

        setup {
            run("NARFMAP_HASHTABLE") {
                script "../../hashtable/main.nf"
                process {
                    """
                    input[0] = [
                        [id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = NARFMAP_HASHTABLE.out.hashmap
                input[2] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    file(process.out.log[0][1]).readLines().findAll { it.startsWith("decompHash") },
                    file(process.out.versions[0]).name
                ).match() }
            )
        }

    }

    test("sarscov2 - [fastq1, fastq2], hashtable, true") {

        setup {
            run("NARFMAP_HASHTABLE") {
                script "../../hashtable/main.nf"
                process {
                    """
                    input[0] = [
                        [id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = NARFMAP_HASHTABLE.out.hashmap
                input[2] = true //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    file(process.out.log[0][1]).readLines().findAll { it.startsWith("decompHash") },
                    file(process.out.versions[0]).name
                ).match() }
            )
        }

    }

    test("homo_sapiens - [fastq1, fastq2], hashtable, true") {

        setup {
            run("NARFMAP_HASHTABLE") {
                script "../../hashtable/main.nf"
                process {
                    """
                    input[0] = [
                        [id:'test'],
                        file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = NARFMAP_HASHTABLE.out.hashmap
                input[2] = true //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    file(process.out.log[0][1]).readLines().findAll { it.startsWith("decompHash") },
                    file(process.out.versions[0]).name
                ).match() }
            )
        }

    }

    test("sarscov2 - [fastq1, fastq2], hashtable, true - stub") {

        options "-stub"
        setup {
            run("NARFMAP_HASHTABLE") {
                script "../../hashtable/main.nf"
                process {
                    """
                    input[0] = [
                        [id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = NARFMAP_HASHTABLE.out.hashmap
                input[2] = true //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    file(process.out.log[0][1]).name,
                    file(process.out.versions[0]).name
                ).match() }
            )
        }

    }

}
