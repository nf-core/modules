nextflow_process {

    name "Test Process LEEHOM"
    config "./nextflow.config"
    script "../main.nf"
    process "LEEHOM"

    tag "modules"
    tag "modules_nfcore"
    tag "leehom"
    tag "samtools"
    tag "samtools/view"

    test("homo_sapiens - bam") {
        setup {
            run("SAMTOOLS_VIEW") {
                script "../../samtools/view/main.nf"
                process {
                    """
                    input[0] = [
                        [id:'test', single_end:false],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                        []
                    ]
                    input[1] = [[],[]]
                    input[2] = []
                    input[3] = []
                    """
                }
            }
        }
        when {
            params {
                samtools_arg = '-f4 -b'
            }
            process {
                """
                input[0] = SAMTOOLS_VIEW.out.bam
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("sarscov2 - fastq single end") {
        when {
            params {
                samtools_arg = ''
            }
            process {
                """
                input[0] = [
                    [id:'test', single_end:true],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists:true)]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot( // Need to discard fail files as empty
                    process.out.bam,
                    process.out.fq_pass,
                    process.out.unmerged_r1_fq_pass,
                    process.out.unmerged_r2_fq_pass,
                    process.out.log,
                    process.out.versions
                ).match() }
            )
        }
    }
    test("sarscov2 - fastq paired end") {
        when {
            params {
                samtools_arg = ''
            }
            process {
                """
                input[0] = [
                    [id:'test', single_end:false],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists:true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists:true)
                    ]
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot( // Need to discard fail files as empty
                    process.out.bam,
                    process.out.fq_pass,
                    process.out.unmerged_r1_fq_pass,
                    process.out.unmerged_r2_fq_pass,
                    process.out.log,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("homo_sapiens - bam - stub") {
        options "-stub"
        when {
            params {
                samtools_arg = ''
            }
            process {
                """
                input[0] = [
                    [id:'test', single_end:false],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
    test("sarscov2 - fastq single end - stub") {
        options "-stub"
        when {
            params {
                samtools_arg = ''
            }
            process {
                """
                input[0] = [
                    [id:'test', single_end:true],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists:true)]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
    test("sarscov2 - fastq paired end - stub") {
        options "-stub"
        when {
            params {
                samtools_arg = ''
            }
            process {
                """
                input[0] = [
                    [id:'test', single_end:false],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists:true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists:true)
                    ]
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
}