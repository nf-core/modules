nextflow_process {

    name "Test Process HAPPY_HAPPY"
    script "../main.nf"
    process "HAPPY_HAPPY"

    tag "modules"
    tag "modules_nfcore"
    tag "happy"
    tag "happy/happy"

    test("homo_sapiens - illumina - vcf") {

        when {
            process {
                """
                input[0] = [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/multi_intervals.bed', checkIfExists: true),
                        []
                        ]
                input[1] = [
                        [ id:'test2' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                        ]
                input[2] = [
                        [ id:'test3' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
                        ]
                input[3] = [[],[]]
                input[4] = [[],[]]
                input[5] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.vcf.get(0).get(1)).linesGzip.contains("##fileformat=VCFv4.1") },
                { assert path(process.out.roc_all_csv.get(0).get(1)).linesGzip.toString().contains("Type") },
                { assert path(process.out.roc_indel_locations_csv.get(0).get(1)).linesGzip.toString().contains("Type") },
                { assert path(process.out.roc_snp_locations_csv.get(0).get(1)).linesGzip.toString().contains("Type") },
                { assert path(process.out.roc_indel_locations_pass_csv.get(0).get(1)).linesGzip.toString().contains("Type") },
                { assert path(process.out.roc_snp_locations_pass_csv.get(0).get(1)).linesGzip.toString().contains("Type") },
                { assert snapshot(process.out.summary_csv,
                                process.out.extended_csv,
                                process.out.versions ).match() },
                { assert snapshot(file(process.out.metrics_json[0][1]).name).match("metrics_json_1")},
                { assert snapshot(file(process.out.runinfo[0][1]).name).match("runinfo_1")},
                { assert snapshot(file(process.out.tbi[0][1]).name).match("tbi_1")},
                { assert snapshot(process.out.versions ).match("versions_1") }
            )
        }
    }
    test("homo_sapiens - illumina - vcf - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/multi_intervals.bed', checkIfExists: true),
                        []
                        ]
                input[1] = [
                        [ id:'test2' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                        ]
                input[2] = [
                        [ id:'test3' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
                        ]
                input[3] = [[],[]]
                input[4] = [[],[]]
                input[5] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
