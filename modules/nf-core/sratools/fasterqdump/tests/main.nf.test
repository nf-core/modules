nextflow_process {
    name "Test Process SRATOOLS_FASTERQDUMP"
    script "../main.nf"
    config "./nextflow.config"
    process "SRATOOLS_FASTERQDUMP"
    tag "modules"
    tag "modules_nfcore"
    tag "untar"
    tag "sratools"
    tag "sratools/fasterqdump"

    test("Single-end") {

        setup {
            run("UNTAR") {
                script "modules/nf-core/untar/main.nf"
                process {
                    """
                    input[0] = Channel.of([ [], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/sra/SRR13255544.tar.gz', checkIfExists: true) ])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = UNTAR.out.untar.map{ meta, files -> [ [ id:'test_single_end', single_end:true ], files]}
                input[1] = file(params.modules_testdata_base_path + 'generic/config/ncbi_user_settings.mkfg', checkIfExists: true)
                input[2] = []
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            { assert snapshot(process.out).match() }
            )
        }
    }

    test("Paired-end") {

        setup {
            run("UNTAR") {
                script "modules/nf-core/untar/main.nf"
                process {
                    """
                    input[0] = Channel.of([ [], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/sra/SRR11140744.tar.gz', checkIfExists: true) ])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = UNTAR.out.untar.map{ meta, files -> [ [ id:'test_paired_end', single_end:false ], files]}
                input[1] = file(params.modules_testdata_base_path + 'generic/config/ncbi_user_settings.mkfg', checkIfExists: true)
                input[2] = []
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            { assert snapshot(process.out).match() }
            )
        }
    }
}
