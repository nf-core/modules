nextflow_process {

    name "Test Process LEVIOSAM2_LIFT"
    script "../main.nf"
    process "LEVIOSAM2_LIFT"

    tag "modules"
    tag "modules_nfcore"
    tag "leviosam2"
    tag "leviosam2/lift"
    tag "leviosam2/index"
    tag "gunzip"

    test("lift - bam") {
        setup {
            run("GUNZIP") {
                script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test' ],
                        file(params.test_data['homo_sapiens']['genome']['genome_chain_gz'], checkIfExists: true)
                    ]
                    """
                }

            }
            run("LEVIOSAM2_INDEX") {
                script "../../index/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test' ], 
                        file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                        ]
                    input[1] = GUNZIP.out.gunzip.map{ meta, gunzip -> gunzip }
                    """
                }

            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true)
                    ]
                input[1] = LEVIOSAM2_INDEX.out.clft
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                {
                    assert snapshot(
                        process.out.bam.collect { file(it[1]).getName() },
                        process.out.version
                    ).match()
                }
            )
        }

    }

    test("lift - cram") {
        setup {
            run("GUNZIP") {
                script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test' ],
                        file(params.test_data['homo_sapiens']['genome']['genome_chain_gz'], checkIfExists: true)
                    ]
                    """
                }

            }
            run("LEVIOSAM2_INDEX") {
                script "../../index/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test' ], 
                        file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                        ]
                    input[1] = GUNZIP.out.gunzip.map{ meta, gunzip -> gunzip }
                    """
                }

            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true)
                    ]
                input[1] = LEVIOSAM2_INDEX.out.clft
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                {
                    assert snapshot(
                        process.out.bam.collect { file(it[1]).getName() },
                        process.out.version
                    ).match()
                }
            )
        }

    }

    test("lift - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true)
                    ]
                input[1] = [
                    [ id:'test' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
