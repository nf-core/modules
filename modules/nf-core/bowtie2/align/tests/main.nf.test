nextflow_process {

    name "Test Process BOWTIE2_ALIGN"
    script "../main.nf"
    process "BOWTIE2_ALIGN"
    tag "modules"
    tag "modules_nfcore"
    tag "bowtie2"
    tag "bowtie2/build"
    tag "bowtie2/align"

    test("sarscov2 - fastq, index, fasta, false, false - bam") {

        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - fastq, index, fasta, false, false - sam") {

        config "./sam.config"
        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.sam[0][1]).readLines()[0..4],
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - fastq, index, fasta, false, false - sam2") {

        config "./sam2.config"
        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.sam[0][1]).readLines()[0..4],
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - fastq, index, fasta, false, true - bam") {

        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - [fastq1, fastq2], index, fasta, false, false - bam") {

        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - [fastq1, fastq2], index, fasta, false, true - bam") {

        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - fastq, large_index, fasta, false, false - bam") {

        config "./large_index.config"
        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - [fastq1, fastq2], large_index, fasta, false, false - bam") {

        config "./large_index.config"
        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - [fastq1, fastq2], index, fasta, true, false - bam") {

        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - fastq, index, fasta, true, false - bam") {

        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }

            )
        }

    }

    test("sarscov2 - [fastq1, fastq2], index, fasta, true, true - cram") {

        config "./cram_crai.config"
        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = true //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.cram[0][1]).name,
                    file(process.out.crai[0][1]).name
                ).match() }
            )
        }

    }

    test("sarscov2 - [fastq1, fastq2], index, fasta, false, false - stub") {

        options "-stub"
        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    file(process.out.csi[0][1]).name,
                    file(process.out.log[0][1]).name,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - fastq, index, fasta, true, false - stub") {

        options "-stub"
        setup {
            run("BOWTIE2_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = [[ id:'test'], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[3] = false //save_unaligned
                input[4] = false //sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    file(process.out.csi[0][1]).name,
                    file(process.out.log[0][1]).name,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

}
