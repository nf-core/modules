nextflow_process {

    name "Test Process CREATE_GENE_HEATMAP"
    script "../main.nf"
    process "CREATE_GENE_HEATMAP"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "CREATE_GENE_HEATMAP"

    test("test profile") {
        when {
            process {
                """
                input[0] = [
                    [id:"test"],
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/nanostring/modules_test_data/test_profile/counts_Norm_GEX_ENDO.tsv', checkIfExists: true ),
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/nanostring/modules_test_data/test_profile/normalized_counts.tsv', checkIfExists: true )
                ]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success},
                { assert snapshot(
                    process.out.gene_heatmap.collect{ meta,png -> file(png).name }, //list unstable png files
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("test profile filter") {
        when {
            process {
                """
                input[0] = [
                    [id:"test"],
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/nanostring/modules_test_data/test_profile/counts_Norm_GEX_ENDO.tsv', checkIfExists: true ),
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/nanostring/modules_test_data/test_profile/normalized_counts.tsv', checkIfExists: true )
                ]
                input[1] = file('https://raw.githubusercontent.com/nf-core/test-datasets/nanostring/modules_test_data/test_profile/genes_to_filter.yml', checkIfExists: true )
                """
            }
        }
        then {
            assertAll(
                { assert process.success},
                { assert snapshot(
                    process.out.gene_heatmap.collect{ meta,png -> file(png).name }, //list unstable png files
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = [
                    [id:"test"],
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/nanostring/modules_test_data/test_profile/counts_Norm_GEX_ENDO.tsv', checkIfExists: true ),
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/nanostring/modules_test_data/test_profile/normalized_counts.tsv', checkIfExists: true )
                ]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success},
                { assert snapshot(
                    process.out.gene_heatmap.collect{ meta,png -> file(png).name }, //list unstable png files
                    process.out.versions
                    ).match()
                }
            )
        }
    }
}
