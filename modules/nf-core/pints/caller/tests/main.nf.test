nextflow_process {

    name "Test Process PINTS_CALLER"
    script "../main.nf"
    process "PINTS_CALLER"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "pints"
    tag "pints/caller"

    test("groHMM data - [bam, bam], fasta") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    [
                        file("https://raw.githubusercontent.com/Kraus-Lab/groHMM/master/inst/extdata/S0mR1.bam", checkIfExists: true),
                        file("https://raw.githubusercontent.com/Kraus-Lab/groHMM/master/inst/extdata/S40mR1.bam", checkIfExists: true)
                    ],
                    [],
                ]
                input[1] = "GROseq"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.divergent_TREs,
                    process.out.bidirectional_TREs,
                    file(process.out.unidirectional_TREs.get(0).get(1).get(0)).name,
                    process.out.versions,
                ).match("bams")
                },
            )
        }

    }

    test("groHMM data - [bam], fasta") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file("https://raw.githubusercontent.com/Kraus-Lab/groHMM/master/inst/extdata/S0mR1.bam", checkIfExists: true),
                    [],
                ]
                input[1] = "GROseq"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.divergent_TREs,
                    process.out.bidirectional_TREs,
                    file(process.out.unidirectional_TREs[0][1]).name,
                    process.out.versions,
                ).match("single_bam")
                },
            )
        }
    }

    test("Fails if no signal is found") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true)
                    [],
                ]
                input[1] = "GROseq"
                """
            }
        }

        then {
            assertAll(
                { assert process.failed },
                { assert process.exitStatus == 1 },
            )
        }
    }

    // TODO Test single bigwig input
    // TODO Test multiple bigwig input
}
