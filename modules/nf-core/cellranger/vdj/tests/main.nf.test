// nf-core modules test cellranger/vdj
nextflow_process {

    name "Test Process CELLRANGER_VDJ"
    script "../main.nf"
    process "CELLRANGER_VDJ"

    tag "modules"
    tag "modules_nfcore"
    tag "cellranger"
    tag "cellranger/vdj"

    test("cellranger - vdj - test_10x") {

        when {
            process {
                """
                reference_json      = file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_vdj_ref_json']     , checkIfExists: true)
                reference_fasta     = file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_vdj_ref_fasta']    , checkIfExists: true)
                reference_suppfasta = file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_vdj_ref_suppfasta'], checkIfExists: true)

                reference_json.copyTo("${workDir}/vdj_reference/reference.json")
                reference_fasta.copyTo("${workDir}/vdj_reference/fasta/regions.fa")
                reference_suppfasta.copyTo("${workDir}/vdj_reference/fasta/supp_regions.fa")

                input[0] = [
                        [ id:'subsampled_5k_human_antiCMV_T_TBNK_connect_VDJ', single_end:false, strandedness:'auto' ], // meta map
                        [
                            file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_5k_cmvpos_tcells_vdj_fastq_1_gz'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_5k_cmvpos_tcells_vdj_fastq_2_gz'], checkIfExists: true)
                        ]
                    ]
                input[1] = file("${workDir}/vdj_reference/")
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.outs[0][1].findAll {  file(it).name.contains('.pb')  },
                    process.out.outs[0][1].findAll {  file(it).name.contains('metrics_summary.csv') },
                    process.out.outs[0][1].findAll {  file(it).name.contains('reference.json') },
                    process.out.outs[0][1].findAll {  file(it).name.contains('web_summary.html') }
                ).match() },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("cellranger - vdj - test_10x - stub") {

        options "-stub"

        when {
            process {
                """
                reference_json      = file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_vdj_ref_json']     , checkIfExists: true)
                reference_fasta     = file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_vdj_ref_fasta']    , checkIfExists: true)
                reference_suppfasta = file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_vdj_ref_suppfasta'], checkIfExists: true)

                reference_json.copyTo("${workDir}/vdj_reference/reference.json")
                reference_fasta.copyTo("${workDir}/vdj_reference/fasta/regions.fa")
                reference_suppfasta.copyTo("${workDir}/vdj_reference/fasta/supp_regions.fa")

                input[0] = [
                        [ id:'subsampled_5k_human_antiCMV_T_TBNK_connect_VDJ', single_end:false, strandedness:'auto' ], // meta map
                        [
                            file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_5k_cmvpos_tcells_vdj_fastq_1_gz'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_5k_cmvpos_tcells_vdj_fastq_2_gz'], checkIfExists: true)
                        ]
                    ]
                input[1] = file("${workDir}/vdj_reference/")
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
