// nf-core modules test cellranger/multi
nextflow_process {

    name "Test Process CELLRANGER_MULTI"
    script "../main.nf"
    config "./nextflow.config"
    process "CELLRANGER_MULTI"

    tag "modules"
    tag "modules_nfcore"
    tag "cellranger"
    tag "cellranger/multi"
    tag "cellranger/mkgtf"
    tag "cellranger/mkref"

    setup {

        run("CELLRANGER_MKGTF") {
            script "modules/nf-core/cellranger/mkgtf/main.nf"
            process {
                """
                input[0] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                """
            }
        }

        run("CELLRANGER_MKREF") {
            script "modules/nf-core/cellranger/mkref/main.nf"
            process {
                """
                input[0] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                input[1] = CELLRANGER_MKGTF.out.gtf
                input[2] = 'homo_sapiens_chr22_reference'
                """
            }
        }

    }

    test("cellranger - multi - 10k - PBMC") {

        when {
            process {
                """
                //
                // preparation
                //

                /***************************/
                /*** stage 10k PBMC data ***/
                /***************************/

                // stage B cell FASTQ test data
                bcell_fastqs_10k_pbmc = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/bcell/subsampled_sc5p_v2_hs_PBMC_10k_b_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/bcell/subsampled_sc5p_v2_hs_PBMC_10k_b_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def bcell_fastq_samplename_10k_pbmc = "subsampled_sc5p_v2_hs_PBMC_10k"

                // stage T cell FASTQ test data
                tcell_fastqs_10k_pbmc = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/tcell/subsampled_sc5p_v2_hs_PBMC_10k_t_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/tcell/subsampled_sc5p_v2_hs_PBMC_10k_t_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def tcell_fastq_samplename_10k_pbmc = "subsampled_sc5p_v2_hs_PBMC_10k"

                // stage 5' gene expression FASTQ test data
                fivepgex_fastqs_10k_pbmc = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/5gex/5gex/subsampled_sc5p_v2_hs_PBMC_10k_5gex_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/5gex/5gex/subsampled_sc5p_v2_hs_PBMC_10k_5gex_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def fivepgex_fastq_samplename_10k_pbmc = "subsampled_sc5p_v2_hs_PBMC_10k"

                // stage 5' feature barcode (antibody capture) FASTQ test data
                ab_fastqs_10k_pbmc = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/5gex/5fb/subsampled_sc5p_v2_hs_PBMC_10k_5fb_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/5gex/5fb/subsampled_sc5p_v2_hs_PBMC_10k_5fb_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def fivepab_fastq_samplename_10k_pbmc = "subsampled_sc5p_v2_hs_PBMC_10k"

                // stage feature barcode reference for antibody capture
                fb_reference_10k_pbmc = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/sc5p_v2_hs_PBMC_10k_multi_5gex_5fb_b_t_feature_ref.csv', checkIfExists: true)

                /*******************************/
                /*** end stage 10k PBMC data ***/
                /*******************************/

                /**********************************/
                /*** stage 10k PBMC w/ CMO data ***/
                /**********************************/

                //test_10x_10k_pbmc_cmo_gex2_fastq_1_gz
                //test_10x_10k_pbmc_cmo_gex2_fastq_2_gz

                // stage 3' CMO FASTQ test data
                cmo_fastqs_10k_pbmc_cmo = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/cmo/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_multiplexing_capture_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/cmo/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_multiplexing_capture_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def cmo_fastq_samplename_10k_pbmc_cmo = "subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K"

                // stage 3' gene expression FASTQ test data
                threepgex_fastqs_10k_pbmc_cmo = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/gex_1/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_gex_S2_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/gex_1/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_gex_S2_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def threepgex_fastq_samplename_10k_pbmc_cmo = "subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K"

                // stage feature barcode reference for antibody capture
                cmo_reference_10k_pbmc_cmo = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/10k_pbmc_cmo_count_feature_reference.csv', checkIfExists: true)

                // CMO needs a barcode file
                cmo_barcodes_csv = file("cmo_barcodes.csv")
                cmo_barcodes_csv.text = "sample_id,cmo_ids,description\\nPBMCs_human_1,CMO301,PBMCs_human_1\\nPBMCs_human_2,CMO302,PBMCs_human_2"


                /**************************************/
                /*** end stage 10k PBMC w/ CMO data ***/
                /**************************************/



                /*********************************/
                /*** stage 5k CMV+ T-cell data ***/
                /*********************************/

                // stage antibody capture data
                ab_fastqs_5k_cmvpos_tcells = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/ab/subsampled_5k_human_antiCMV_T_TBNK_connect_AB_S2_L004_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/ab/subsampled_5k_human_antiCMV_T_TBNK_connect_AB_S2_L004_R2_001.fastq.gz', checkIfExists: true)
                ]
                def ab_fastq_samplename_5k_cmvpos_tcells = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage GEX data
                gex_fastqs_5k_cmvpos_tcells = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/gex_1/subsampled_5k_human_antiCMV_T_TBNK_connect_GEX_1_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/gex_1/subsampled_5k_human_antiCMV_T_TBNK_connect_GEX_1_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def gex_fastq_samplename_5k_cmvpos_tcells = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage VDJ data
                vdj_fastqs_5k_cmvpos_tcells = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/vdj/subsampled_5k_human_antiCMV_T_TBNK_connect_VDJ_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/vdj/subsampled_5k_human_antiCMV_T_TBNK_connect_VDJ_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def vdj_fastq_samplename_5k_cmvpos_tcells = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage feature barcode reference for antibody capture
                fb_reference_5k_cmvpos_tcells = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/5k_human_antiCMV_T_TBNK_connect_Multiplex_count_feature_reference.csv', checkIfExists: true)

                /*************************************/
                /*** end stage 5k CMV+ T-cell data ***/
                /*************************************/


                /***************************/
                /*** stage VDJ reference ***/
                /***************************/

                vdj_json      = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/references/vdj/refdata-cellranger-vdj-GRCh38-alts-ensembl-5.0.0/reference.json', checkIfExists: true)
                vdj_fasta     = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/references/vdj/refdata-cellranger-vdj-GRCh38-alts-ensembl-5.0.0/fasta/regions.fa', checkIfExists: true)
                vdj_suppfasta = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/references/vdj/refdata-cellranger-vdj-GRCh38-alts-ensembl-5.0.0/fasta/supp_regions.fa', checkIfExists: true)

                // awkwardly restage VDJ ref to enforce directory structure expected by cellranger
                vdj_reference = file( "${workDir}/vdj_reference" )
                vdj_json.copyTo("${workDir}/vdj_reference/reference.json")
                vdj_fasta.copyTo("${workDir}/vdj_reference/fasta/regions.fa")
                vdj_suppfasta.copyTo("${workDir}/vdj_reference/fasta/supp_regions.fa")

                /*******************************/
                /*** end stage VDJ reference ***/
                /*******************************/


                // make an empty dummy file, for FASTQs
                empty_file = file("$workDir/EMPTY")
                empty_file.append("")


                // create empty channels to fill unused cellranger multi arguments
                // fastqs need a [ meta, ref ] structure
                // references just need a path
                ch_gex_fastqs            = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_vdjb_fastqs           = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_vdjt_fastqs           = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_ab_fastqs             = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_beam_fastqs           = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_cmo_fastqs            = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_crispr_fastqs         = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_gex_frna_probeset     = []
                ch_gex_targetpanel       = []
                ch_vdj_primer_index      = []
                ch_fb_reference          = []
                ch_beam_antigen_panel    = []
                ch_beam_control_panel    = []
                ch_cmo_reference         = []
                ch_cmo_barcodes          = []
                ch_cmo_sample_assignment = []
                ch_frna_sampleinfo       = []

                // collect references and fastq files for staging
                ch_gex_fastqs_10k_pbmc = Channel.of( fivepgex_fastqs_10k_pbmc )
                    .collect()
                    .map { reads -> [ [ id:fivepgex_fastq_samplename_10k_pbmc , options:[ "expect-cells":"1000", chemistry:"SC5P-PE", "create-bam":false, "no-secondary":true ] ], reads ] }
                ch_vdj_reference = Channel.of( vdj_reference )
                ch_bcell_fastqs_10k_pbmc  = Channel.of( bcell_fastqs_10k_pbmc )
                    .collect()
                    .map { reads -> [ [ id:bcell_fastq_samplename_10k_pbmc , options:[] ], reads ] }
                ch_tcell_fastqs_10k_pbmc  = Channel.of( tcell_fastqs_10k_pbmc )
                    .collect()
                    .map { reads -> [ [ id:tcell_fastq_samplename_10k_pbmc , options:[] ], reads ] }
                ch_ab_fastqs_10k_pbmc  = Channel.of( ab_fastqs_10k_pbmc )
                    .collect()
                    .map { reads -> [ [ id:fivepab_fastq_samplename_10k_pbmc  , options:[] ], reads ] }
                ch_ab_reference_10k_pbmc = Channel.of( fb_reference_10k_pbmc )

                //
                // execution
                //
                input[0]  = [ id:'subsampled_sc5p_v2_hs_PBMC_10k', single_end:false ]
                input[1]  = ch_gex_fastqs_10k_pbmc
                input[2]  = ch_bcell_fastqs_10k_pbmc
                input[3]  = ch_tcell_fastqs_10k_pbmc
                input[4]  = ch_ab_fastqs_10k_pbmc
                input[5]  = ch_beam_fastqs
                input[6]  = ch_cmo_fastqs
                input[7]  = ch_crispr_fastqs
                input[8]  = CELLRANGER_MKREF.out.reference
                input[9]  = ch_gex_frna_probeset
                input[10]  = ch_gex_targetpanel
                input[11] = ch_vdj_reference
                input[12] = ch_vdj_primer_index
                input[13] = ch_ab_reference_10k_pbmc
                input[14] = ch_beam_antigen_panel
                input[15] = ch_beam_control_panel
                input[16] = ch_cmo_reference
                input[17] = ch_cmo_barcodes
                input[18] = ch_cmo_sample_assignment
                input[19] = ch_frna_sampleinfo
                input[20] = false // default to false to guarantee renaming during test
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.outs[0][1].findAll {  file(it).name == 'all_contig.fasta'  },
                    process.out.outs[0][1].findAll {  file(it).name == 'all_contig.fasta.fai'  },
                    process.out.outs[0][1].findAll {  file(it).name == 'all_contig.fastq'  },
                    process.out.outs[0][1].findAll {  file(it).name.contains('consensus.bam.bai') },
                    process.out.outs[0][1].findAll {  file(it).name == 'regions.fa' },
                    process.out.outs[0][1].findAll {  file(it).name.contains('.json') }
                ).match() },
                { assert snapshot(process.out.versions).match("versions-PBMC") }
            )
        }

    }

    test("cellranger - multi - 10k - PBMC - with cmo") {

        when {
            process {
                """
                //
                // preparation: unfortunately have to repeat data load
                //

                /***************************/
                /*** stage 10k PBMC data ***/
                /***************************/

                // stage B cell FASTQ test data
                bcell_fastqs_10k_pbmc = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/bcell/subsampled_sc5p_v2_hs_PBMC_10k_b_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/bcell/subsampled_sc5p_v2_hs_PBMC_10k_b_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def bcell_fastq_samplename_10k_pbmc = "subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K"

                // stage T cell FASTQ test data
                tcell_fastqs_10k_pbmc = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/tcell/subsampled_sc5p_v2_hs_PBMC_10k_t_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/tcell/subsampled_sc5p_v2_hs_PBMC_10k_t_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def tcell_fastq_samplename_10k_pbmc = "subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K"

                // stage 5' gene expression FASTQ test data
                fivepgex_fastqs_10k_pbmc = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/5gex/5gex/subsampled_sc5p_v2_hs_PBMC_10k_5gex_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/5gex/5gex/subsampled_sc5p_v2_hs_PBMC_10k_5gex_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def fivepgex_fastq_samplename_10k_pbmc = "subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K"

                // stage 5' feature barcode (antibody capture) FASTQ test data
                ab_fastqs_10k_pbmc = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/5gex/5fb/subsampled_sc5p_v2_hs_PBMC_10k_5fb_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/5gex/5fb/subsampled_sc5p_v2_hs_PBMC_10k_5fb_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def fivepab_fastq_samplename_10k_pbmc = "subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K"

                // stage feature barcode reference for antibody capture
                fb_reference_10k_pbmc = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/sc5p_v2_hs_PBMC_10k_multi_5gex_5fb_b_t_feature_ref.csv', checkIfExists: true)

                /*******************************/
                /*** end stage 10k PBMC data ***/
                /*******************************/

                /**********************************/
                /*** stage 10k PBMC w/ CMO data ***/
                /**********************************/

                //test_10x_10k_pbmc_cmo_gex2_fastq_1_gz
                //test_10x_10k_pbmc_cmo_gex2_fastq_2_gz

                // stage 3' CMO FASTQ test data
                cmo_fastqs_10k_pbmc_cmo = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/cmo/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_multiplexing_capture_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/cmo/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_multiplexing_capture_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def cmo_fastq_samplename_10k_pbmc_cmo = "subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K"

                // stage 3' gene expression FASTQ test data
                threepgex_fastqs_10k_pbmc_cmo = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/gex_1/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_gex_S2_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/gex_1/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_gex_S2_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def threepgex_fastq_samplename_10k_pbmc_cmo = "subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K"

                // stage feature barcode reference for antibody capture
                cmo_reference_10k_pbmc_cmo = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/10k_pbmc_cmo_count_feature_reference.csv', checkIfExists: true)

                // CMO needs a barcode file
                cmo_barcodes_csv = file("cmo_barcodes.csv")
                cmo_barcodes_csv.text = "sample_id,cmo_ids,description\\nPBMCs_human_1,CMO301,PBMCs_human_1\\nPBMCs_human_2,CMO302,PBMCs_human_2"


                /**************************************/
                /*** end stage 10k PBMC w/ CMO data ***/
                /**************************************/



                /*********************************/
                /*** stage 5k CMV+ T-cell data ***/
                /*********************************/

                // stage antibody capture data
                ab_fastqs_5k_cmvpos_tcells = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/ab/subsampled_5k_human_antiCMV_T_TBNK_connect_AB_S2_L004_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/ab/subsampled_5k_human_antiCMV_T_TBNK_connect_AB_S2_L004_R2_001.fastq.gz', checkIfExists: true)
                ]
                def ab_fastq_samplename_5k_cmvpos_tcells = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage GEX data
                gex_fastqs_5k_cmvpos_tcells = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/gex_1/subsampled_5k_human_antiCMV_T_TBNK_connect_GEX_1_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/gex_1/subsampled_5k_human_antiCMV_T_TBNK_connect_GEX_1_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def gex_fastq_samplename_5k_cmvpos_tcells = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage VDJ data
                vdj_fastqs_5k_cmvpos_tcells = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/vdj/subsampled_5k_human_antiCMV_T_TBNK_connect_VDJ_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/vdj/subsampled_5k_human_antiCMV_T_TBNK_connect_VDJ_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def vdj_fastq_samplename_5k_cmvpos_tcells = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage feature barcode reference for antibody capture
                fb_reference_5k_cmvpos_tcells = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/5k_human_antiCMV_T_TBNK_connect_Multiplex_count_feature_reference.csv', checkIfExists: true)

                /*************************************/
                /*** end stage 5k CMV+ T-cell data ***/
                /*************************************/



                /***************************/
                /*** stage GEX reference ***/
                /***************************/

                // will build this as done in cellranger count test
                gex_ref_fasta    = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                gex_ref_gtf      = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                def gex_ref_name = "homo_sapiens_chr22_reference"

                /*******************************/
                /*** end stage GEX reference ***/
                /*******************************/


                /***************************/
                /*** stage VDJ reference ***/
                /***************************/

                vdj_json      = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/references/vdj/refdata-cellranger-vdj-GRCh38-alts-ensembl-5.0.0/reference.json', checkIfExists: true)
                vdj_fasta     = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/references/vdj/refdata-cellranger-vdj-GRCh38-alts-ensembl-5.0.0/fasta/regions.fa', checkIfExists: true)
                vdj_suppfasta = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/references/vdj/refdata-cellranger-vdj-GRCh38-alts-ensembl-5.0.0/fasta/supp_regions.fa', checkIfExists: true)

                // awkwardly restage VDJ ref to enforce directory structure expected by cellranger
                vdj_reference = file( "${workDir}/vdj_reference" )
                vdj_json.copyTo("${workDir}/vdj_reference/reference.json")
                vdj_fasta.copyTo("${workDir}/vdj_reference/fasta/regions.fa")
                vdj_suppfasta.copyTo("${workDir}/vdj_reference/fasta/supp_regions.fa")

                /*******************************/
                /*** end stage VDJ reference ***/
                /*******************************/


                // make an empty dummy file, for FASTQs
                empty_file = file("$workDir/EMPTY")
                empty_file.append("")


                // create empty channels to fill unused cellranger multi arguments
                // fastqs need a [ meta, ref ] structure
                // references just need a path
                ch_gex_fastqs            = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_vdjb_fastqs           = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_vdjt_fastqs           = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_ab_fastqs             = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_beam_fastqs           = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_cmo_fastqs            = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_crispr_fastqs         = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_gex_frna_probeset     = []
                ch_gex_targetpanel       = []
                ch_vdj_primer_index      = []
                ch_fb_reference          = []
                ch_beam_antigen_panel    = []
                ch_beam_control_panel    = []
                ch_cmo_reference         = []
                ch_cmo_barcodes          = []
                ch_cmo_sample_assignment = []
                ch_frna_sampleinfo       = []

                // collect references and fastq files for staging
                ch_gex_fastqs_10k_pbmc = Channel.of( fivepgex_fastqs_10k_pbmc )
                    .collect()
                    .map { reads -> [ [ id:fivepgex_fastq_samplename_10k_pbmc , options:[ "expect-cells":"1000", chemistry:"SC5P-PE", "create-bam":false, "no-secondary":true ] ], reads ] }
                ch_vdj_reference = Channel.of( vdj_reference )
                ch_bcell_fastqs_10k_pbmc  = Channel.of( bcell_fastqs_10k_pbmc )
                    .collect()
                    .map { reads -> [ [ id:bcell_fastq_samplename_10k_pbmc , options:[] ], reads ] }
                ch_tcell_fastqs_10k_pbmc  = Channel.of( tcell_fastqs_10k_pbmc )
                    .collect()
                    .map { reads -> [ [ id:tcell_fastq_samplename_10k_pbmc , options:[] ], reads ] }
                ch_ab_fastqs_10k_pbmc  = Channel.of( ab_fastqs_10k_pbmc )
                    .collect()
                    .map { reads -> [ [ id:fivepab_fastq_samplename_10k_pbmc  , options:[] ], reads ] }
                ch_ab_reference_10k_pbmc = Channel.of( fb_reference_10k_pbmc )

                ch_gex_fastqs_10k_pbmc_cmo = Channel.of( threepgex_fastqs_10k_pbmc_cmo )
                    .collect()
                    .map { reads -> [ [ id:threepgex_fastq_samplename_10k_pbmc_cmo , options:[ "expect-cells":"1000", chemistry:"SC3Pv3", "create-bam":false, "no-secondary":true ] ], reads ] }
                ch_vdj_reference = Channel.of( vdj_reference )
                ch_cmo_fastqs_10k_pbmc_cmo  = Channel.of( cmo_fastqs_10k_pbmc_cmo )
                    .collect()
                    .map { reads -> [ [ id:cmo_fastq_samplename_10k_pbmc_cmo, options:[] ], reads ] }
                ch_cmo_reference_10k_pbmc_cmo = Channel.of( cmo_reference_10k_pbmc_cmo )

                // empty vdj reference
                ch_vdj_ref_empty = []

                // CMO analysis needs barcodes
                ch_cmo_barcodes_10k_pbmc_cmo = Channel.fromPath( cmo_barcodes_csv )

                //
                // execution
                //
                input[0]  = [ id:'subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K', single_end:false ]
                input[1]  = ch_gex_fastqs_10k_pbmc
                input[2]  = ch_bcell_fastqs_10k_pbmc
                input[3]  = ch_tcell_fastqs_10k_pbmc
                input[4]  = ch_ab_fastqs_10k_pbmc
                input[5]  = ch_beam_fastqs
                input[6]  = ch_cmo_fastqs
                input[7]  = ch_crispr_fastqs
                input[8]  = CELLRANGER_MKREF.out.reference
                input[9]  = ch_gex_frna_probeset
                input[10]  = ch_gex_targetpanel
                input[11] = ch_vdj_reference
                input[12] = ch_vdj_primer_index
                input[13] = ch_ab_reference_10k_pbmc
                input[14] = ch_beam_antigen_panel
                input[15] = ch_beam_control_panel
                input[16] = ch_cmo_reference
                input[17] = ch_cmo_barcodes
                input[18] = ch_cmo_sample_assignment
                input[19] = ch_frna_sampleinfo
                input[20] = false // default to false to guarantee renaming during test
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.outs[0][1].findAll {  file(it).name == 'all_contig.fasta'  },
                    process.out.outs[0][1].findAll {  file(it).name == 'all_contig.fasta.fai'  },
                    process.out.outs[0][1].findAll {  file(it).name == 'all_contig.fastq'  },
                    process.out.outs[0][1].findAll {  file(it).name.contains('consensus.bam.bai') },
                    process.out.outs[0][1].findAll {  file(it).name == 'regions.fa' },
                    process.out.outs[0][1].findAll {  file(it).name.contains('.json') }
                ).match() },
                { assert snapshot(process.out.versions).match("versions-with-cmo") }
            )
        }

    }

    test("cellranger - multi - 10k - PBMC - with vdj") {

        when {
            process {
                """
                //
                // preparation: unfortunately have to repeat data load
                //

                /***************************/
                /*** stage 10k PBMC data ***/
                /***************************/

                // stage B cell FASTQ test data
                bcell_fastqs_10k_pbmc = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/bcell/subsampled_sc5p_v2_hs_PBMC_10k_b_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/bcell/subsampled_sc5p_v2_hs_PBMC_10k_b_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def bcell_fastq_samplename_10k_pbmc = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage T cell FASTQ test data
                tcell_fastqs_10k_pbmc = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/tcell/subsampled_sc5p_v2_hs_PBMC_10k_t_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/tcell/subsampled_sc5p_v2_hs_PBMC_10k_t_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def tcell_fastq_samplename_10k_pbmc = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage 5' gene expression FASTQ test data
                fivepgex_fastqs_10k_pbmc = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/5gex/5gex/subsampled_sc5p_v2_hs_PBMC_10k_5gex_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/5gex/5gex/subsampled_sc5p_v2_hs_PBMC_10k_5gex_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def fivepgex_fastq_samplename_10k_pbmc = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage 5' feature barcode (antibody capture) FASTQ test data
                ab_fastqs_10k_pbmc = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/5gex/5fb/subsampled_sc5p_v2_hs_PBMC_10k_5fb_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/fastqs/5gex/5fb/subsampled_sc5p_v2_hs_PBMC_10k_5fb_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def fivepab_fastq_samplename_10k_pbmc = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage feature barcode reference for antibody capture
                fb_reference_10k_pbmc = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc/sc5p_v2_hs_PBMC_10k_multi_5gex_5fb_b_t_feature_ref.csv', checkIfExists: true)

                /*******************************/
                /*** end stage 10k PBMC data ***/
                /*******************************/

                /**********************************/
                /*** stage 10k PBMC w/ CMO data ***/
                /**********************************/

                //test_10x_10k_pbmc_cmo_gex2_fastq_1_gz
                //test_10x_10k_pbmc_cmo_gex2_fastq_2_gz

                // stage 3' CMO FASTQ test data
                cmo_fastqs_10k_pbmc_cmo = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/cmo/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_multiplexing_capture_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/cmo/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_multiplexing_capture_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def cmo_fastq_samplename_10k_pbmc_cmo = "subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K"

                // stage 3' gene expression FASTQ test data
                threepgex_fastqs_10k_pbmc_cmo = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/gex_1/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_gex_S2_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/fastqs/gex_1/subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K_1_gex_S2_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def threepgex_fastq_samplename_10k_pbmc_cmo = "subsampled_SC3_v3_NextGem_DI_CellPlex_Human_PBMC_10K"

                // stage feature barcode reference for antibody capture
                cmo_reference_10k_pbmc_cmo = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/10k_pbmc_cmo/10k_pbmc_cmo_count_feature_reference.csv', checkIfExists: true)

                // CMO needs a barcode file
                cmo_barcodes_csv = file("cmo_barcodes.csv")
                cmo_barcodes_csv.text = "sample_id,cmo_ids,description\\nPBMCs_human_1,CMO301,PBMCs_human_1\\nPBMCs_human_2,CMO302,PBMCs_human_2"


                /**************************************/
                /*** end stage 10k PBMC w/ CMO data ***/
                /**************************************/



                /*********************************/
                /*** stage 5k CMV+ T-cell data ***/
                /*********************************/

                // stage antibody capture data
                ab_fastqs_5k_cmvpos_tcells = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/ab/subsampled_5k_human_antiCMV_T_TBNK_connect_AB_S2_L004_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/ab/subsampled_5k_human_antiCMV_T_TBNK_connect_AB_S2_L004_R2_001.fastq.gz', checkIfExists: true)
                ]
                def ab_fastq_samplename_5k_cmvpos_tcells = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage GEX data
                gex_fastqs_5k_cmvpos_tcells = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/gex_1/subsampled_5k_human_antiCMV_T_TBNK_connect_GEX_1_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/gex_1/subsampled_5k_human_antiCMV_T_TBNK_connect_GEX_1_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def gex_fastq_samplename_5k_cmvpos_tcells = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage VDJ data
                vdj_fastqs_5k_cmvpos_tcells = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/vdj/subsampled_5k_human_antiCMV_T_TBNK_connect_VDJ_S1_L001_R1_001.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/fastqs/vdj/subsampled_5k_human_antiCMV_T_TBNK_connect_VDJ_S1_L001_R2_001.fastq.gz', checkIfExists: true)
                ]
                def vdj_fastq_samplename_5k_cmvpos_tcells = "subsampled_5k_human_antiCMV_T_TBNK_connect"

                // stage feature barcode reference for antibody capture
                fb_reference_5k_cmvpos_tcells = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/5k_cmvpos_tcells/5k_human_antiCMV_T_TBNK_connect_Multiplex_count_feature_reference.csv', checkIfExists: true)

                /*************************************/
                /*** end stage 5k CMV+ T-cell data ***/
                /*************************************/



                /***************************/
                /*** stage GEX reference ***/
                /***************************/

                // will build this as done in cellranger count test
                gex_ref_fasta    = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                gex_ref_gtf      = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                def gex_ref_name = "homo_sapiens_chr22_reference"

                /*******************************/
                /*** end stage GEX reference ***/
                /*******************************/


                /***************************/
                /*** stage VDJ reference ***/
                /***************************/

                vdj_json      = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/references/vdj/refdata-cellranger-vdj-GRCh38-alts-ensembl-5.0.0/reference.json', checkIfExists: true)
                vdj_fasta     = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/references/vdj/refdata-cellranger-vdj-GRCh38-alts-ensembl-5.0.0/fasta/regions.fa', checkIfExists: true)
                vdj_suppfasta = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/references/vdj/refdata-cellranger-vdj-GRCh38-alts-ensembl-5.0.0/fasta/supp_regions.fa', checkIfExists: true)

                // awkwardly restage VDJ ref to enforce directory structure expected by cellranger
                vdj_reference = file( "${workDir}/vdj_reference" )
                vdj_json.copyTo("${workDir}/vdj_reference/reference.json")
                vdj_fasta.copyTo("${workDir}/vdj_reference/fasta/regions.fa")
                vdj_suppfasta.copyTo("${workDir}/vdj_reference/fasta/supp_regions.fa")

                /*******************************/
                /*** end stage VDJ reference ***/
                /*******************************/


                // make an empty dummy file, for FASTQs
                empty_file = file("$workDir/EMPTY")
                empty_file.append("")


                // create empty channels to fill unused cellranger multi arguments
                // fastqs need a [ meta, ref ] structure
                // references just need a path
                ch_gex_fastqs            = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_vdjb_fastqs           = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_vdjt_fastqs           = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_ab_fastqs             = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_beam_fastqs           = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_cmo_fastqs            = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_crispr_fastqs         = Channel.value( [ [ id:"EMPTY", options:[] ], empty_file ] )
                ch_gex_frna_probeset     = []
                ch_gex_targetpanel       = []
                ch_vdj_primer_index      = []
                ch_fb_reference          = []
                ch_beam_antigen_panel    = []
                ch_beam_control_panel    = []
                ch_cmo_reference         = []
                ch_cmo_barcodes          = []
                ch_cmo_sample_assignment = []
                ch_frna_sampleinfo       = []

                // collect references and fastq files for staging
                ch_gex_fastqs_10k_pbmc = Channel.of( fivepgex_fastqs_10k_pbmc )
                    .collect()
                    .map { reads -> [ [ id:gex_fastq_samplename_5k_cmvpos_tcells , options:[ "expect-cells":"1000", chemistry:"SC5P-PE", "create-bam":false, "no-secondary":true ] ], reads ] }
                ch_vdj_reference = Channel.of( vdj_reference )
                ch_bcell_fastqs_10k_pbmc  = Channel.of( bcell_fastqs_10k_pbmc )
                    .collect()
                    .map { reads -> [ [ id:gex_fastq_samplename_5k_cmvpos_tcells , options:[] ], reads ] }
                ch_tcell_fastqs_10k_pbmc  = Channel.of( tcell_fastqs_10k_pbmc )
                    .collect()
                    .map { reads -> [ [ id:tcell_fastq_samplename_10k_pbmc , options:[] ], reads ] }
                ch_ab_fastqs_10k_pbmc  = Channel.of( ab_fastqs_10k_pbmc )
                    .collect()
                    .map { reads -> [ [ id:fivepab_fastq_samplename_10k_pbmc  , options:[] ], reads ] }
                ch_ab_reference_10k_pbmc = Channel.of( fb_reference_10k_pbmc )

                ch_gex_fastqs_5k_cmvpos_tcells = Channel.of( gex_fastqs_5k_cmvpos_tcells )
                    .collect()
                    .map { reads -> [ [ id:gex_fastq_samplename_5k_cmvpos_tcells , options:[ "expect-cells":"1000", chemistry:"SC5P-R2", "create-bam":false, "no-secondary":true ] ], reads ] }
                ch_vdj_reference = Channel.of( vdj_reference )
                ch_vdj_fastqs_5k_cmvpos_tcells  = Channel.of( vdj_fastqs_5k_cmvpos_tcells )
                    .collect()
                    .map { reads -> [ [ id:vdj_fastq_samplename_5k_cmvpos_tcells, options:[] ], reads ] }
                ch_fb_reference_5k_cmvpos_tcells = Channel.of( fb_reference_5k_cmvpos_tcells )
                ch_ab_fastqs_5k_cmvpos_tcells  = Channel.of( ab_fastqs_5k_cmvpos_tcells )
                    .collect()
                    .map { reads -> [ [ id:ab_fastq_samplename_5k_cmvpos_tcells, options:[] ], reads ] }

                //
                // execution
                //
                input[0]  = [ id:'subsampled_5k_human_antiCMV_T_TBNK_connect', single_end:false ]
                input[1]  = ch_gex_fastqs_10k_pbmc
                input[2]  = ch_bcell_fastqs_10k_pbmc
                input[3]  = ch_tcell_fastqs_10k_pbmc
                input[4]  = ch_ab_fastqs_10k_pbmc
                input[5]  = ch_beam_fastqs
                input[6]  = ch_cmo_fastqs
                input[7]  = ch_crispr_fastqs
                input[8]  = CELLRANGER_MKREF.out.reference
                input[9]  = ch_gex_frna_probeset
                input[10]  = ch_gex_targetpanel
                input[11] = ch_vdj_reference
                input[12] = ch_vdj_primer_index
                input[13] = ch_ab_reference_10k_pbmc
                input[14] = ch_beam_antigen_panel
                input[15] = ch_beam_control_panel
                input[16] = ch_cmo_reference
                input[17] = ch_cmo_barcodes
                input[18] = ch_cmo_sample_assignment
                input[19] = ch_frna_sampleinfo
                input[20] = false // default to false to guarantee renaming during test
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.outs[0][1].findAll {  file(it).name == 'all_contig.fasta'  },
                    process.out.outs[0][1].findAll {  file(it).name == 'all_contig.fasta.fai'  },
                    process.out.outs[0][1].findAll {  file(it).name == 'all_contig.fastq'  },
                    process.out.outs[0][1].findAll {  file(it).name.contains('consensus.bam.bai') },
                    process.out.outs[0][1].findAll {  file(it).name == 'regions.fa' },
                    process.out.outs[0][1].findAll {  file(it).name.contains('.json') }
                ).match() },
                { assert snapshot(process.out.versions).match("versions-with-vdj") }
            )
        }

    }

}
