// nf-core modules test cellranger/mkvdjref
nextflow_process {

    name "Test Process CELLRANGER_MKVDJREF"
    script "../main.nf"
    config "./nextflow.config"

    process "CELLRANGER_MKVDJREF"

    tag "modules"
    tag "modules_nfcore"
    tag "cellranger"
    tag "cellranger/mkvdjref"
    tag "gunzip"

    test("homo_sapiens - vdj - reference") {

        setup {
            run("GUNZIP", alias: "GUNZIP_FASTA") {
                script "modules/nf-core/gunzip/main.nf"
                process {
                    """
                    input[0] = [
                        [ id: 'gencode_v38_ch22' ],
                        file("http://ftp.ensembl.org/pub/release-103/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.chromosome.22.fa.gz", checkIfExists: true)
                    ]
                    """
                }
            }

            run("GUNZIP", alias: "GUNZIP_GTF") {
                script "modules/nf-core/gunzip/main.nf"
                process {
                    """
                    input[0] = [
                        [ id: 'gencode_v38' ],
                        file("http://ftp.ensembl.org/pub/release-103/gtf/homo_sapiens/Homo_sapiens.GRCh38.103.gtf.gz", checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = GUNZIP_FASTA.out.gunzip.map{ it[1] }
                input[1] = GUNZIP_GTF.out.gunzip.map{ it[1] }
                input[2] = []
                input[3] = "homo_sapiens_chr2_reference"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - vdj - reference - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = []
                input[1] = []
                input[2] = []
                input[3] = "homo_sapiens_reference"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
