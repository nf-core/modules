
nextflow_process {

    name "Test Process GATK4_COLLECTSVEVIDENCE"
    script "../main.nf"
    process "GATK4_COLLECTSVEVIDENCE"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4"
    tag "gatk4/collectsvevidence"

    test("test-gatk4-collectsvevidence-cram") {

        when {
            process {
                """
                input[0] = [
				[ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
				    [],
				    []
				]
				input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
				input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
				input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					path(process.out.split_read_evidence[0][1]).linesGzip[0],
					file(process.out.split_read_evidence_index[0][1]).name,
					path(process.out.paired_end_evidence[0][1]).linesGzip[0],
					file(process.out.paired_end_evidence_index[0][1]).name,
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-gatk4-collectsvevidence-bam") {

        when {
            process {
                """
                input[0] = [
				[ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
				    [],
				    []
				]
				input[1] = []
				input[2] = []
				input[3] = []

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					path(process.out.split_read_evidence[0][1]).linesGzip[0],
					file(process.out.split_read_evidence_index[0][1]).name,
					path(process.out.paired_end_evidence[0][1]).linesGzip[0],
					file(process.out.paired_end_evidence_index[0][1]).name,
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-gatk4-collectsvevidence-allele-count") {

        when {
            process {
                """
                input[0] = [
				[ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test_haplotcaller.cnn.vcf.gz', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test_haplotcaller.cnn.vcf.gz.tbi', checkIfExists: true)
				]
				input[1] = []
				input[2] = []
				input[3] = []

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					path(process.out.split_read_evidence[0][1]).linesGzip[0],
					file(process.out.split_read_evidence_index[0][1]).name,
					path(process.out.paired_end_evidence[0][1]).linesGzip[0],
					file(process.out.paired_end_evidence_index[0][1]).name,
					path(process.out.site_depths[0][1]).linesGzip[0],
					file(process.out.site_depths_index[0][1]).name,
					process.out.versions
					).match()
				}
            )
        }
    }

}
