
nextflow_process {

    name "Test Process GATK4_PRINTREADS"
    script "../main.nf"
    process "GATK4_PRINTREADS"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4"
    tag "gatk4/printreads"

    test("test-gatk4-printreads-bam") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
				]

                input[1] = [ [ id:'genome' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
				]

                input[2] = [ [ id:'genome' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
				]

                input[3] = [ [ id:'genome' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict', checkIfExists: true)
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					bam(process.out.bam[0][1]).getReadsMD5(),
					process.out.cram,
					process.out.sam,
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-gatk4-printreads-cram") {

        when {
            process {
                """
                input[0] = [
				[ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true)
				]

                input[1] = [ [ id:'genome' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
				]

                input[2] = [ [ id:'genome' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
				]

                input[3] = [ [ id:'genome' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists: true)
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					process.out.bam,
					bam(process.out.cram[0][1]).getHeaderMD5(),
					process.out.sam,
					process.out.versions
					).match()
				}
            )
        }
    }

}
