
nextflow_process {

    name "Test Process GATK4_LEFTALIGNANDTRIMVARIANTS"
    script "../main.nf"
    process "GATK4_LEFTALIGNANDTRIMVARIANTS"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4"
    tag "gatk4/leftalignandtrimvariants"

    test("test-gatk4-leftalignandtrimvariants-interval") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true),
				]
				input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
				input[2] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
				input[3] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					path(process.out.vcf[0][1]).vcf.summary,
					file(process.out.tbi[0][1]).name,
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-gatk4-leftalignandtrimvariants-no-interval") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true),
				[]
				]
				input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
				input[2] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
				input[3] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					path(process.out.vcf[0][1]).vcf.variantsMD5,
					file(process.out.tbi[0][1]).name,
					process.out.versions
					).match()
				}
            )
        }
    }

}
