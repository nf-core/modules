nextflow_process {

    name "Test Process GATK4_ASEREADCOUNTER"
    tag "modules_nfcore"
    tag "modules"
    tag "gatk4"
    tag "gatk4/asereadcounter"
    script "modules/nf-core/gatk4/asereadcounter/main.nf"
    process "GATK4_ASEREADCOUNTER"

    test("Should run without failures") {

        when {
            process {
                """
                input[0] = [ 
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path +'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path +'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path +'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path +'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'reference' ], // meta map
                    file(params.modules_testdata_base_path +'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'reference' ], // meta map
                    file(params.modules_testdata_base_path +'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [
                    [ id:'reference' ], // meta map
                    file(params.modules_testdata_base_path +'genomics/sarscov2/genome/genome.dict', checkIfExists: true)
                ]
                input[4] = [ 
                    file(params.modules_testdata_base_path +'genomics/sarscov2/genome/picard/targets.interval_list', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }

}
