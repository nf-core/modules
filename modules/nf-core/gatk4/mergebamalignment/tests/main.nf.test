
nextflow_process {

    name "Test Process GATK4_MERGEBAMALIGNMENT"
    script "../main.nf"
    process "GATK4_MERGEBAMALIGNMENT"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4"
    tag "gatk4/mergebamalignment"

    test("test-gatk4-mergebamalignment") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.unaligned.bam', checkIfExists: true)
				]
				input[1] = [ [ id:'genome' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
				]
				input[2] = [ [ id:'genome' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict', checkIfExists: true)
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					bam(process.out.bam[0][1]).getReadsMD5(),
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-gatk4-mergebamalignment-stubs") {
        options '-stub'
        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.unaligned.bam', checkIfExists: true)
				]
				input[1] = [ [ id:'genome' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
				]
				input[2] = [ [ id:'genome' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict', checkIfExists: true)
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
