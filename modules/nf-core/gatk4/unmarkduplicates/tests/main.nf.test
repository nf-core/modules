nextflow_process {

    name "Test Process GATK4_UNMARKDUPLICATES"
    script "../main.nf"
    process "GATK4_UNMARKDUPLICATES"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4"
    tag "gatk4/unmarkduplicates"
    tag "gatk4/markduplicates"


    test("sarscov2 - bam") {

        setup {
            run("GATK4_MARKDUPLICATES") {
                script "../../../gatk4/markduplicates/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                    ]
                    input[1] = []
                    input[2] = []
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = GATK4_MARKDUPLICATES.out.bam.groupTuple(by:[0])
                """
            }
        }


        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - multiple bam") {

        setup {
            run("GATK4_MARKDUPLICATES") {
                script "../../../gatk4/markduplicates/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true)
                        ]
                    ]
                    input[1] = []
                    input[2] = []
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = GATK4_MARKDUPLICATES.out.bam.groupTuple(by:[0])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.bam).match("multi bam") },
                { assert snapshot(process.out.bai).match("multi bai") },
                { assert snapshot(process.out.versions).match("multi versions") },
            )
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"

        setup {
            run("GATK4_MARKDUPLICATES") {
                script "../../../gatk4/markduplicates/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                    ]
                    input[1] = []
                    input[2] = []
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = GATK4_MARKDUPLICATES.out.bam.groupTuple(by:[0])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
