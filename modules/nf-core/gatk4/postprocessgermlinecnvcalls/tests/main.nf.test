nextflow_process {

    name "Test Process GATK4_POSTPROCESSGERMLINECNVCALLS"
    script "../main.nf"
    config "./nextflow.config"
    process "GATK4_POSTPROCESSGERMLINECNVCALLS"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4"
    tag "gatk4/bedtointervallist"
    tag "gatk4/collectreadcounts"
    tag "gatk4/determinegermlinecontigploidy"
    tag "gatk4/germlinecnvcaller"
    tag "gatk4/postprocessgermlinecnvcalls"

    setup {
        run("GATK4_BEDTOINTERVALLIST") {
            script "../../bedtointervallist/main.nf"
            process {
                """
                intervals = [[ id:'test' ], file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.multi_intervals.bed", checkIfExists: true)]
                dict = [ [ id:'test' ], file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.dict", checkIfExists: true)]

                input = [intervals, dict]
                """
            }
        }
        run("GATK4_COLLECTREADCOUNTS"){
            script "../../collectreadcounts/main.nf"
            process {
                """
                input_bam = Channel.of([
                [ id:'test', single_end:false ], // meta map
                file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true),
                file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai", checkIfExists: true),
                file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.multi_intervals.bed", checkIfExists: true),
                ],
                [
                [ id:'test2', single_end:false ], // meta map
                file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam", checkIfExists: true),
                file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai", checkIfExists: true),
                file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.multi_intervals.bed", checkIfExists: true)
                ])

                fasta = Channel.of([ [ id:'test' ], file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true)]).collect()
                fai   = Channel.of([ [ id:'test' ], file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta.fai", checkIfExists: true)]).collect()
                dict  = Channel.of([ [ id:'test' ], file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.dict", checkIfExists: true)]).collect()

                input = [input_bam, fasta, fai, dict]
                """
            }
        }
        run("GATK4_DETERMINEGERMLINECONTIGPLOIDY", alias: "GATK4_DETERMINEGERMLINECONTIGPLOIDY_COHORT") {
            script "../../determinegermlinecontigploidy/main.nf"
            process {
                """
                bed = Channel.value(file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.multi_intervals.bed", checkIfExists: true))
                input = [
                    GATK4_COLLECTREADCOUNTS.out.tsv
                        .map({ meta, tsv -> [[id:'test'], tsv ] })
                        .groupTuple()
                        .combine(bed)
                        .map({ meta, counts, bed -> [ meta, counts, bed, [] ]}),
                    [[],[]],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gatk/contig_ploidy_priors_table.tsv", checkIfExists: true)
                ]
                """
            }
        }
        run("GATK4_GERMLINECNVCALLER", alias: "GATK4_GERMLINECNVCALLER_COHORT") {
            script "../../germlinecnvcaller/main.nf"
            process {
                """
                input[0] = GATK4_COLLECTREADCOUNTS.out.tsv
                        .map({ meta, tsv -> [[id:'test'], tsv ] })
                        .groupTuple()
                        .combine(GATK4_DETERMINEGERMLINECONTIGPLOIDY_COHORT.out.calls)
                        .combine(GATK4_BEDTOINTERVALLIST.out.interval_list)
                        .map({ meta, counts, meta2, calls, meta3, bed -> [ meta, counts, bed, calls, [] ]})
                """
            }
        }
        run("GATK4_GERMLINECNVCALLER", alias: "GATK4_GERMLINECNVCALLER_CASE") {
            script "../../germlinecnvcaller/main.nf"
            process {
                """
                input[0] = GATK4_COLLECTREADCOUNTS.out.tsv
                        .first()
                        .combine(GATK4_DETERMINEGERMLINECONTIGPLOIDY_COHORT.out.calls)
                        .combine(GATK4_GERMLINECNVCALLER_COHORT.out.cohortmodel)
                        .map({ meta, counts, meta2, calls, meta3, model -> [ [id:'test'], counts, [], calls, model ]})
                """
            }
        }
    }

    test("homo sapiens - counts") {

        when {
            process {
                """
                input[0] = GATK4_GERMLINECNVCALLER_COHORT.out.cohortcalls
                        .combine(GATK4_GERMLINECNVCALLER_COHORT.out.cohortmodel)
                        .combine(GATK4_DETERMINEGERMLINECONTIGPLOIDY_COHORT.out.calls)
                        .map({ meta, calls, meta2, model, meta3, ploidy -> [[id:'test'], calls, model, ploidy ]})
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    file(process.out.intervals[0][1]).name,
                    file(process.out.segments[0][1]).name,
                    file(process.out.denoised[0][1]).name,
                ).match() }
            )
        }

    }

    test("homo sapiens - counts - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = GATK4_GERMLINECNVCALLER_COHORT.out.cohortcalls
                        .combine(GATK4_GERMLINECNVCALLER_COHORT.out.cohortmodel)
                        .combine(GATK4_DETERMINEGERMLINECONTIGPLOIDY_COHORT.out.calls)
                        .map({ meta, calls, meta2, model, meta3, ploidy -> [[id:'test'], calls, model, ploidy ]})
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    file(process.out.intervals[0][1]).name,
                    file(process.out.segments[0][1]).name,
                    file(process.out.denoised[0][1]).name,
                ).match() }
            )
        }

    }

}
