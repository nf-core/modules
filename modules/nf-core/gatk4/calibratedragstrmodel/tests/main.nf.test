
nextflow_process {

    name "Test Process GATK4_CALIBRATEDRAGSTRMODEL"
    script "../main.nf"
    process "GATK4_CALIBRATEDRAGSTRMODEL"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4"
    tag "gatk4/calibratedragstrmodel"

    test("test-gatk4-calibratedragstrmodel-bam") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
				]
				input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
				input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
				input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists: true)
				input[4] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome_strtablefile.zip', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					file(process.out.dragstr_model[0][1]).readLines()[3..7],
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-gatk4-calibratedragstrmodel-cram") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
				]
				input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
				input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
				input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists: true)
				input[4] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome_strtablefile.zip', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					file(process.out.dragstr_model[0][1]).readLines()[3..7],
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-gatk4-calibratedragstrmodel-beds") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
				]
				input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
				input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
				input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists: true)
				input[4] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome_strtablefile.zip', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					file(process.out.dragstr_model[0][1]).readLines()[3..7],
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-gatk4-calibratedragstrmodel-gzipped-beds") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
				]
				input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
				input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
				input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists: true)
				input[4] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome_strtablefile.zip', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					file(process.out.dragstr_model[0][1]).readLines()[3..7],
					process.out.versions
					).match()
				}
            )
        }
    }

}
