nextflow_process {

    name "Test Process GATK4_PRINTSVEVIDENCE"
    script "../main.nf"
    config "./nextflow.config"
    process "GATK4_PRINTSVEVIDENCE"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4"
    tag "gatk4/collectsvevidence"
    tag "gatk4/printsvevidence"

    setup {
        run("GATK4_COLLECTSVEVIDENCE") {
            script "../../collectsvevidence/main.nf"
            process {
            """
            input[0] = Channel.of(
                [
                    [ id:'normal' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai", checkIfExists: true),
                    [],
                    []
                ],
                [
                    [ id:'tumor' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai", checkIfExists: true),
                    [],
                    []
                ]
            )
            input[1] = file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true)
            input[2] = file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta.fai", checkIfExists: true)
            input[3] = file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.dict", checkIfExists: true)
            """
            }
        }
    }

    test("homo sapiens - bam") {

        when {
            process {
                """
                files = GATK4_COLLECTSVEVIDENCE.out.paired_end_evidence
                indices = GATK4_COLLECTSVEVIDENCE.out.paired_end_evidence_index
                input_svevidence = files
                    .combine(indices, by:0)
                    .map({ meta, file, index ->
                        [[id:'test'], file, index ]
                    })
                    .groupTuple()

                input[0] = input_svevidence
                input[1] = []
                input[2] = file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true)
                input[3] = file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta.fai", checkIfExists: true)
                input[4] = file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.dict", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo sapiens - bam - stub") {

        options "-stub"

        when {
            process {
                """
                files = GATK4_COLLECTSVEVIDENCE.out.paired_end_evidence
                indices = GATK4_COLLECTSVEVIDENCE.out.paired_end_evidence_index
                input_svevidence = files
                    .combine(indices, by:0)
                    .map({ meta, file, index ->
                        [[id:'test'], file, index ]
                    })
                    .groupTuple()

                input[0] = input_svevidence
                input[1] = []
                input[2] = file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true)
                input[3] = file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta.fai", checkIfExists: true)
                input[4] = file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.dict", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
