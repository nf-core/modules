// nf-core modules test gatk4/haplotypecaller
nextflow_process {

    name "Test Process GATK4_HAPLOTYPECALLER"
    script "../main.nf"
    process "GATK4_HAPLOTYPECALLER"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4"
    tag "gatk4/haplotypecaller"

    test("homo_sapiens - [bam, bai] - fasta - fai - dict") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                    [],
                    []
                ]
                input[1] = [ [ id:'test_fa' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                input[2] = [ [ id:'test_fai' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true) ]
                input[3] = [ [ id:'test_dict' ], file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true) ]
                input[4] = [ [], [] ]
                input[5] = [ [], [] ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                // { assert snapshot(process.out).match() }, // Unstable hashes
                { assert snapshot(file(process.out.vcf.get(0).get(1)).name).match("output/gatk4/test.vcf.gz") },
                { assert snapshot(file(process.out.tbi.get(0).get(1)).name).match("output/gatk4/test.vcf.gz.tbi") },
                { assert snapshot(file(process.out.versions.get(0)).name).match("output/gatk4/versions.yml") },
            )
        }

    }

    test("homo_sapiens - [cram, crai] - fasta - fai - dict") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true),
                    [],
                    []
                ]
                input[1] = [ [ id:'test_fa' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                input[2] = [ [ id:'test_fai' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true) ]
                input[3] = [ [ id:'test_dict' ], file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true) ]
                input[4] = [ [], [] ]
                input[5] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                // { assert snapshot(process.out).match() }, // Unstable hashes
                { assert snapshot(file(process.out.vcf.get(0).get(1)).name).match("output/gatk4/test.vcf.gz") },
                { assert snapshot(file(process.out.tbi.get(0).get(1)).name).match("output/gatk4/test.vcf.gz.tbi") },
                { assert snapshot(file(process.out.versions.get(0)).name).match("output/gatk4/versions.yml") },
            )
        }

    }

    test("homo_sapiens - [cram, crai] - fasta - fai - dict - sites - sites_tbi") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true),
                    [],
                    []
                ]
                input[1] = [ [ id:'test_fa' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                input[2] = [ [ id:'test_fai' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true) ]
                input[3] = [ [ id:'test_dict' ], file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true) ]
                input[4] = [ [ id:'test_sites' ], file(params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz'], checkIfExists: true) ]
                input[5] = [ [ id:'test_sites_tbi' ], file(params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz_tbi'], checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                // { assert snapshot(process.out).match() }, // Unstable hashes
                { assert snapshot(file(process.out.vcf.get(0).get(1)).name).match("output/gatk4/test.vcf.gz") },
                { assert snapshot(file(process.out.tbi.get(0).get(1)).name).match("output/gatk4/test.vcf.gz.tbi") },
                { assert snapshot(file(process.out.versions.get(0)).name).match("output/gatk4/versions.yml") },
            )
        }

    }

    test("homo_sapiens - [cram, crai, dragstr_model] - fasta - fai - dict - sites - sites_tbi") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true),
                    [],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_dragstrmodel'], checkIfExists: true)
                ]
                input[1] = [ [ id:'test_fa' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                input[2] = [ [ id:'test_fai' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true) ]
                input[3] = [ [ id:'test_dict' ], file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true) ]
                input[4] = [ [ id:'test_sites' ], file(params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz'], checkIfExists: true) ]
                input[5] = [ [ id:'test_sites_tbi' ], file(params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz_tbi'], checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                // { assert snapshot(process.out).match() }, // Unstable hashes
                { assert snapshot(file(process.out.vcf.get(0).get(1)).name).match("output/gatk4/test.vcf.gz") },
                { assert snapshot(file(process.out.tbi.get(0).get(1)).name).match("output/gatk4/test.vcf.gz.tbi") },
                { assert snapshot(file(process.out.versions.get(0)).name).match("output/gatk4/versions.yml") },
            )
        }

    }

}
