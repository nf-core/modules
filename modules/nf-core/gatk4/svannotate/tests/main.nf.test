nextflow_process {

    name "Test Process GATK4_SVANNOTATE"
    script "../main.nf"
    process "GATK4_SVANNOTATE"

    tag "modules"
    tag "modules_nfcore"
    tag "manta"
    tag "manta/germline"
    tag "gatk4"
    tag "gatk4/svannotate"

    setup {
        run("MANTA_GERMLINE") {
            script "../../../manta/germline/main.nf"
            process {
                """
                input[0] = Channel.of([ [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true), file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true), [], []])
                input[1] = Channel.value([ [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = Channel.value([ [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)])
                input[3] = []
                """
            }
        }
    }

    test("homo sapiens - defaults") {

        when {
            process {
                """
                input[0] = MANTA_GERMLINE.out.diploid_sv_vcf.join(MANTA_GERMLINE.out.diploid_sv_vcf_tbi).map({ meta, vcf, tbi -> [ meta, vcf, tbi, [], [] ]})
                input[1] = [[:],[]]
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.vcf.collect { meta, vcf -> [ meta, file(vcf.toString()).name]},
                    process.out.tbi.collect { meta, tbi -> [ meta, file(tbi.toString()).name] },
                    process.out.versions
                ).match() }
            )
        }
    }


    test("homo sapiens - all") {

        when {
            process {
                """
                input[0] = MANTA_GERMLINE.out.diploid_sv_vcf
                    .join(MANTA_GERMLINE.out.diploid_sv_vcf_tbi)
                    .map { meta, vcf, tbi -> [
                        meta,
                        vcf,
                        tbi,
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed'),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.multi_intervals.bed'),
                    ] }
                input[1] = [[id:'fasta'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                input[2] = [[id:'fai'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)]
                input[3] = [[id:'dict'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists: true)]
                input[4] = [[id:'gtf'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome_minimal.gtf', checkIfExists: true)]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.vcf.collect { meta, vcf -> [ meta, file(vcf.toString()).name]},
                    process.out.tbi.collect { meta, tbi -> [ meta, file(tbi.toString()).name] },
                    process.out.versions
                ).match() }
            )
        }
    }

    test("homo sapiens - defaults - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = MANTA_GERMLINE.out.diploid_sv_vcf.join(MANTA_GERMLINE.out.diploid_sv_vcf_tbi).map({ meta, vcf, tbi -> [ meta, vcf, tbi, [], [] ]})
                input[1] = [[:],[]]
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
