nextflow_process {

    name "Test Process GATK4_GENOMICSDBIMPORT"
    script "../main.nf"
    process "GATK4_GENOMICSDBIMPORT"

    tag "modules"
    tag "modules_nfcore"
    tag "untar"
    tag "gatk4"
    tag "gatk4/genomicsdbimport"

    test("test_gatk4_genomicsdbimport_create_genomicsdb") {

        when {
            process {
                """
                // [meta, vcf, tbi, interval, interval_value, workspace ]
                input[0] = [ [ id:'test'],
                       file(params.test_data['homo_sapiens']['illumina']['test_genome_vcf_gz'], checkIfExists: true) ,
                       file(params.test_data['homo_sapiens']['illumina']['test_genome_vcf_gz_tbi'], checkIfExists: true) ,
                       file(params.test_data['homo_sapiens']['genome']['genome_interval_list'], checkIfExists: true) ,
                       [] ,
                       [] ]
                // run_intlist
                input[1] = false
                // run_updatewspace
                input[2] = false
                // input_map
                input[3] = false

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("test_gatk4_genomicsdbimport_get_intervalslist") {

        setup {
            run("UNTAR") {
                script ../../untar/main.nf
                process {
                    """
                        input[0] = [ [], file(params.test_data['homo_sapiens']['illumina']['test_genomicsdb_tar_gz'], checkIfExists: true) ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel.of([ [id:"test"], [], [], [], []]).combine(UNTAR.out.untar.map{ it[1] })
                // run_intlist
                input[1] = true
                // run_updatewspace
                input[2] = false
                // input_map
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("test_gatk4_genomicsdbimport_update_genomicsdb") {

        setup {
            run("UNTAR") {
                script ../../untar/main.nf
                process {
                    """
                        input[0] = [ [], file(params.test_data['homo_sapiens']['illumina']['test_genomicsdb_tar_gz'], checkIfExists: true) ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel.of([ [id:"test"], file( params.test_data['homo_sapiens']['illumina']['test2_genome_vcf_gz'] , checkIfExists: true), file( params.test_data['homo_sapiens']['illumina']['test2_genome_vcf_gz_tbi'] , checkIfExists: true), [], []]).combine(UNTAR.out.untar.map{ it[1] })
                // run_intlist
                input[1] = false
                // run_updatewspace
                input[2] = true
                // input_map
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("test_gatk4_genomicsdbimport_stub") {

        options "-stub"

        when {
            process {
                """
                // [meta, vcf, tbi, interval, interval_value, workspace ]
                input[0] = [ [ id:'test'],
                       file(params.test_data['homo_sapiens']['illumina']['test_genome_vcf_gz'], checkIfExists: true) ,
                       file(params.test_data['homo_sapiens']['illumina']['test_genome_vcf_gz_tbi'], checkIfExists: true) ,
                       file(params.test_data['homo_sapiens']['genome']['genome_interval_list'], checkIfExists: true) ,
                       [] ,
                       [] ]
                // run_intlist
                input[1] = false
                // run_updatewspace
                input[2] = false
                // input_map
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
