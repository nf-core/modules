nextflow_process {

    name "Test Process GATK4_CREATEREADCOUNTPANELOFNORMALS"
    script "../main.nf"
    config "./nextflow.config"
    process "GATK4_CREATEREADCOUNTPANELOFNORMALS"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4"
    tag "gatk4/preprocessintervals"
    tag "gatk4/collectreadcounts"
    tag "gatk4/createreadcountpanelofnormals"

    setup {
        run("GATK4_PREPROCESSINTERVALS") {
            script "../../preprocessintervals/main.nf"
            process {
            """
            fasta = Channel.of([ [ id:'test' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta'],checkIfExists: true)]).collect()
            fai   = Channel.of([ [ id:'test' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'],checkIfExists: true)]).collect()
            dict  = Channel.of([ [ id:'test' ], file(params.test_data['homo_sapiens']['genome']['genome_dict'],checkIfExists: true)]).collect()

            input[0] = fasta
            input[1] = fai
            input[2] = dict
            input[3] = [[],[]]
            input[4] = [[],[]]
            """
            }
        }
        run("GATK4_COLLECTREADCOUNTS") {
            script "../../collectreadcounts/main.nf"
            process {
            """
            intervals = GATK4_PREPROCESSINTERVALS.out.interval_list.map{ meta, list -> list}
            input[0] = Channel.of([
                    [ id:'test', single_end:false ],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                    ],
                    [
                    [ id:'test2', single_end:false ],
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_sorted_bam_bai'], checkIfExists: true),
                    ])
                    .combine(intervals)
            input[1] = Channel.of([ [ id:'test' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta'],checkIfExists: true)]).collect()
            input[2] = Channel.of([ [ id:'test' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'],checkIfExists: true)]).collect()
            input[3] = Channel.of([ [ id:'test' ], file(params.test_data['homo_sapiens']['genome']['genome_dict'],checkIfExists: true)]).collect()
            """
            }
        }
    }

    test("homo sapiens - bam") {
        when {
            process {
                """
                input[0] = GATK4_COLLECTREADCOUNTS.out.tsv
                    .map({ meta, tsv -> [[id:'test'], tsv ] })
                    .groupTuple()
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    file(process.out.pon[0][1]).name
                ).match() }
            )
        }

    }

    test("homo sapiens - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = GATK4_COLLECTREADCOUNTS.out.tsv
                    .map({ meta, tsv -> [[id:'test'], tsv ] })
                    .groupTuple()
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
