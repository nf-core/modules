nextflow_process {

    name "Test Process OPENMS_IDRIPPER"
    script "../main.nf"
    process "OPENMS_IDRIPPER"

    tag "modules"
    tag "modules_nfcore"
    tag "openms"
    tag "openms/idmerger"
    tag "openms/idripper"

    test("proteomics - split - idxml") {
        setup {
            run("OPENMS_IDMERGER") {
                script "../../idmerger/main.nf"
                process {
                    """
                    input[0] = Channel.fromList([
                        tuple([id:'test'],
                            [
                             file(params.test_data['proteomics']['openms']['idxml1'], checkIfExists: true),
                             file(params.test_data['proteomics']['openms']['idxml2'], checkIfExists: true)
                            ]
                        )
                    ])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = OPENMS_IDMERGER.out.idxml
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("proteomics - split - idxml - stub") {

        options "-stub"

        setup {
            run("OPENMS_IDMERGER") {
                script "../../idmerger/main.nf"
                process {
                    """
                    input[0] = Channel.fromList([
                        tuple([id:'test'],
                            [
                             file(params.test_data['proteomics']['openms']['idxml1'], checkIfExists: true),
                             file(params.test_data['proteomics']['openms']['idxml2'], checkIfExists: true)
                            ]
                        )
                    ])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = OPENMS_IDMERGER.out.idxml
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
