nextflow_process {

    name "Test Process OPENMS_IDMAPPER"
    script "../main.nf"
    process "OPENMS_IDMAPPER"

    tag "modules"
    tag "modules_nfcore"
    tag "openms"
    tag "openms/idmapper"

    test("proteomics - mapper - featurexml") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.modules_testdata_base_path +'/proteomics/openms/HepG2_rep1_small.idXML', checkIfExists: true),
                    file(params.modules_testdata_base_path +'/proteomics/openms/HepG2_rep2_small.featureXML', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

test("proteomics - mapper - consensusxml") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.modules_testdata_base_path +'/proteomics/openms/HepG2_rep1_small.idXML', checkIfExists: true),
                    file(params.modules_testdata_base_path +'/proteomics/openms/HepG2_rep2_small.consensusXML', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("proteomics - mapper - stub") {
        options = "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.modules_testdata_base_path +'/proteomics/openms/HepG2_rep1_small.idXML', checkIfExists: true),
                    file(params.modules_testdata_base_path +'/proteomics/openms/HepG2_rep2_small.featureXML', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
