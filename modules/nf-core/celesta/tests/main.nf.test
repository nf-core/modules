nextflow_process {

    name "Test Process CELESTA"
    script "../main.nf"
    process "CELESTA"

    tag "modules"
    tag "modules_nfcore"
    tag "celesta"

    test("celesta - csv") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.test_data['imaging']['downstream']['celesta']['data'], checkIfExists: true)
                    ]
                input[1] = [
                    file(params.test_data['imaging']['downstream']['celesta']['signature'], checkIfExists: true)
                    ]
                input[2] = [
                    file(params.test_data['imaging']['downstream']['celesta']['thresholds'], checkIfExists: true)
                    ]
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.celltypes},
                { assert process.out.quality},
                { assert snapshot(process.out.versions).match('versions') }
            )
        }

    }

    test("celesta - csv - stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:

                input[0] = [
                    [ id:'test' ],
                    file(params.test_data['imaging']['downstream']['celesta']['data'], checkIfExists: true)
                    ]
                input[1] = [
                    file(params.test_data['imaging']['downstream']['celesta']['signature'], checkIfExists: true)
                    ]
                input[2] = [
                    file(params.test_data['imaging']['downstream']['celesta']['thresholds'], checkIfExists: true)
                    ]
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}