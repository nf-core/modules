nextflow_process {

    name "Test Process EIGENSTRATDATABASETOOLS_EIGENSTRATSNPCOVERAGE"
    config "./nextflow.config"
    script "../main.nf"
    process "EIGENSTRATDATABASETOOLS_EIGENSTRATSNPCOVERAGE"
   
    tag "modules"
    tag "modules_nfcore"
    tag "sequencetools"
    tag "sequencetools/pileupcaller"
    tag "eigenstratdatabasetools"
    tag "eigenstratdatabasetools/eigenstratsnpcoverage"

    test("homo_sapiens - eigenstrat") {
        setup {
            run("SEQUENCETOOLS_PILEUPCALLER") {
                script "../../../sequencetools/pileupcaller/main.nf"            
                process {
                    """
                    input[0] = [
                        [id:'test', single_end:false],// meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/mpileup/test.mpileup.gz', checkIfExists:true)
                    ]
                    input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/chr_21.snp', checkIfExists:true)
                    input[2] = []
                    """
                }
            }
        }
        when {
            params {
                module_args = "-j test.json"
                pileupcaller_args = "--majorityCall --sampleNames test --eigenstratOut test"
            }
            process {
                """
                input[0] = SEQUENCETOOLS_PILEUPCALLER.out.eigenstrat
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("homo_sapiens - eigenstrat - output json - stub") {

        options '-stub'
        tag "stub"

        when {
            params {
                module_args = "-j test.json"
                pileupcaller_args = "--majorityCall --sampleNames test --eigenstratOut test"
            }
            process {
                """
                input[0] = [[id: "test"], [], [], []]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - eigenstrat - output tsv only - stub") {
        tag "stub"

        options '-stub'

        when {
            params {
                module_args = ""
                pileupcaller_args = "--majorityCall --sampleNames test --eigenstratOut test"
            }
            process {
                """
                input[0] = [[id: "test"], [], [], []]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
}