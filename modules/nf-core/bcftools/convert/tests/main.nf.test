nextflow_process {

    name "Test Process BCFTOOLS_CONVERT"
    script "../main.nf"
    process "BCFTOOLS_CONVERT"

    tag "modules"
    tag "modules_nfcore"
    tag "bcftools"
    tag "bcftools/convert"


    test("homo_sapiens - vcf1, tbi, [], fasta - to bcf") {
        config "./nextflow_bcf.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test3' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("homo_sapiens - vcf1, tbi, [], fasta - to hap") {

        config "./nextflow_hap.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test3' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - vcf1, tbi, bed, fasta - to gvcf") {

        config "./nextflow_gvcf.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test3' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - vcf1, tbi, [], fasta - to bcf - stub") {
        options '-stub'
        config "./nextflow_bcf.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test3' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("homo_sapiens - vcf1, tbi, [], fasta - to hap - stub") {
        options '-stub'
        config "./nextflow_hap.config"
        tag "stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test3' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - vcf1, tbi, bed, fasta - to gvcf - stub") {
        options '-stub'
        config "./nextflow_gvcf.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test3' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
}