nextflow_process {

    name "Test Process BCFTOOLS_PLUGINSCATTER"
    script "../main.nf"
    process "BCFTOOLS_PLUGINSCATTER"

    tag "modules"
    tag "modules_nfcore"
    tag "bcftools"
    tag "bcftools/pluginscatter"

    test("homo_sapiens - sites per chunk") {

        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = 100
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()
                }
            )
        }

    }

    test("homo_sapiens - sites per chunk - vcf_gz_index") {

        config "./vcf_gz_index.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = 100
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.vcf.collect { meta, files -> files.collect { it instanceof Map ? it : file(it).name } },
                    process.out.csi.collect { meta, files -> files.collect { it instanceof Map ? it : file(it).name } },
                    process.out.tbi.collect { meta, files -> files.collect { it instanceof Map ? it : file(it).name } },
                    process.out.versions
                ).match("vcf_gz_index") },
                { assert process.out.csi[0][1][0] =~ ".*/test_vcf0.vcf.gz.csi" }
            )
        }

    }

    test("homo_sapiens - sites per chunk - vcf_gz_index_csi") {

        config "./vcf_gz_index_csi.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = 100
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.vcf.collect { meta, files -> files.collect { it instanceof Map ? it : file(it).name } },
                    process.out.csi.collect { meta, files -> files.collect { it instanceof Map ? it : file(it).name } },
                    process.out.tbi.collect { meta, files -> files.collect { it instanceof Map ? it : file(it).name } },
                    process.out.versions
                ).match("vcf_gz_index_csi") },
                { assert process.out.csi[0][1][0] =~ ".*/test_vcf0.vcf.gz.csi" }
            )
        }

    }

    test("homo_sapiens - sites per chunk - vcf_gz_index_tbi") {

        config "./vcf_gz_index_tbi.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = 100
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.vcf.collect { meta, files -> files.collect { it instanceof Map ? it : file(it).name } },
                    process.out.csi.collect { meta, files -> files.collect { it instanceof Map ? it : file(it).name } },
                    process.out.tbi.collect { meta, files -> files.collect { it instanceof Map ? it : file(it).name } },
                    process.out.versions
                ).match("vcf_gz_index_tbi") },
                { assert process.out.tbi[0][1][0] =~ ".*/test_vcf0.vcf.gz.tbi" }
            )
        }

    }

    test("homo_sapiens - scatter") {

        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = []
                input[2] = "chr21"
                input[3] = []
                input[4] = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ]
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()
                }
            )
        }

    }

    test("homo_sapiens - scatter file") {

        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = []
                input[2] = []
                input[3] = Channel.of("chr21:6000000-41743940\tfile1", "chr21:41743941-46661900\tfile2")
                    .collectFile(name:"scatter.tsv", newLine:true)
                input[4] = []
                input[5] = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()
                }
            )
        }

    }

    test("homo_sapiens - sites per chunk - stub") {

        config "./nextflow.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = 100
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()
                }
            )
        }

    }

    test("homo_sapiens - scatter - stub") {

        config "./nextflow.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = []
                input[2] = "chr21"
                input[3] = []
                input[4] = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ]
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()
                }
            )
        }

    }

    test("homo_sapiens - scatter file - stub") {

        config "./nextflow.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = []
                input[2] = []
                input[3] = Channel.of("chr21:6000000-41743940\tfile1", "chr21:41743941-46661900\tfile2")
                    .collectFile(name:"scatter.tsv", newLine:true)
                input[4] = []
                input[5] = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()
                }
            )
        }

    }

    test("homo_sapiens - sites per chunk - vcf_gz_index - stub") {

        config "./vcf_gz_index.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = 100
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert process.out.csi[0][1][0] =~ ".*/test_vcf0.vcf.gz.csi" }
            )
        }

    }

    test("homo_sapiens - sites per chunk - vcf_gz_index_csi - stub") {

        config "./vcf_gz_index_csi.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = 100
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert process.out.csi[0][1][0] =~ ".*/test_vcf0.vcf.gz.csi" }
            )
        }

    }

    test("homo_sapiens - sites per chunk - vcf_gz_index_tbi - stub") {

        config "./vcf_gz_index_tbi.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = 100
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert process.out.tbi[0][1][0] =~ ".*/test_vcf0.vcf.gz.tbi" }
            )
        }

    }

}