nextflow_process {

    name "Test Process BCFTOOLS_MERGE"
    script "../main.nf"
    process "BCFTOOLS_MERGE"

    tag "modules"
    tag "modules_nfcore"
    tag "bcftools"
    tag "bcftools/merge"

    test("test_bcftools_merge") {
        config "./merge.config"
        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                    [ file(params.test_data['sarscov2']['illumina']['test2_vcf_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test3_vcf_gz'], checkIfExists: true) ],
                    [ file(params.test_data['sarscov2']['illumina']['test2_vcf_gz_tbi'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test3_vcf_gz_tbi'], checkIfExists: true) ],
                    []
                ]
                input[1] = [[], []]
                input[2] = [[], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.merged_variants.collect{ path(it[1]).vcf.summary }
                    ).match()
                }
            )
        }

    }

    test("test_bcftools_merge_bed") {
        config "./merge.config"
        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                    [ file(params.test_data['sarscov2']['illumina']['test2_vcf_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test3_vcf_gz'], checkIfExists: true) ],
                    [ file(params.test_data['sarscov2']['illumina']['test2_vcf_gz_tbi'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test3_vcf_gz_tbi'], checkIfExists: true) ],
                    file(params.test_data['sarscov2']['genome']['test_bed'], checkIfExists: true)
                ]
                input[1] = [[], []]
                input[2] = [[], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.merged_variants.collect{ path(it[1]).vcf.summary }
                    ).match()
                }
            )
        }

    }

    test("test_bcftools_merge_gvcf") {
        config "./merge_gvcf.config"
        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                    [ file(params.test_data['homo_sapiens']['illumina']['test_genome_vcf_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test2_genome_vcf_gz'], checkIfExists: true) ],
                    [ file(params.test_data['homo_sapiens']['illumina']['test_genome_vcf_gz_tbi'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test2_genome_vcf_gz_tbi'], checkIfExists: true) ],
                    []
                ]
                input[1] = [[ id:'genome' ],
                    file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[2] = [[ id:'genome' ],
                    file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.merged_variants.collect{ path(it[1]).vcf.summary }
                    ).match()
                }
            )
        }

    }

}