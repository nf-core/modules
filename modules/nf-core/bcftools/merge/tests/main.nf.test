nextflow_process {

    name "Test Process BCFTOOLS_MERGE"
    script "../main.nf"
    process "BCFTOOLS_MERGE"

    tag "modules"
    tag "modules_nfcore"
    tag "bcftools"
    tag "bcftools/merge"

    test("sarscov2 - [vcf, tbi], [], [], []") {

        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf") },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).vcf.variantsMD5,
                    process.out.versions,
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - vcf output") {

        config "./vcf.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf") },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).md5,
                    process.out.versions,
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - vcf.gz output") {

        config "./vcf_gz.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf.gz") },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).vcf.variantsMD5,
                    process.out.versions,
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - bcf output") {

        config "./bcf.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("bcf") },
                { assert snapshot(
                    file(process.out.vcf.get(0).get(1)).name,
                    process.out.versions,
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - bcf.gz output") {

        config "./bcf_gz.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("bcf.gz") },
                { assert snapshot(
                    file(process.out.vcf.get(0).get(1)).name,
                    process.out.versions,
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - vcf.gz output - index") {

        config "./vcf_gz_index.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf.gz") },
                { assert process.out.index.get(0).get(1).endsWith("csi") },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).vcf.variantsMD5,
                    file(process.out.index.get(0).get(1)).name,
                    process.out.versions,
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - vcf.gz output - csi index") {

        config "./vcf_gz_index_csi.config"

        when {

            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf.gz") },
                { assert process.out.index.get(0).get(1).endsWith("csi") },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).vcf.variantsMD5,
                    file(process.out.index.get(0).get(1)).name,
                    process.out.versions,
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - vcf.gz output - tbi index") {

        config "./vcf_gz_index_tbi.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf.gz") },
                { assert process.out.index.get(0).get(1).endsWith("tbi") },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).vcf.variantsMD5,
                    file(process.out.index.get(0).get(1)).name,
                    process.out.versions,
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], bed") {

        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf") },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).md5,
                    process.out.versions,
                ).match() }
            )
        }

    }

    test("homo_sapiens - [vcf, tbi], fasta, fai, bed  - vcf.gz output") {

        config "./nextflow.gvcf.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test2.genome.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test2.genome.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ]
                input[2] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true) ]
                ]
                input[3] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf.gz") },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).vcf.variantsMD5,
                    process.out.versions,
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - one sample") {

        config "./nextflow.config"
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true)
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf") },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).md5,
                    process.out.versions,
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - stub") {

        options "-stub"
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf") },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - vcf output - stub") {

        options "-stub"
        config "./vcf.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf") },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - vcf.gz output - stub") {

        options "-stub"
        config "./vcf_gz.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf.gz") },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - bcf output - stub") {

        options "-stub"
        config "./bcf.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("bcf") },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - bcf.gz output - stub") {

        options "-stub"
        config "./bcf_gz.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("bcf.gz") },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - vcf.gz output - index - stub") {

        options "-stub"
        config "./vcf_gz_index.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf.gz") },
                { assert process.out.index.get(0).get(1).endsWith("csi") },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - vcf.gz output - csi index - stub") {

        options "-stub"
        config "./vcf_gz_index_csi.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf.gz") },
                { assert process.out.index.get(0).get(1).endsWith("csi") },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - vcf.gz output - tbi index - stub") {

        options "-stub"
        config "./vcf_gz_index_tbi.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf.gz") },
                { assert process.out.index.get(0).get(1).endsWith("tbi") },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], bed - stub") {

        options "-stub"
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf") },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - [vcf, tbi], fasta, fai, bed  - vcf.gz output - stub") {

        options "-stub"
        config "./nextflow.gvcf.config"
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test2.genome.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz.tbi', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test2.genome.vcf.gz.tbi', checkIfExists: true),
                    ]
                ]
                input[1] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ]
                input[2] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true) ]
                ]
                input[3] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf.gz") },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - one sample - stub") {

        options "-stub"
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true)
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf.get(0).get(1).endsWith("vcf") },
                { assert snapshot(process.out).match() }
            )
        }

    }
}
