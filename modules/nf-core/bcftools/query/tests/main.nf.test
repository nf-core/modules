nextflow_process {

    name "Test Process BCFTOOLS_QUERY"
    script "../main.nf"
    process "BCFTOOLS_QUERY"

    tag "modules"
    tag "modules_nfcore"
    tag "bcftools"
    tag "bcftools/query"

    config "./nextflow.config"

    test("sarscov2 - [vcf, tbi], [], [], []") {

        when {
            process {
                """
                input[0] = [ 
                    [ id:'out' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.output,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], vcf, tsv, []") {

        when {
            process {
                """
                input[0] = [ 
                    [ id:'out' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.targets.tsv.gz', checkIfExists: true)
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.output,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, tbi], [], [], [] - stub") {

        when {
            process {
                """
                input[0] = [ 
                    [ id:'out' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.output[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }

    }

}
