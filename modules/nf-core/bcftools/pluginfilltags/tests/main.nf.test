nextflow_process {

    name "Test Process BCFTOOLS_PLUGINFILLTAGS"
    script "../main.nf"
    config "./nextflow.config"
    process "BCFTOOLS_PLUGINFILLTAGS"

    tag "modules"
    tag "modules_nfcore"
    tag "bcftools"
    tag "bcftools/pluginfilltags"

    tag "bcftools/query"
    tag "gawk"

    test("homo_sapiens - vcf") {
        when {
            params {
                bcftools_pluginfilltags_args  = "--write-index"
                bcftools_pluginfilltags_args2 = "-t AC,AN"
                bcftools_query_args = ""
            }
            process {
                """
                input[0] = Channel.of([
                    [id:'NA12878', region:"chr22:16570065-16609999"],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/vcf/NA12878.chr22.1X.vcf.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/vcf/NA12878.chr22.1X.vcf.gz.csi", checkIfExists: true),
                ])
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    file(process.out.csi[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("homo_sapiens - vcf - samples") {
        setup {
            run ("BCFTOOLS_QUERY") {
                script "../../query"
                process {
                    """
                    input[0] = Channel.of([
                        [id:'1000GP'],
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists:true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists:true),
                    ])
                    input[1] = []
                    input[2] = []
                    input[3] = []
                    """
                }
            }
            run ("GAWK") {
                script "../../../gawk"
                process {
                    """
                    prog_file = Channel.of('BEGIN { FS = OFS = "\t"}; {  if (\$1 ~ /^HG/) print \$1, "HG"; else print \$1, "NA" }').collectFile(name:"program.awk")
                    input[0] = BCFTOOLS_QUERY.out.output
                    input[1] = prog_file
                    input[2] = false
                    """
                }
            }
        }
        when {
            params {
                bcftools_pluginfilltags_args  = "--write-index"
                bcftools_pluginfilltags_args2 = "-t HWE"
                bcftools_query_args = "--list-samples"
            }
            process {
                """
                input[0] = Channel.of([
                    [id:'1000GP'],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists:true),
                ])
                input[1] = []
                input[2] = []
                input[3] = GAWK.out.output.map{ it[1] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    file(process.out.csi[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("homo_sapiens - vcf -- stub") {
        options "-stub"
        when {
            params {
                bcftools_pluginfilltags_args  = "-W=tbi  --output-type b"
                bcftools_pluginfilltags_args2 = ""
                bcftools_query_args = "--list-samples"
            }
            process {
                """
                input[0] = Channel.of([
                    [id:'NA12878', region:"chr22:16570065-16609999"],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/vcf/NA12878.chr22.1X.vcf.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/vcf/NA12878.chr22.1X.vcf.gz.csi", checkIfExists: true),
                ])
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }

    }

}
