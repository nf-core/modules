nextflow_process {

    name "Test Process BCFTOOLS_STATS"
    script "../main.nf"
    process "BCFTOOLS_STATS"

    tag "modules"
    tag "modules_nfcore"
    tag "bcftools"
    tag "bcftools/stats"

    test("sarscov2 - vcf_gz") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_vcf_gz'], checkIfExists: true),
                            []]
                input[1] = [ [], [] ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = [ [], [] ]
                input[5] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match("version") },
                { assert snapshot(file(process.out.stats.get(0).get(1)).readLines()[0..5]).match() },
            )
        }

    }

    test("sarscov2 - vcf_gz - regions") {

        when {
            process {
                """
                 input[0] = [ [ id:'regions_test' ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_vcf_gz'], checkIfExists: true),
                            file(params.test_data['sarscov2']['illumina']['test_vcf_gz_tbi'], checkIfExists: true)]
                input[1] = [ [id:'regions_test'], 
                            file(params.test_data['sarscov2']['illumina']['test3_vcf_gz'], checkIfExists: true) ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = [ [], [] ]
                input[5] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match("regions_version") },
                { assert snapshot(file(process.out.stats.get(0).get(1)).readLines()[0..5]).match() },
            )
        }

    }
    
    test("sarscov2 - vcf_gz - targets") {

        when {
            process {
                """
                 input[0] = [ [ id:'targets_test' ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_vcf_gz'], checkIfExists: true),
                            [] ]
                input[1] = [ [], [] ]
                input[2] = [ [id:'targets_test'], 
                            file(params.test_data['sarscov2']['illumina']['test2_vcf_targets_tsv_gz'], checkIfExists: true) ]
                input[3] = [ [], [] ]
                input[4] = [ [], [] ]
                input[5] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match("targets_version") },
                { assert snapshot(file(process.out.stats.get(0).get(1)).readLines()[0..5]).match() },
            )
        }

    }

    test("sarscov2 - vcf_gz - exons") {

        when {
            process {
                """
                 input[0] = [ [ id:'exon_test' ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_vcf_gz'], checkIfExists: true),
                            [] ]
                input[1] = [ [], [] ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = [ [id: "exon_test"], 
                            file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/bcftools/stats/exons.tsv.gz") ]
                input[5] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match("exon_version") },
                { assert snapshot(file(process.out.stats.get(0).get(1)).readLines()[0..5]).match() },
            )
        }

    }

    test("sarscov2 - vcf_gz - reference") {

        when {
            process {
                """
                 input[0] = [ [ id:'ref_test' ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_vcf_gz'], checkIfExists: true),
                            [] ]
                input[1] = [ [], [] ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = [ [], [] ]
                input[5] = [ [id: 'ref_test'], 
                            file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match("ref_version") },
                { assert snapshot(file(process.out.stats.get(0).get(1)).readLines()[0..5]).match() },
            )
        }

    }


    test("sarscov2 - vcf_gz - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_vcf_gz'], checkIfExists: true),
                            []]
                input[1] = [ [], [] ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = [ [], [] ]
                input[5] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}