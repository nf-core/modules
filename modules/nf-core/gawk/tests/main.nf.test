nextflow_process {

    name "Test Process GAWK"
    script "../main.nf"
    process "GAWK"

    tag "modules"
    tag "modules_nfcore"
    tag "gawk"

    config "./nextflow.config"

    test("Convert fasta to bed") {
        when {
            params {
                gawk_suffix = "bed"
                gawk_args2  = '\'BEGIN {FS="\t"}; {print \$1 FS "0" FS \$2}\''
            }
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Convert fasta to bed with program file") {
        when {
            params {
                gawk_suffix = "bed"
                gawk_args2  = ""
            }
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[1] = Channel.of('BEGIN {FS="\t"}; {print \$1 FS "0" FS \$2}').collectFile(name:"program.txt")
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Extract first column from multiple files") {
        when {
            params {
                gawk_suffix = "bed"
                gawk_args2  = ""
            }
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [file(params.modules_testdata_base_path + 'generic/txt/hello.txt', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'generic/txt/species_names.txt', checkIfExists: true)]
                ]
                input[1] = Channel.of('BEGIN {FS=" "}; {print \$1}').collectFile(name:"program.txt")
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Unzip files before processing") {
        when {
            params {
                gawk_suffix = "bed"
                gawk_args2  = ""
            }
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/NA12878_chrM.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz', checkIfExists: true)]
                ]
                input[1] = Channel.of('/^#CHROM/ { print \$1, \$10 }').collectFile(name:"column_header.txt")
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Compress after processing") {
        when {
            params {
                gawk_suffix = "txt.gz"
                gawk_args2  = '\'BEGIN {FS="\t"}; {print \$1 FS "0" FS \$2}\''
            }
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Input and output files are similar") {
        when {
            params {
                gawk_suffix = "txt"
                gawk_args2  = ""
            }
            process {
                """
                input[0] = [
                    [ id:'hello' ], // meta map
                    [file(params.modules_testdata_base_path + 'generic/txt/hello.txt', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'generic/txt/species_names.txt', checkIfExists: true)]
                ]
                input[1] = Channel.of('BEGIN {FS=" "}; {print \$1}').collectFile(name:"program.txt")
                """
            }
        }

        then {
            assertAll(
                { assert process.failed },
                { assert process.errorReport.contains("Input and output names are the same, set prefix in module configuration to disambiguate!") }
            )
        }
    }
}