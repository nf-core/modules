nextflow_process {

    name "Test Process MACS3_CALLPEAK"
    script "../main.nf"
    process "MACS3_CALLPEAK"

    tag "modules"
    tag "modules_nfcore"
    tag "macs3"
    tag "macs3/callpeak"

    test("homo_sapiens - callpeak - bed") {

        when {
            config "./bed.config"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bed/alz.ccs.fl.NEB_5p--NEB_Clontech_3p.flnc.clustered.singletons.merged.aligned_tc.bed', checkIfExists: true) ],
                    []
                ]
                input[1] = 4000
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - callpeak - bam") {

        when {
            config "./bam.config"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam', checkIfExists: true) ],
                    []
                ]
                input[1] = 40000
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - callpeak - control - bam") {

        when {
            config "./bam.config"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam', checkIfExists: true) ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.name.sorted.bam', checkIfExists: true) ]
                ]
                input[1] = 40000
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ],
                    []
                ]
                input[1] = 40000
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
