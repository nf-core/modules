nextflow_process {

    name "Test Process SURVIVOR_SIMSV"
    script "../main.nf"
    process "SURVIVOR_SIMSV"

    tag "modules"
    tag "modules_nfcore"
    tag "survivor"
    tag "survivor/simsv"

    test("homo sapiens - fasta") {

        when {
            process {
                """
                input[0] = [
                [ id:'fasta'], // meta map
                file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                input[1] = [
                [ id:'fai'], // meta map
                file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)]
                input[2] = [[], []]
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
    test("homo sapiens - fasta - parameters") {
        when {
            process {
                """
            // generate parameter file
            parameters = Channel.of(
'''PARAMETER FILE: DO JUST MODIFY THE VALUES AND KEEP THE SPACES!
DUPLICATION_minimum_length: 100
DUPLICATION_maximum_length: 10000
DUPLICATION_number: 3
INDEL_minimum_length: 20
INDEL_maximum_length: 500
INDEL_number: 1
TRANSLOCATION_minimum_length: 1000
TRANSLOCATION_maximum_length: 3000
TRANSLOCATION_number: 0
INVERSION_minimum_length: 600
INVERSION_maximum_length: 800
INVERSION_number: 4
INV_del_minimum_length: 600
INV_del_maximum_length: 800
INV_del_number: 2
INV_dup_minimum_length: 600
INV_dup_maximum_length: 800
INV_dup_number: 2'''
                ).collectFile(name:"parameters.txt", newLine:true)
                .map { [[id:"parameters"], it] }

                input[0] = [
                [ id:'fasta'], // meta map
                file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                input[1] = [
                [ id:'fai'], // meta map
                file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)]
                input[2] = parameters
                input[3] = 1
                input[4] = 1
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.vcf[0][1]).name, // unstable
                    file(process.out.insertions[0][1]).name, // unstable
                    file(process.out.fasta[0][1]).name, // unstable
                    process.out.versions
                    ).match()
                }
            )
        }

    }
    test("homo sapiens - fasta - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                [ id:'fasta'], // meta map
                file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                input[1] = [
                [ id:'fai'], // meta map
                file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)]
                input[2] = [[], []]
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
