nextflow_process {

    name "Test Process DUPRADAR"
    script "../main.nf"
    process "DUPRADAR"

    tag "modules"
    tag "modules_nfcore"
    tag "dupradar"

    test("sarscov2 - bam - single_end") {

        config './nextflow.config'
        
        when {
            process {
                """
                input[0] = [ 
                    [ id:'test', single_end:true, strandedness:'forward' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.single_end.bam", checkIfExists: true)
                ]
                input[1] = [ 
                    [ id:'sarscov2' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gtf", checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.scatter2d[0][1]).name).match('scatter_single_end') },
                { assert snapshot(file(process.out.boxplot[0][1]).name).match('boxplot_single_end') },
                { assert snapshot(file(process.out.hist[0][1]).name).match('hist_single_end') },
                { assert snapshot(process.out.dupmatrix).match('dupmatrix_single_end') },
                { assert snapshot(process.out.intercept_slopt).match('intercept_slope_single_end') },
                { assert snapshot(process.out.multiqc).match('multiqc_single_end') },
                { assert snapshot(process.out.versions).match('versions_single_end') }
            )
        }

    }
    
    test("sarscov2 - bam - single_end - stub") {

        config './nextflow.config'
        
        options '-stub'

        when {
            process {
                """
                input[0] = [ 
                    [ id:'test', single_end:true, strandedness:'forward' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.single_end.bam", checkIfExists: true)
                ]
                input[1] = [ 
                    [ id:'sarscov2' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gtf", checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.scatter2d[0][1]).name).match('scatter_single_end_stub') },
                { assert snapshot(file(process.out.boxplot[0][1]).name).match('boxplot_single_end_stub') },
                { assert snapshot(file(process.out.hist[0][1]).name).match('hist_single_end_stub') },
                { assert snapshot(process.out.dupmatrix).match('dupmatrix_single_end_stub') },
                { assert snapshot(process.out.intercept_slopt).match('intercept_slope_single_end_stub') },
                { assert snapshot(process.out.multiqc).match('multiqc_single_end_stub') },
                { assert snapshot(process.out.versions).match('versions_single_end_stub') }
            )
        }

    }

    test("sarscov2 - bam - paired_end") {

        config './nextflow.config'

        when {
            process {
                """
                input[0] = [ 
                    [ id:'test', single_end:false, strandedness:'forward' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.bam", checkIfExists: true)
                ]
                input[1] = [ 
                    [ id:'sarscov2' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gtf", checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.scatter2d[0][1]).name).match('scatter_paired_end') },
                { assert snapshot(file(process.out.boxplot[0][1]).name).match('boxplot_paired_end') },
                { assert snapshot(file(process.out.hist[0][1]).name).match('hist_paired_end') },
                { assert snapshot(process.out.dupmatrix).match('dupmatrix_paired_end') },
                { assert snapshot(process.out.intercept_slopt).match('intercept_slope_paired_end') },
                { assert snapshot(process.out.multiqc).match('multiqc_paired_end') },
                { assert snapshot(process.out.versions).match('versions_paired_end') }
            )
        }
    }
    
    test("sarscov2 - bam - paired_end - stub") {

        config './nextflow.config'

        options '-stub'
        
        when {
            process {
                """
                input[0] = [ 
                    [ id:'test', single_end:false, strandedness:'forward' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.bam", checkIfExists: true)
                ]
                input[1] = [ 
                    [ id:'sarscov2' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gtf", checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.scatter2d[0][1]).name).match('scatter_paired_end_stub') },
                { assert snapshot(file(process.out.boxplot[0][1]).name).match('boxplot_paired_end_stub') },
                { assert snapshot(file(process.out.hist[0][1]).name).match('hist_paired_end_stub') },
                { assert snapshot(process.out.dupmatrix).match('dupmatrix_paired_end_stub') },
                { assert snapshot(process.out.intercept_slopt).match('intercept_slope_paired_end_stub') },
                { assert snapshot(process.out.multiqc).match('multiqc_paired_end_stub') },
                { assert snapshot(process.out.versions).match('versions_paired_end_stub') }
            )
        }
    }
}
