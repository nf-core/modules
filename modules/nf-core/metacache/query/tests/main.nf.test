nextflow_process {

    name "Test Process METACACHE_QUERY"
    script "../main.nf"
    process "METACACHE_QUERY"
    tag "modules"
    tag "modules_nfcore"
    tag "metacache"
    tag "metacache/build"
    tag "metacache/query"
    tag "untar"

       setup {
            run("METACACHE_BUILD") {
                script "../../build/main.nf"
                process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true),
                     file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/transcriptome.fasta", checkIfExists: true)]
                ]
                input[1] = []
                input[2] = []
                """
                }
            }
    }


    test("sarscov2 nanopore [fastq_gz]") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/nanopore/fastq/test_2.fastq.gz', checkIfExists: true),
                ]
                input[1] = METACACHE_BUILD.out.db.map { meta, meta_file, cache_files -> [meta_file, cache_files].flatten() }
                input[2] = false
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out.versions,
                file(process.out.mapping_results[0][1]).readLines()[0]
            ).match()
        }

    }

    test("sarscov2 nanopore [fastq_gz] stub") {

       options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/nanopore/fastq/test_2.fastq.gz', checkIfExists: true),
                ]
                input[1] = METACACHE_BUILD.out.db.map { meta, meta_file, cache_files -> [meta_file, cache_files].flatten() }
                input[2] = false
                """
            }
        }

       then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }


    test("sarscov2 nanopore [fastq_gz] abundance") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/nanopore/fastq/test_2.fastq.gz', checkIfExists: true),
                ]
                input[1] = METACACHE_BUILD.out.db.map { meta, meta_file, cache_files -> [meta_file, cache_files].flatten() }
                input[2] = true
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out.versions,
                file(process.out.mapping_results[0][1]).readLines()[0],
                file(process.out.abundances[0][1]).readLines()[0]
            ).match()
        }

    }




}
