// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test cafe
nextflow_process {

    name "Test Process CAFE"
    script "../main.nf"
    process "CAFE"

    tag "modules"
    tag "modules_nfcore"
    tag "cafe"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("mycoplasma - genecounts_tree") {
        when {
            process {
                """
                input[0] = [
                    [ s3://excon/cafe_input/N0.tsv ]
                    [ s3://excon/cafe_input/SpeciesTree_rooted_node_labels_myco.txt ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //analyze trace file
                assert process.trace.tasks().size() == 1
                with(process.out) {
                //checks one file exists in result channel
                assert result.size() == 1
                //checks one file exists in result 2 channel
                assert result_k3.size() == 1
                //checks one file exists in result 3 channel
                assert result_p_k3.size() == 1
                }
            )
        }
    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("mycoplasma - genecounts_tree - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ s3://excon/cafe_input/N0.tsv ]
                    [ s3://excon/cafe_input/SpeciesTree_rooted_node_labels_myco.txt ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //analyze trace file
                assert process.trace.tasks().size() == 1
                with(process.out) {
                //checks one file exists in result channel
                assert result.size() == 1
                //checks one file exists in result 2 channel
                assert result_k3.size() == 1
                //checks one file exists in result 3 channel
                assert result_p_k3.size() == 1
                }
            )
        }

    }

}
