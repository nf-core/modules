// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test msisensorpro/pro
nextflow_process {

    name "Test Process MSISENSORPRO_PRO"
    script "../main.nf"
    process "MSISENSORPRO_PRO"

    tag "modules"
    tag "modules_nfcore"
    tag "msisensorpro"
    tag "msisensorpro/pro"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("testdata - [test, cram], list, fasta") {
        setup {
            run("MSISENSORPRO_SCAN") {
                script "../../scan/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file('https://github.com/nf-core/test-datasets/raw/refs/heads/modules/data/genomics/homo_sapiens/genome/genome.fasta')
                    ]
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file('https://github.com/nf-core/test-datasets/raw/refs/heads/modules/data/genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true)
                ]
                input[1] = file('https://github.com/nf-core/test-datasets/raw/refs/heads/modules/data/genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai')
                input[2] = MSISENSORPRO_SCAN.out.list.map{ it[1] }
                input[3] = file('https://github.com/nf-core/test-datasets/raw/refs/heads/modules/data/genomics/homo_sapiens/genome/genome.fasta')
                input[4] = file('https://github.com/nf-core/test-datasets/raw/refs/heads/modules/data/genomics/homo_sapiens/genome/genome.fasta.fai')
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.summary_msi, process.out.all_msi, process.out.dis_msi, process.out.unstable_msi).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
                // See https://nf-co.re/docs/contributing/tutorials/nf-test_assertions for more information and examples.
            )
        }

    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("testdata - stub - [test, cram], list, fasta") {

        options "-stub"

        setup {
            run("MSISENSORPRO_SCAN") {
                script "../../scan/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ],
                        file('https://github.com/nf-core/test-datasets/raw/refs/heads/modules/data/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file('https://github.com/nf-core/test-datasets/raw/refs/heads/modules/data/genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true)
                ]
                input[1] = file('https://github.com/nf-core/test-datasets/raw/refs/heads/modules/data/genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai')
                input[2] = MSISENSORPRO_SCAN.out.list.map{ it[1] }
                input[3] = file('https://github.com/nf-core/test-datasets/raw/refs/heads/modules/data/genomics/homo_sapiens/genome/genome.fasta')
                input[4] = file('https://github.com/nf-core/test-datasets/raw/refs/heads/modules/data/genomics/homo_sapiens/genome/genome.fasta.fai')
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.summary_msi, process.out.all_msi, process.out.dis_msi, process.out.unstable_msi).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }

    }

}
