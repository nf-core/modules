// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test msisensorpro/pro
nextflow_process {

    name "Test Process MSISENSORPRO_PRO"
    script "../main.nf"
    process "MSISENSORPRO_PRO"

    tag "modules"
    tag "modules_nfcore"
    tag "msisensorpro"
    tag "msisensorpro/pro"
    tag "msisensorpro/scan"

    test("testdata - [test, input, index], list, fasta") {
        setup {
            run("MSISENSORPRO_SCAN") {
                script "../../scan/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true) ]
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [ id:'test_bam' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = MSISENSORPRO_SCAN.out.list
                input[2] = [ [ id:'test_fasta' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true) ]
                input[3] = [ [ id:'test_fai' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true) ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
             )
        }

    }

    test("testdata - [test, input], list, fasta - stub") {

        options "-stub"

        setup {
            run("MSISENSORPRO_SCAN") {
                script "../../scan/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true) ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test_bam' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = MSISENSORPRO_SCAN.out.list
                input[2] = [ [ id:'test_fasta' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true) ]
                input[3] = [ [ id:'test_fai' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true) ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
