nextflow_process {

    name "Test Process COPTR_MERGE"
    script "../main.nf"
    process "COPTR_MERGE"

    tag "modules"
    tag "modules_nfcore"
    tag "coptr"
    tag "coptr/merge"


    test("coptr merge single bam file") {

        when {
            process {
                """
                input[0] = [
                    [id:'indexNameExample'],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()
                }
            )
        }

    }

    test("coptr merge two bam files") {

        when {
            process {
                """
                input[0] = [
                    [id:'indexNameExample'],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.bam', checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()
                }
            )
        }

    }


    test("coptr merge single bam file - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [id:'indexNameExample'],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()}
            )
        }

    }

}
