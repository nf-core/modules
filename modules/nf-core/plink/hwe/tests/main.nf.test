nextflow_process {

    name "Test Process PLINK_HWE"
    script "../main.nf"
    process "PLINK_HWE"
    tag "modules"
    tag "modules_nfcore"
    tag "plink"
    tag "plink/hwe"

    test("plink hardy - using VCF files") {

        when {
            process {
                """
                input[0] = [
                    [:],
                    []
                ]
                input[1] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['vcf']['syntheticvcf_short.vcf.gz'], checkIfExists: true)
                ]
                input[2] = [
                    [:],
                    []
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions
                    process.out.hwe
                    ).match()
                },
                with(process.out.hwe) {
                    with(get(0)) {
                        assert get(1).endsWith(".hwe")
                        }
                }
            )
        }

    }

    test("plink hardy - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [:],
                    []
                ]
                input[1] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['vcf']['syntheticvcf_short.vcf.gz'], checkIfExists: true)
                ]
                input[2] = [
                    [:],
                    []
                ]
                """
            }
        }
        then {
            assertAll(
            { assert process.success },
            { assert snapshot(process.out).match() }
            with(process.out.hwe) {
                with(get(0)) {
                    assert get(1).endsWith(".hwe")
                    }
            }
        )
        }
    }

}
