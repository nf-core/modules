nextflow_process {

    name "Test Process PLINK_INDEPPAIRWISE"
    script "../main.nf"
    process "PLINK_INDEPPAIRWISE"

    tag "modules"
    tag "modules_nfcore"
    tag "plink"
    tag "plink/indeppairwise"
    tag "plink/vcf"

    test("test_plink_indeppairwise") {

        config "./nextflow.config"

        setup {

            params.module_args = '--make-bed --biallelic-only strict --vcf-half-call haploid --allow-extra-chr'

            run("PLINK_VCF") {
                script "../../vcf/main.nf"

                process {
                    """
                    input[0] = [
                        [id:'test',single_end:false],// meta map
                        file("https://github.com/nf-core/test-datasets/raw/modules/data/genomics/homo_sapiens/genome/vcf/ped/justhusky_minimal.vcf.gz", checkIfExists:true)
                        ]
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = PLINK_VCF.out.bed.join(PLINK_VCF.out.bim).join(PLINK_VCF.out.fam)
                input[1] = Channel.value(50)
                input[2] = Channel.value(5)
                input[3] = Channel.value(0.2)
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_plink_indeppairwise - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file("test.bed"),
                    file("test.bim"),
                    file("test.fam")
                    ]
                input[1] = Channel.value(50)
                input[2] = Channel.value(5)
                input[3] = Channel.value(0.2)
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}