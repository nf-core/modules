nextflow_process {

    name "Test Process PLINK_EXTRACT"
    config "./nextflow.config"
    script "../main.nf"
    process "PLINK_EXTRACT"

    tag "modules"
    tag "modules_nfcore"
    tag "plink"
    tag "plink/vcf"
    tag "plink/extract"
    tag "gawk"

    test("homo sapiens - bed, bim, fam, txt") {

        setup {
            run("PLINK_VCF") {
                script "../../../plink/vcf"
                params {
                    plink_vcf_args = "--make-bed --set-missing-var-ids @:#:\\\$1:\\\$2"
                }
                process {
                    """
                    input[0] = Channel.of([
                        [id:'test',single_end:false],// meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/vcf/syntheticvcf_short.vcf.gz', checkIfExists: true)
                    ])
                    """
                }
            }
            run("GAWK") {
                script "../../../gawk"
                process {
                    """
                    input[0] = PLINK_VCF.out.bim
                    input[1] = Channel.value('BEGIN {OFS="\t"}  (\$5\$6 == "GC" || \$5\$6 == "CG" || \$5\$6 == "AT" || \$5\$6 == "TA")  {print \$2}')
                        .collectFile(name:"program.txt")
                    input[2] = false
                    """
                }
            }
        }
        when {
            process {
                """
                ch_bed_bim_fam_variants = PLINK_VCF.out.bed
                    .join(PLINK_VCF.out.bim)
                    .join(PLINK_VCF.out.fam)
                    .join(GAWK.out.output)
                input[0] = ch_bed_bim_fam_variants
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}