nextflow_process {

    name "Test Process ASCAT"
    script "../main.nf"
    process "ASCAT"

    tag "modules"
    tag "modules_nfcore"
    tag "ascat"

    test("human - bam") {

        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id: 'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.markduplicates.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.markduplicates.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.markduplicates.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [file('https://raw.githubusercontent.com/nf-core/test-datasets/d677699283dbbeb51876d1bb3c18fb687d1db4ea/data/genomics/homo_sapiens/illumina/ascat/G1000_alleles_WGS_hg38/G1000_alleles_hg38_chr21.txt')]
                input[2] = [file('https://raw.githubusercontent.com/nf-core/test-datasets/d677699283dbbeb51876d1bb3c18fb687d1db4ea/data/genomics/homo_sapiens/illumina/ascat/G1000_loci_WGS_hg38/G1000_loci_hg38_chr21.txt')]
                input[3] = []
                input[4] = []
                input[5] = []
                input[6] = []
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }
    }

    test("human - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id: 'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = []
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                input[6] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}