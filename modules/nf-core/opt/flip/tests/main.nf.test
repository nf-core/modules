nextflow_process {

    name "Test Process OPT_FLIP"
    script "../main.nf"
    process "OPT_FLIP"

    tag "modules"
    tag "modules_nfcore"
    tag "opt"
    tag "opt/flip"

    test("xenium human breast cancer panel probe sequences") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test_run' ],
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/opt/testdata/xenium_human_breast_gene_expression_panel_probe_sequences.fasta, checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test_run' ],
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/opt/testdata/gencode.v47.basic.annotation.fmted.chr1.reduced.gff, checkIfExists: true),
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/opt/testdata/gencode.v47.basic.annotation.fmted.reduced.fa, checkIfExists: true)
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("xenium human breast cancer panel probe sequences -stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test_run' ],
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/opt/testdata/xenium_human_breast_gene_expression_panel_probe_sequences.fasta, checkIfExists: true)
                ]
                
                input[1] = [
                    [ id:'test_run' ],
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/opt/testdata/gencode.v47.basic.annotation.fmted.chr1.reduced.gff, checkIfExists: true),
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/opt/testdata/gencode.v47.basic.annotation.fmted.reduced.fa, checkIfExists: true)
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
