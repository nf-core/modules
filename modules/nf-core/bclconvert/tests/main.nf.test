nextflow_process {

    name "Test Process BCLCONVERT"
    script "../main.nf"
    process "BCLCONVERT"
    config "./nextflow.config"

    tag "bclconvert"
    tag "modules"
    tag "modules_nfcore"

    test("homo_sapiens illumina [bcl]") {
        when {
            params {
                module_args = "--force --first-tile-only true"
            }
            process {
                """
                input[0] = [
                    [ id: 'test', lane:1 ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bcl/flowcell_samplesheet.csv', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bcl/flowcell.tar.gz', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.fastq,
                    process.out.fastq_idx,
                    process.out.undetermined.collect { meta, fastq -> file(fastq).name },
                    process.out.undetermined_idx,
                    process.out.reports,
                    process.out.logs.collect { meta, logs -> file(logs).list().sort() },
                    process.out.interop.collect { meta, interop ->
                                                interop.findAll { interopfile ->
                                                file(interopfile).name != "IndexMetricsOut.bin" } },
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("sars_cov2 illumina [bcl]") {
        when {
            params {
                module_args = "--force --tiles s_1_2101"
            }
            process {
                """
                input[0] = [
                    [ id: 'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bcl/SampleSheet.csv', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bcl/200624_A00834_0183_BHMTFYDRXX.tar.gz', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.fastq.collect {
                        meta, fastqs ->
                        fastqs.findAll {
                            fastqfile ->
                            file(fastqfile).name != "SampleZ_S5_L001_R1_001.fastq.gz"
                        }
                    },
                    process.out.fastq_idx,
                    process.out.undetermined.collect { meta, fastq -> file(fastq).name },
                    process.out.undetermined_idx,
                    process.out.reports,
                    process.out.logs.collect { meta, logs -> file(logs).list().sort() },
                    process.out.interop,
                    process.out.interop.collect { meta, interop ->
                                                interop.findAll { interopfile ->
                                                file(interopfile).name != "IndexMetricsOut.bin" } },
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens illumina [bcl] - stub") {
        options "-stub"

        when {
            params {
                module_args = "--force --first-tile-only true"
            }
            process {
                """
                input[0] = [
                    [ id: 'test', lane:1 ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bcl/flowcell_samplesheet.csv', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bcl/flowcell.tar.gz', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}