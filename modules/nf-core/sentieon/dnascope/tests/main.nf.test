nextflow_process {

    name "Test Process SENTIEON_DNASCOPE"
    config "./nextflow.config"
    script "../main.nf"
    process "SENTIEON_DNASCOPE"
   
    tag "modules"
    tag "modules_nfcore"
    tag "sentieon"
    tag "sentieon/dnascope"
    config './nextflow.config'

    test("conservative indel model - variant") {
        
        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists:true),
                    []// no intervals
                    ]
                input[1] = [[id:'test'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)]
                input[2] = [[id:'test'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists:true)]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = [[:],file("https://s3.amazonaws.com/sentieon-release/other/SentieonDNAscopeModel1.0.model", checkIfExists: true)]
                input[6] = 'CONSERVATIVE'
                input[7] = 'variant'
                input[8] = false
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.summary,
                    file(process.out.vcf_tbi[0][1]).name,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }
    
    
    test("conservative indel model - all") {
        
        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists:true),
                    []// no intervals
                    ]
                input[1] = [[id:'test'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)]
                input[2] = [[id:'test'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists:true)]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = [[:],file("https://s3.amazonaws.com/sentieon-release/other/SentieonDNAscopeModel1.0.model", checkIfExists: true)]
                input[6] = 'AGGRESSIVE'
                input[7] = 'all'
                input[8] = false
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.summary,
                    file(process.out.vcf_tbi[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }
    
    
    test("hostile indel model - confident") {
        
        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists:true),
                    []// no intervals
                    ]
                input[1] = [[id:'test'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)]
                input[2] = [[id:'test'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists:true)]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = [[:],[]]
                input[6] = 'HOSTILE'
                input[7] = 'confident'
                input[8] = true
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.summary,
                    file(process.out.vcf_tbi[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }
    
    
    test("conversative indel model - variant - stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists:true),
                    []// no intervals
                    ]
                input[1] = [[id:'test'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)]
                input[2] = [[id:'test'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists:true)]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = [[:],[]]
                input[6] = 'CONSERVATIVE'
                input[7] = 'variant'
                input[8] = false
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match()
                }
            )
        }
    }
    
}