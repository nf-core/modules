nextflow_process {

    name "Test Process SENTIEON_DNASCOPE"
    config "./nextflow.config"
    script "../main.nf"
    process "SENTIEON_DNASCOPE"
   
    tag "modules"
    tag "modules_nfcore"
    tag "sentieon"
    tag "sentieon/dnascope"
   
    
    
    test("test_dnascope_conservative_pcr_indel_model") {
        
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai',checkIfExists:true),
                    []// no intervals
                    ]
                input[1] = Channel.of([[id:'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta',checkIfExists:true)]).collect()
                input[2] = Channel.of([[id:'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai',checkIfExists:true)]).collect()
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = [[:],ml_model]
                input[6] = 'CONSERVATIVE'
                input[7] = 'variant'
                input[8] = false
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("test_dnascope_aggressive_pcr_indel_model_vcf_all") {
        
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai',checkIfExists:true),
                    []// no intervals
                    ]
                input[1] = Channel.of([[id:'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta',checkIfExists:true)]).collect()
                input[2] = Channel.of([[id:'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai',checkIfExists:true)]).collect()
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = [[:],ml_model]
                input[6] = 'AGGRESSIVE'
                input[7] = 'all'
                input[8] = false
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("test_dnascope_hostile_pcr_indel_model_vcf_confident_gvcf") {
        
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai',checkIfExists:true),
                    []// no intervals
                    ]
                input[1] = Channel.of([[id:'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta',checkIfExists:true)]).collect()
                input[2] = Channel.of([[id:'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai',checkIfExists:true)]).collect()
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = [[:],[]]
                input[6] = 'HOSTILE'
                input[7] = 'confident'
                input[8] = true
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("test_dnascope_conservative_pcr_indel_model -- stub") {
        options '-stub'
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai',checkIfExists:true),
                    []// no intervals
                    ]
                input[1] = Channel.of([[id:'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta',checkIfExists:true)]).collect()
                input[2] = Channel.of([[id:'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai',checkIfExists:true)]).collect()
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = [[:],ml_model]
                input[6] = 'CONSERVATIVE'
                input[7] = 'variant'
                input[8] = false
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("test_dnascope_aggressive_pcr_indel_model_vcf_all -- stub") {
        options '-stub'
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai',checkIfExists:true),
                    []// no intervals
                    ]
                input[1] = Channel.of([[id:'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta',checkIfExists:true)]).collect()
                input[2] = Channel.of([[id:'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai',checkIfExists:true)]).collect()
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = [[:],ml_model]
                input[6] = 'AGGRESSIVE'
                input[7] = 'all'
                input[8] = false
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("test_dnascope_hostile_pcr_indel_model_vcf_confident_gvcf -- stub") {
        options '-stub'
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai',checkIfExists:true),
                    []// no intervals
                    ]
                input[1] = Channel.of([[id:'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta',checkIfExists:true)]).collect()
                input[2] = Channel.of([[id:'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai',checkIfExists:true)]).collect()
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = [[:],[]]
                input[6] = 'HOSTILE'
                input[7] = 'confident'
                input[8] = true
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}