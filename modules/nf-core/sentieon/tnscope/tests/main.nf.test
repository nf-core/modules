nextflow_process {

    name "Test Process SENTIEON_TNSCOPE"
    config "./nextflow.config"
    script "../main.nf"
    process "SENTIEON_TNSCOPE"

    tag "modules"
    tag "modules_nfcore"
    tag "picard"
    tag "picard/addorreplacereadgroups"
    tag "sentieon"
    tag "sentieon/tnscope"
    config './nextflow.config'

    setup {
        run("PICARD_ADDORREPLACEREADGROUPS", alias: "NORMAL_ADDORREPLACEREADGROUPS") {
            script "../../../picard/addorreplacereadgroups/main.nf"
            process {
                """
                input[0] = [[id:'test'],
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.recalibrated.sorted.bam', checkIfExists:true)]
                    ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                """
            }
        }

        run("PICARD_ADDORREPLACEREADGROUPS", alias: "TUMOUR_ADDORREPLACEREADGROUPS") {
            script "../../../picard/addorreplacereadgroups/main.nf"
            process {
                """
                input[0] = [[id:'test'],
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.recalibrated.sorted.bam', checkIfExists:true)]
                    ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                """
            }
        }
    }

    test("tumour normal - no dbsnp") {

        when {
            params {
                module_args  = ''
                module_args2 = '--tumor_sample tumour --normal_sample normal'
            }
            process {
                """
                input[0] = NORMAL_ADDORREPLACEREADGROUPS.out.bam
                    .join( NORMAL_ADDORREPLACEREADGROUPS.out.bai)
                    .join( TUMOUR_ADDORREPLACEREADGROUPS.out.bam)
                    .join( TUMOUR_ADDORREPLACEREADGROUPS.out.bai)
                    .map{
                    meta,normal_bam,normal_bai,tumour_bam,tumour_bai->
                    [[id:'tumour'],[normal_bam,tumour_bam],[normal_bai,tumour_bai],[]]
                    }
                input[1] = [ [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists:true)
                    ]
                input[2] = [ [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists:true)
                    ]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = [[:],[]]
                input[6] = [[:],[]]
                input[7] = [[:],[]]
                input[8] = [[:],[]]
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.summary,
                    file(process.out.index[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }

    test("tumour normal - dbsnp") {

        when {
            params {
                module_args  = ''
                module_args2 = '--tumor_sample tumour --normal_sample normal'
            }
            process {
                """
                input[0] = NORMAL_ADDORREPLACEREADGROUPS.out.bam
                    .join( NORMAL_ADDORREPLACEREADGROUPS.out.bai)
                    .join( TUMOUR_ADDORREPLACEREADGROUPS.out.bam)
                    .join( TUMOUR_ADDORREPLACEREADGROUPS.out.bai)
                    .map{
                    meta,normal_bam,normal_bai,tumour_bam,tumour_bai->
                    [[id:'tumour'],[normal_bam,tumour_bam],[normal_bai,tumour_bai],[]]
                    }
                input[1] = [ [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists:true)
                    ]
                input[2] = [ [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists:true)
                    ]
                input[3] = [
                    [id:'dbsnp'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/germlineresources/dbsnp_138.hg38.vcf.gz', checkIfExists:true)
                ]
                input[4] = [
                    [id:'dbsnp'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/germlineresources/dbsnp_138.hg38.vcf.gz.tbi', checkIfExists:true)
                ]
                input[5] = [[:],[]]
                input[6] = [[:],[]]
                input[7] = [[:],[]]
                input[8] = [[:],[]]

                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.summary,
                    file(process.out.index[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }

    test("tumour normal - stub") {
        options '-stub'
        when {
            params {
                module_args  = ''
                module_args2 = '--tumor_sample tumour --normal_sample normal'
            }
            process {
                """
                input[0] = [[id:'test'],[],[],[]]
                input[1] = [[:],[]]
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = [[:],[]]
                input[6] = [[:],[]]
                input[7] = [[:],[]]
                input[8] = [[:],[]]
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(process.out).match() }
            )
        }
    }

}