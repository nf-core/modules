nextflow_process {

    name "Test Process SENTIEON_COLLECTVCMETRICS"
    tag "modules_nfcore"
    tag "modules"
    tag "sentieon"
    tag "collectvcmetrics"
    tag "sentieon/collectvcmetrics"

    script "../main.nf"
    process "SENTIEON_COLLECTVCMETRICS"

    test("Test VCF") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true) ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true) ]
                ]
                input[1] = [
                    [id: 'test'],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true) ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true) ]
                ]
                input[2] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)]
                input[3] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)]
                input[4] = [[id: 'test'], []]
                """
            }
        }

        then {
            assert process.success
            assertAll(
                {
                    assert snapshot(
                        file(process.out.metrics[0][1]).readLines().findAll { !it.startsWith("#") },
                        file(process.out.summary[0][1]).readLines().findAll { !it.startsWith("#") },
                        process.out.versions
                    ).match()
                }
            )
        }
    }

    test("Test VCF with intervals") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true) ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true) ]
                ]
                input[1] = [
                    [id: 'test'],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true) ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true) ]
                ]
                input[2] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)]
                input[3] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)]
                input[4] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed')]
                """
            }
        }

        then {
            assert process.success
            assertAll(
                {
                    assert snapshot(
                        file(process.out.metrics[0][1]).readLines().findAll { !it.startsWith("#") },
                        file(process.out.summary[0][1]).readLines().findAll { !it.startsWith("#") },
                        process.out.versions
                    ).match()
                }
            )
        }
    }

    test("Test VCF - stub") {
        config "./nextflow.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], [], []
                ]
                input[1] = [
                    [id: 'test'], [], []
                ]
                input[2] = [[id: 'test'], []]
                input[3] = [[id: 'test'], []]
                input[4] = [[id: 'test'], []]
                """
            }
        }

        then {
            assert process.success
            assertAll(
                {
                    assert snapshot(process.out).match()
                }
            )
        }
    }
}