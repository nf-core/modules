nextflow_process {

    name "Test Process SENTIEON_RSEMCALCULATEEXPRESSION"
    script "../main.nf"
    process "SENTIEON_RSEMCALCULATEEXPRESSION"
    config "./nextflow.config"
    tag "modules"
    tag "modules_nfcore"
    tag "sentieon"
    tag "sentieon/rsemcalculateexpression"
    tag "sentieon/rsempreparereference"

    test("homo_sapiens") {

        setup {
            run("SENTIEON_RSEMPREPAREREFERENCE") {
                script "../../../sentieon/rsempreparereference/main.nf"
                process {
                    """
                    input[0] = Channel.of(file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true))
                    input[1] = Channel.of(file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true))
                    """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', strandedness: 'forward' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = SENTIEON_RSEMPREPAREREFERENCE.out.index
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    file(process.out.logs.get(0).get(1)).name,
                    process.out.counts_gene,
                    process.out.counts_transcript,
                    process.out.stat,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - stub") {

    options "-stub"

        setup {
            run("SENTIEON_RSEMPREPAREREFERENCE") {
                script "../../../sentieon/rsempreparereference/main.nf"
                process {
                    """
                    input[0] = Channel.of(file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true))
                    input[1] = Channel.of(file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true))
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', strandedness: 'forward' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = SENTIEON_RSEMPREPAREREFERENCE.out.index
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(process.out).match() }
            )
        }
    }
}
