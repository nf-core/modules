// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test sentieon/readwriter
nextflow_process {

    name "Test Process SENTIEON_READWRITER"
    script "../main.nf"
    process "SENTIEON_READWRITER"

    tag "modules"
    tag "modules_nfcore"
    tag "sentieon"
    tag "sentieon/readwriter"

    test("sarscov2 - bam") {
        when {
            process {
                """"
                input[0] =  [ id: 'test' ],
                            file(params.modules_testdata_base_path + '/data/genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                            file(params.modules_testdata_base_path + '/data/genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                        ]
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }

            )
        }

    }



    //      workflow test_readwriter_bam {

    //          bam = [
    //              [ id: 'test' ],
    //              file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
    //              file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true)
    //          ]

    //          SENTIEON_READWRITER_BAM ( bam, [[:],[]], [[:],[]] )
    //      }

    //      workflow test_readwriter_cram {

    //          cram = [
    //              [ id: 'test' ],
    //              file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
    //              file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true)
    //          ]

    //          fasta = Channel.of([ [ id:'test' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)]).collect()
    //          fai   = Channel.of([ [ id:'test' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)]).collect()

    //          SENTIEON_READWRITER_CRAM ( cram, fasta, fai )
    //      }

    // // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    // test("sarscov2 - bam - stub") {

    //     options "-stub"

    //     when {
    //         process {
    //             """
    //             // TODO nf-core: define inputs of the process here. Example:

    //             input[0] = file(params.test_data['sarscov2']['illumina']['test_single_end_bam'], checkIfExists: true)
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(process.out).match() }
    //             //TODO nf-core: Add all required assertions to verify the test output.
    //         )
    //     }

    // }

}
