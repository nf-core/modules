nextflow_process {

    name "Test Process SENTIEON_DATAMETRICS"
    script "../main.nf"
    process "SENTIEON_DATAMETRICS"

    tag "modules"
    tag "modules_nfcore"
    tag "sentieon"
    tag "sentieon/datametrics"
    config "./nextflow.config"

    test("metrics - no plots") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                ]
                input [1] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                ]
                input [2] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true),
                ]
                input [3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("metrics - with plots") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                ]
                input [1] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                ]
                input [2] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true),
                ]
                input [3] = true
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out.mq_metrics,
                    process.out.qd_metrics,
                    process.out.gc_summary,
                    process.out.gc_metrics,
                    process.out.aln_metrics,
                    process.out.is_metrics,
                    file(process.out.mq_plot[0][1]).name,
                    file(process.out.qd_plot[0][1]).name,
                    file(process.out.is_plot[0][1]).name,
                    file(process.out.gc_plot[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                    ).match() 
                }
            )
        }
        
    }

    test("sarscov2 - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                ]
                input [1] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                ]
                input [2] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true),
                ]
                input [3] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
