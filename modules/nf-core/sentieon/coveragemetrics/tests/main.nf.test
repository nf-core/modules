nextflow_process {

    name "Test Process SENTIEON_COVERAGEMETRICS"
    tag "modules_nfcore"
    tag "modules"
    tag "sentieon"
    tag "coveragemetrics"
    tag "sentieon/coveragemetrics"

    script "../main.nf"
    process "SENTIEON_COVERAGEMETRICS"

    test("Test coverage metrics per sample") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true) ]
                ]
                input[1] = [[id: 'test'], []]
                input[2] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)]
                input[3] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)]
                input[4] = [[id: 'test'], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Test coverage metrics with interval") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true) ]
                ]
                input[1] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed')]
                input[2] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)]
                input[3] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)]
                input[4] = [[id: 'test'], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Test coverage metrics omit outputs") {
        config "./nextflow_omit.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true) ]
                ]
                input[1] = [[id: 'test'], []]
                input[2] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)]
                input[3] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)]
                input[4] = [[id: 'test'], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}