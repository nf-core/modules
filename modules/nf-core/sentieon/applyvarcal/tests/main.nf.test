nextflow_process {

    name "Test Process SENTIEON_APPLYVARCAL"
    config "./nextflow.config"
    script "../main.nf"
    process "SENTIEON_APPLYVARCAL"
   
    tag "modules"
    tag "modules_nfcore"
    tag "sentieon"
    tag "sentieon/applyvarcal"
    config './nextflow.config'
   
    test("homo sapiens") {
        
        when {
            params {
                module_args  = ''
                module_args2 = '--var_type SNP --sensitivity 99.0'
            }
            process {
                """
                input[0] = [[id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/variantrecalibrator/test2.recal', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/variantrecalibrator/test2.recal.idx', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/variantrecalibrator/test2.tranches', checkIfExists:true)
                    ]
                input[1] = [[:],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)]
                input[2] = [[:],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)]
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.summary,
                    file(process.out.tbi[0][1]).name,
                    path(process.out.versions[0]).yaml
                    ).match()
                }
            )
        }
    }
    
    
    test("homo sapiens -- stub") {
        options '-stub'
        when {
            params {
                module_args  = ''
                module_args2 = '--var_type SNP --sensitivity 99.0'
            }
            process {
                """
                input[0] = [[id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz.tbi', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/variantrecalibrator/test2.recal', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/variantrecalibrator/test2.recal.idx', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/variantrecalibrator/test2.tranches', checkIfExists:true)
                    ]
                input[1] = [[:],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)]
                input[2] = [[:],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)]
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match()
                }
            )
        }
    }
}