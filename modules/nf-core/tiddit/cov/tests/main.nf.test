nextflow_process {

    name "Test Process TIDDIT_COV"
    script "../main.nf"
    process "TIDDIT_COV"

    tag "modules"
    tag "modules_nfcore"
    tag "tiddit"
    tag "tiddit/cov"

    test("homo_sapiens - cram - bed") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true)
                ]

                input[1] = [
                    [:],  // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.cov[0][1] ==~ ".*/test.bed" },
                { assert snapshot(
                    process.out.cov,
                    process.out.versions
                    ).match()
                }
            )
        }

    }

    test("homo_sapiens - bam - bed") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ]
                input[1] = [ [:], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.cov[0][1] ==~ ".*/test.bed" },
                { assert snapshot(
                    process.out.cov,
                    process.out.versions
                    ).match()
                }
            )
        }

    }

    test("homo_sapiens - cram - wig") {

        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true)
                ]

                input[1] = [
                    [:],  // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.wig[0][1] ==~ ".*/test.wig" },
                { assert snapshot(
                    process.out.wig,
                    process.out.versions
                    ).match()
                }
            )
        }

    }

    test("homo_sapiens - bam - wig") {

        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ]

                input[1] = [ [:], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.wig[0][1] ==~ ".*/test.wig" },
                { assert snapshot(
                    process.out.wig,
                    process.out.versions
                    ).match()
                }
            )
        }

    }


    test("homo_sapiens - stub") {

        options "-stub"

        when {
            process {
                """

                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true)
                ]

                input[1] = [
                    [:],  // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.cov[0][1] ==~ ".*/test.bed" },
                { assert process.out.wig[0][1] ==~ ".*/test.wig" },
                { assert snapshot(
                    process.out.cov,
                    process.out.wig,
                    process.out.versions
                    ).match()
                }
            )
        }

    }

}
