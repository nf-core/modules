nextflow_process {
    name "Test Process LINKS"
    script "../main.nf"
    process "LINKS"

    tag "modules"
    tag "modules_nfcore"
    tag "links"

    test("LINKS - LINKS test data") {
        config './nextflow.config'

        when {
            params {
                module_args = "-d 1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,12000,14000,16000,18000,20000"
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/scaffolding/LINKS/contigs.fasta', checkIfExists: true),
                ]
                input[1] = [
                    [ id:'test'], 
                    file(params.modules_testdata_base_path + 'genomics/scaffolding/LINKS/genome.fasta', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log[0][1]).name,
                    process.out.pairing_issues,
                    process.out.scaffolds_csv,
                    process.out.scaffolds_fasta,
                    process.out.bloom,
                    file(process.out.scaffolds_graph[0][1]).name,
                    process.out.assembly_correspondence,
                    process.out.tigpair_checkpoint,
                    process.out.versions
                    ).match()
                }
            )
        }

    }

    test("LINKS - longstitch test data 1") {
        config './nextflow.config'

        when {
            params {
                module_args = "-d 1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,12000,14000,16000,18000,20000"
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/scaffolding/longstitch/test_scaffolds1.fa', checkIfExists: true),
                ]
                input[1] = [
                    [ id:'test'], 
                    file(params.modules_testdata_base_path + 'genomics/scaffolding/longstitch/test_reads1.fa.gz', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log[0][1]).name,
                    file(process.out.pairing_issues[0][1]).name,
                    process.out.scaffolds_csv,
                    process.out.scaffolds_fasta,
                    process.out.bloom,
                    file(process.out.scaffolds_graph[0][1]).name,
                    file(process.out.assembly_correspondence[0][1]).name,
                    file(process.out.tigpair_checkpoint[0][1]).name,
                    process.out.versions
                    ).match()
                }
            )
        }

    }
    test("LINKS - longstitch test data 2") {
        config './nextflow.config'

        when {
            params {
                module_args = "-d 1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,12000,14000,16000,18000,20000"
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/scaffolding/longstitch/test_scaffolds2.fa', checkIfExists: true),
                ]
                input[1] = [
                    [ id:'test'], 
                    file(params.modules_testdata_base_path + 'genomics/scaffolding/longstitch/test_reads2.fa.gz', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log[0][1]).name,
                    file(process.out.pairing_issues[0][1]).name,
                    process.out.scaffolds_csv,
                    process.out.scaffolds_fasta,
                    process.out.bloom,
                    file(process.out.scaffolds_graph[0][1]).name,
                    file(process.out.assembly_correspondence[0][1]).name,
                    file(process.out.tigpair_checkpoint[0][1]).name,
                    process.out.versions
                    ).match()
                }
            )
        }

    }
    test("LINKS - stub") {

        options "-stub"
        config './nextflow.config'

        when {
            params {
                module_args = "-d 1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,12000,14000,16000,18000,20000"
            }
            process {
                """
                input[0] = [
                    [ id:'test' ], 
                    file(params.modules_testdata_base_path + 'genomics/scaffolding/LINKS/contigs.fasta', checkIfExists: true),
                ]
                input[1] = [
                    [ id:'test' ], 
                    file(params.modules_testdata_base_path + 'genomics/scaffolding/LINKS/genome.fasta', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
