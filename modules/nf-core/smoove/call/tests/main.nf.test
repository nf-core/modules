nextflow_process {

    name "Test Process SMOOVE_CALL"
    script "../main.nf"
    process "SMOOVE_CALL"

    tag "modules"
    tag "modules_nfcore"
    tag "smoove"
    tag "smoove/call"

    test("homo sapiens - [bam, bai, []], fasta, fai") {

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                    []
                ])
                input[1] = [[id:"fasta"], file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)]
                input[2] = [[id:"fai"], file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo sapiens - [cram, crai, bed], fasta, fai") {

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_bed'], checkIfExists: true)
                ])
                input[1] = [[id:"fasta"], file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)]
                input[2] = [[id:"fai"], file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - [bam, bai, []], fasta, fai - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                    []
                ])
                input[1] = [[id:"fasta"], file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)]
                input[2] = [[id:"fai"], file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
