nextflow_process {

    name "Test Process SVDB_BUILD"
    script "modules/nf-core/svdb/build/main.nf"
    process "SVDB_BUILD"
    tag "modules"
    tag "modules_nfcore"
    tag "svdb"
    tag "svdb/build"

    test("one VCF - files") {

        when {
            process {
                """
                input[0] = Channel.of([ [ id:'test' ], // meta map
                        [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/sv_query.vcf.gz', checkIfExists: true) ]
                        ])
                input[1] = 'files'
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.db.get(0).get(1)).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("two VCFs - files") {

        when {
            process {
                """
                input[0] = Channel.of([ [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/sv_query.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz', checkIfExists: true)
                    ]
                ])
                input[1] = 'files'
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.db.get(0).get(1)).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("one VCF - files -stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of([ [ id:'test' ], // meta map
                        [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/sv_query.vcf.gz', checkIfExists: true) ]
                        ])
                input[1] = 'files'
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("two VCFs - files -stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of([ [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/sv_query.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz', checkIfExists: true)
                    ]
                ])
                input[1] = 'files'
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
