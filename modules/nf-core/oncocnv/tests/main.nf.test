nextflow_process {

    name "Test Process ONCOCNV"
    script "../main.nf"
    process "ONCOCNV"

    tag "modules"
    tag "modules_nfcore"
    tag "oncocnv"

    test("human - bam") {

        when {
            process {
                """
                input[0] = [
                    [id:'test', single_end:false], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true)
                ]
                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_21_annotated_bed'], checkIfExists: true)
                input[2] = file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists:true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.png[0][1]).name,
                    file(process.out.profile[0][1]).name + "-line0:md5," + path(process.out.profile[0][1]).readLines()[0].join('\n').md5(),
                    file(process.out.summary[0][1]).name + "-line0:md5," + path( process.out.summary[0][1]).readLines()[0].join('\n').md5(),
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("human - bam - multipleTumors") {

        when {
            process {
                """
                input[0] = [
                    [id:'test', single_end:false], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true)
                    ],
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true)
                    ],
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_markduplicates_sorted_bam'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_markduplicates_sorted_bam'], checkIfExists: true)
                    ],
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_markduplicates_sorted_bam_bai'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_markduplicates_sorted_bam_bai'], checkIfExists: true)
                    ]
                ]
                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_21_annotated_bed'], checkIfExists: true)
                input[2] = file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists:true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("human - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [id:'test', single_end:false], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true)
                ]
                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_21_annotated_bed'], checkIfExists: true)
                input[2] = file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists:true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }

    }

}
