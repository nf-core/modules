nextflow_process {

    name "Test Process UMITOOLS_DEDUP"
    script "../main.nf"
    process "UMITOOLS_DEDUP"

    tag "modules"
    tag "modules_nfcore"
    tag "umitools"
    tag "umitools/dedup"

    tag "bwa/index"
    tag "bwa/mem"
    tag "samtools/index"
    tag "umitools/extract"

    test("no umi") {

        config "./nextflow.config"

        when {
            process {
                """
                get_output_stats = false

                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai", checkIfExists: true)
                ]
                input[1] = get_output_stats
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path("${process.out.log[0][1]}").exists() },
                { assert snapshot(process.out.bam).match("no umi - bam") },
                { assert snapshot(process.out.versions).match("no umi - versions") }
            )
        }
    }

    test("se - no stats") {
        config "./nextflow.config"

        setup {
            run("UMITOOLS_EXTRACT") {
                script "../../extract/main.nf"
                process {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true) ]
                ]
                """
                }
            }

            run("BWA_INDEX") {
                script "../../../bwa/index/main.nf"
                process {
                    """
                    input[0] = [
                        [id: 'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }

            run("BWA_MEM") {
                script "../../../bwa/mem/main.nf"
                process {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true) ]
                ]
                input[1] = BWA_INDEX.out.index
                input[2] = true
                """
                }
            }

            run("SAMTOOLS_INDEX") {
                script "../../../samtools/index/main.nf"
                process {
                """
                input[0] = BWA_MEM.out.bam
                """
                }
            }
        }

        when {
            process {
                """
                get_output_stats = false

                input[0] = BWA_MEM.out.bam.join(SAMTOOLS_INDEX.out.bai, by: [0])
                input[1] = get_output_stats
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path("${process.out.log[0][1]}").exists() },
                { assert snapshot(process.out.bam).match("se no stats - bam") },
                { assert snapshot(process.out.versions).match("se no stats - versions") }
            )
        }
    }

    test("pe - no stats") {
        config "./nextflow.config"

        setup {
            run("UMITOOLS_EXTRACT") {
                script "../../extract/main.nf"
                process {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_2.fastq.gz", checkIfExists: true) ]
                ]
                """
                }
            }

            run("BWA_INDEX") {
                script "../../../bwa/index/main.nf"
                process {
                    """
                    input[0] = [
                        [id: 'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }

            run("BWA_MEM") {
                script "../../../bwa/mem/main.nf"
                process {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_2.fastq.gz", checkIfExists: true) ]
                ]
                input[1] = BWA_INDEX.out.index
                input[2] = true
                """
                }
            }

            run("SAMTOOLS_INDEX") {
                script "../../../samtools/index/main.nf"
                process {
                """
                input[0] = BWA_MEM.out.bam
                """
                }
            }
        }

        when {
            process {
                """
                get_output_stats = false

                input[0] = BWA_MEM.out.bam.join(SAMTOOLS_INDEX.out.bai, by: [0])
                input[1] = get_output_stats
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path("${process.out.log[0][1]}").exists() },
                { assert snapshot(process.out.bam).match("pe no stats - bam") },
                { assert snapshot(process.out.versions).match("pe no stats - versions") }
            )
        }
    }

    test("pe") {
        config "./nextflow.config"

        setup {
            run("UMITOOLS_EXTRACT") {
                script "../../extract/main.nf"
                process {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_2.fastq.gz", checkIfExists: true) ]
                ]
                """
                }
            }

            run("BWA_INDEX") {
                script "../../../bwa/index/main.nf"
                process {
                    """
                    input[0] = [
                        [id: 'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }

            run("BWA_MEM") {
                script "../../../bwa/mem/main.nf"
                process {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_2.fastq.gz", checkIfExists: true) ]
                ]
                input[1] = BWA_INDEX.out.index
                input[2] = true
                """
                }
            }

            run("SAMTOOLS_INDEX") {
                script "../../../samtools/index/main.nf"
                process {
                """
                input[0] = BWA_MEM.out.bam
                """
                }
            }
        }

        when {
            process {
                """
                get_output_stats = true

                input[0] = BWA_MEM.out.bam.join(SAMTOOLS_INDEX.out.bai, by: [0])
                input[1] = get_output_stats
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path("${process.out.log[0][1]}").exists() },
                { assert snapshot(process.out.bam).match("pe - bam") },
                { assert snapshot(process.out.tsv_edit_distance).match("pe - tsv_edit_distance") },
                { assert snapshot(process.out.tsv_per_umi).match("pe - tsv_per_umi") },
                { assert snapshot(process.out.tsv_umi_per_position).match("pe - tsv_umi_per_position") },
                { assert snapshot(process.out.versions).match("pe - versions") }
            )
        }
    }
}
