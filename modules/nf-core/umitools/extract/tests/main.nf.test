nextflow_process {

    name "Test Process UMITOOLS_EXTRACT"
    script "../main.nf"
    process "UMITOOLS_EXTRACT"
    config "./nextflow.config"
    tag "modules_nfcore"
    tag "modules"
    tag "umitools"
    tag "umitools/extract"

    test("single end") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.reads.collect { it.collect { it instanceof Map ? it : file(it).name }},
                    process.out.log.collect { it.collect { it instanceof Map ? it : file(it).name }},
                    process.out.versions
                ).match() }
            )
        }
    }

    test("single end - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("pair end") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_2.fastq.gz", checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.reads[0][1][0]).name,
                    file(process.out.reads[0][1][1]).name,
                    process.out.log.collect { it.collect { it instanceof Map ? it : file(it).name }},
                    process.out.versions
                ).match() }
            )
        }
    }

    test("pair end - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_2.fastq.gz", checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}