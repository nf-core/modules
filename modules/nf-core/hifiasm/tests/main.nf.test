nextflow_process {

    name "Test Process HifiAsm"
    script "../main.nf"
    process "HIFIASM"

    tag "modules"
    tag "modules_nfcore"
    tag "hifiasm"

    test("Test HifiAsm - fq [] [] [] []") {
        when {
            process {
                """
                input[0] = [
                    [ id : 'test'],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/fastq/test_hifi.fastq.gz', checkIfExists: true)]
                ]
                input[1] = []
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.raw_unitigs,
                    process.out.processed_contigs,
                    process.out.processed_unitigs,
                    process.out.primary_contigs,
                    process.out.alternate_contigs,
                    process.out.paternal_contigs,
                    process.out.maternal_contigs,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("Test HifiAsm - fq yak yak [] []") {
        when {
            process {
                """
                input[0] = [
                    [ id : 'test'],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/fastq/test_hifi.fastq.gz', checkIfExists: true)]
                ]
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/yak/test.yak', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/yak/test2.yak', checkIfExists: true)
                input[3] = []
                input[4] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert file(process.out.maternal_contigs.get(0).get(1)).length() == 0},
                { assert snapshot(
                    process.out.raw_unitigs,
                    process.out.processed_contigs,
                    process.out.processed_unitigs,
                    process.out.primary_contigs,
                    process.out.alternate_contigs,
                    process.out.paternal_contigs,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("Test HifiAsm - fq [] [] fq fq"){
        when {
            process {
                """
                input[0] = [
                    [ id : 'test'],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/fastq/test_hifi.fastq.gz', checkIfExists: true)]
                ]
                input[1] = []
                input[2] = []
                input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                input[4] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert file(process.out.maternal_contigs.get(0).get(1)).length() == 0},
                { assert snapshot(
                    process.out.raw_unitigs,
                    process.out.processed_contigs,
                    process.out.processed_unitigs,
                    process.out.primary_contigs,
                    process.out.alternate_contigs,
                    process.out.paternal_contigs,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("Test HifiAsm - fq yak yak fq fq"){
        when {
                """
                input[0] = [
                    [ id : 'test'],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/fastq/test_hifi.fastq.gz', checkIfExists: true)]
                ]
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/yak/test.yak', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/yak/test2.yak', checkIfExists: true)
                input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_1.fastq.gz, checkIfExists: true)
                input[4] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_2.fastq.gz, checkIfExists: true)
                """
        }
        then {
            assertAll(
                { assert !process.success}
            )
        }
    }

    test("Test HifiAsm - fq yak [] [] []"){
        when {
                """
                input[0] = [
                    [ id : 'test'],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/fastq/test_hifi.fastq.gz', checkIfExists: true)]
                ]
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/yak/test.yak', checkIfExists: true)
                input[2] = []
                input[3] = []
                input[4] = []
                """
        }
        then {
            assertAll(
                { assert !process.success}
            )
        }
    }

    test("Test HifiAsm - fq [] [] [] fq"){
        when {
                """
                input[0] = [
                    [ id : 'test'],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/fastq/test_hifi.fastq.gz', checkIfExists: true)]
                ]
                input[1] = []
                input[2] = []
                input[3] = []
                input[4] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                """
        }
        then {
            assertAll(
                { assert !process.success}
            )
        }
    }
}