nextflow_process {

    name "Test Process BRAKER3"
    script "../main.nf"
    config "./nextflow.config"
    process "BRAKER3"

    tag "modules"
    tag "modules_nfcore"
    tag "braker3"

    test("braker3 - test - 4") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file('https://raw.githubusercontent.com/Gaius-Augustus/BRAKER/f58479fe5bb13a9e51c3ca09cb9e137cab3b8471/example/genome.fa', checkIfExists: true)
                ]
                input[1] = file('http://topaz.gatech.edu/GeneMark/Braker/RNAseq.bam', checkIfExists: true)
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.aa,
                    process.out.cds,
                    process.out.citations,
                    process.out.gff3,
                    process.out.gtf,
                    process.out.hintsfile,
                    process.out.versions,
                    ).match() },
                { assert file(process.out.log[0][1]).text.contains('BRAKER RUN FINISHED') }
            )
        }

    }

    test("sarscov2 - fasta - stub") {

        options '-stub'

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                ]
                input[1] = []
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}