// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test deepsomatic
nextflow_process {

    name "Test Process DEEPSOMATIC"
    script "../main.nf"
    process "DEEPSOMATIC"

    tag "modules"
    tag "modules_nfcore"
    tag "deepsomatic"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("tumor_normal_pair") {

        // TODO nf-core: If you are created a test for a chained module
        // (the module requires running more than one process to generate the required output)
        // add the 'setup' method here.
        // You can find more information about how to use a 'setup' method in the docs (https://nf-co.re/docs/contributing/modules#steps-for-creating-nf-test-for-chained-modules).

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:
                
                input[0] = [
                    [ id:'normal' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.recalibrated.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.recalibrated.sorted.bam.bai', checkIfExists: true),
                ]
                input[1] = [
                    [ id:'tumor'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.recalibrated.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.recalibrated.sorted.bam.bai', checkIfExists: true),
                ]
                input[2] = [
                    [ id:'intervals' ],
                    []
                ]
                input[3] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]
                input[4] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
                ]
                input[5] = [
                    [ id: 'gzi' ],
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                {
                    assert snapshot(
                        process.out.vcf.collect { file(it[1]).getName() },
                        process.out.tbi.collect { file(it[1]).getName() },
                        process.out.stats,
                        process.out.f1r2,
                        process.out.versions,
                    ).match()
                }
            )
        }

    }

}
