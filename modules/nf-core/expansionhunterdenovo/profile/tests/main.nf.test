
nextflow_process {

    name "Test Process EXPANSIONHUNTERDENOVO_PROFILE"
    script "../main.nf"
    process "EXPANSIONHUNTERDENOVO_PROFILE"

    tag "modules"
    tag "modules_nfcore"
    tag "expansionhunterdenovo"
    tag "expansionhunterdenovo/profile"

    test("test-expansionhunterdenovo-profile") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
				]
				input[1] = [ [id:'fasta'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
				input[2] = [ [id:'fasta_fai'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true) ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test-expansionhunterdenovo-profile-cram") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true)
				]
				input[1] = [ [id:'fasta'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
				input[2] = [ [id:'fasta_fai'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true) ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
