nextflow_process {

    name "Test Process CONCOCT_CONCOCT"
    script "../main.nf"
    process "CONCOCT_CONCOCT"

    tag "modules"
    tag "modules_nfcore"
    tag "concoct"
    tag "concoct/concoct"
    tag "concoct/cutupfasta"
    tag "concoct/concoctcoveragetable"

    setup {
        run("CONCOCT_CUTUPFASTA") {
            script "../../cutupfasta/main.nf"
            process {
                """
                input[0] = [
                            [id: 'test', single_end: false],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                        ]
                input[1] = true
                """
            }
        }

        run("CONCOCT_CONCOCTCOVERAGETABLE") {
            script "../../concoctcoveragetable/main.nf"
            process {
                """
                ch_bam_input = Channel
                                .fromList([
                                    [
                                        [ id:'test', single_end:false ], // meta map
                                        [
                                            file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true),
                                            file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                                        ],
                                        [
                                            file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/bam/test.single_end.sorted.bam.bai', checkIfExists: true),
                                            file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                                        ]
                                    ]
                                ])


                input[0] = CONCOCT_CUTUPFASTA.out.bed.join( ch_bam_input )
                """
            }
        }
    }

    test("sarscov2 - bam") {

        when {
            process {
                """
                ch_input_for_concoctconcoct = CONCOCT_CONCOCTCOVERAGETABLE.out.tsv
                                                .join(CONCOCT_CUTUPFASTA.out.fasta)

                input[0] = ch_input_for_concoctconcoct
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.args_txt,
                        process.out.clustering_csv,
                        process.out.original_data_csv,
                        process.out.pca_components_csv,
                        process.out.pca_transformed_csv,
                        process.out.versions,
                        file(process.out.log_txt[0][1]).readLines().last().contains("CONCOCT Finished, the log shows how it went.")
                    ).match() }
            )
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [id: 'test'], [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
