nextflow_process {

    name "Test Process OPENMSTHIRDPARTY_COMETADAPTER"
    script "../main.nf"
    process "OPENMSTHIRDPARTY_COMETADAPTER"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "openms"
    tag "openmsthirdparty"
    tag "openmsthirdparty/cometadapter"
    tag "thermorawfileparser"

    setup {
        run("THERMORAWFILEPARSER") {
            script "../../../thermorawfileparser/main.nf"
            process {
                """
                input[0] = Channel.of(
                    [ id:'test'], // meta map
                    file(params.modules_testdata_base_path +'proteomics/msspectra/PXD012083_e005640_II.raw, checkIfExists: true)
                    )
                """
            }
        }
    }

    test("proteomics - search engine comet - mzml") {

        when {
            process {
                """
                input[0] = Channel.of(
                    [id:'test'],
                    THERMORAWFILEPARSER.out.spectra,
                    file(params.modules_testdata_base_path +'proteomics/database/UP000005640_9606.fasta', checkIfExists: true)
                )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("proteomics - search engine comet - mzml - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of(
                    [id:'test'],
                    THERMORAWFILEPARSER.out.spectra,
                    file(params.modules_testdata_base_path +'proteomics/database/UP000005640_9606.fasta', checkIfExists: true)
                )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
