nextflow_process {

    name "Test Process CATPACK_READS"
    script "../main.nf"
    process "CATPACK_READS"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "catpack"
    tag "catpack/reads"
    tag "catpack/prepare"

    setup {
        run('CATPACK_PREPARE') {
            script '../../prepare/main.nf'
            process {
            """
            input[0] = [ [id:'test'], [ file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/proteome.fasta', checkIfExists: true)  ] ]
            input[1] = [ file(params.modules_testdata_base_path + 'genomics/sarscov2/metagenome/prot_nodes.dmp', checkIfExists: true) ]
            input[2] = [ file(params.modules_testdata_base_path + 'genomics/sarscov2/metagenome/prot_names.dmp', checkIfExists: true) ]
            input[3] = [ file(params.modules_testdata_base_path + 'genomics/sarscov2/metagenome/prot.accession2taxid.gz', checkIfExists: true) ]
            """
            }
        }
    }

    test("sarscov2 - mcr") {

        when {
            process {
                """
                input[0] = [
                            [id:'test'],
                            [
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                            ]
                        ]
                input[1] = [ [id:'test'], [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true)  ] ]
                input[2] = CATPACK_PREPARE.out.db
                input[3] = CATPACK_PREPARE.out.taxonomy
                input[4] = [ [id:'test'], [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/scaffolds.fasta', checkIfExists: true)  ] ]
                input[5] = 'mcr'
                input[6]= [[:],[]]
                input[7]= [[:],[]]
                input[8]= [[:],[]]
                input[9]= [[:],[]]
                input[10]= [[:],[]]
                input[11]= [[:],[]]
                input[12]= [[:],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        file(process.out.rat_log.get(0).get(1)).readLines().last().contains('RAT is done!'),
                        file(process.out.complete_abundance.get(0).get(1)).readLines().last().contains('unclassified'),
                        file(process.out.contig_abundance.get(0).get(1)).readLines().last().contains('NODE_2'),
                        file(process.out.read2classification.get(0).get(1)).readLines().last().contains('no taxid assigned'),
                        process.out.alignment_diamond,
                        process.out.contig2classification,
                        file(process.out.cat_log.get(0).get(1)).readLines().last().contains('CAT is done!'),
                        process.out.orf2lca,
                        process.out.faa,
                        process.out.gff,
                        process.out.unmapped_diamond,
                        process.out.unmapped_fasta,
                        process.out.unmapped2classification,
                        process.out.versions
                    ).match()
                }
            )
        }

    }

    test("sarscov2 - cr") {

        when {
            process {
                """
                input[0] = [
                            [id:'test'],
                            [
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                            ]
                        ]
                input[1] = [ [id:'test'], [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true)  ] ]
                input[2] = CATPACK_PREPARE.out.db
                input[3] = CATPACK_PREPARE.out.taxonomy
                input[4]= [[:],[]]
                input[5] = 'cr'
                input[6]= [[:],[]]
                input[7]= [[:],[]]
                input[8]= [[:],[]]
                input[9]= [[:],[]]
                input[10]= [[:],[]]
                input[11]= [[:],[]]
                input[12]= [[:],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        file(process.out.rat_log.get(0).get(1)).readLines().last().contains('RAT is done!'),
                        file(process.out.complete_abundance.get(0).get(1)).readLines().last().contains('unclassified'),
                        file(process.out.contig_abundance.get(0).get(1)).readLines().last().contains('NODE_2'),
                        file(process.out.read2classification.get(0).get(1)).readLines().last().contains('no taxid assigned'),
                        process.out.alignment_diamond,
                        process.out.contig2classification,
                        file(process.out.cat_log.get(0).get(1)).readLines().last().contains('CAT is done!'),
                        process.out.orf2lca,
                        process.out.faa,
                        process.out.gff,
                        process.out.unmapped_diamond,
                        process.out.unmapped_fasta,
                        process.out.unmapped2classification,
                        process.out.versions
                    ).match()
                }
            )
        }

    }

    test("sarscov2 - mr") {

        when {
            process {
                """
                input[0] = [
                            [id:'test'],
                            [
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                            ]
                        ]
                input[1]= [ [id:'test'], [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true)  ] ]
                input[2] = CATPACK_PREPARE.out.db
                input[3] = CATPACK_PREPARE.out.taxonomy
                input[4] = [ [id:'test'], [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/scaffolds.fasta', checkIfExists: true)  ] ]
                input[5] = 'cr'
                input[6]= [[:],[]]
                input[7]= [[:],[]]
                input[8]= [[:],[]]
                input[9]= [[:],[]]
                input[10]= [[:],[]]
                input[11]= [[:],[]]
                input[12]= [[:],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        file(process.out.rat_log.get(0).get(1)).readLines().last().contains('RAT is done!'),
                        file(process.out.complete_abundance.get(0).get(1)).readLines().last().contains('unclassified'),
                        file(process.out.contig_abundance.get(0).get(1)).readLines().last().contains('NODE_2'),
                        file(process.out.read2classification.get(0).get(1)).readLines().last().contains('no taxid assigned'),
                        process.out.alignment_diamond,
                        process.out.contig2classification,
                        file(process.out.cat_log.get(0).get(1)).readLines().last().contains('CAT is done!'),
                        process.out.orf2lca,
                        process.out.faa,
                        process.out.gff,
                        process.out.unmapped_diamond,
                        process.out.unmapped_fasta,
                        process.out.unmapped2classification,
                        process.out.versions
                    ).match()
                }
            )
        }

    }

    test("sarscov2 - mcr - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                            [id:'test'],
                            [
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                            ]
                        ]
                input[1] = [ [id:'test'], [ file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)  ] ]
                input[2] = CATPACK_PREPARE.out.db
                input[3] = CATPACK_PREPARE.out.taxonomy
                input[4]= [[:],[]]
                input[5] = 'cr'
                input[6]= [[:],[]]
                input[7]= [[:],[]]
                input[8]= [[:],[]]
                input[9]= [[:],[]]
                input[10]= [[:],[]]
                input[11]= [[:],[]]
                input[12]= [[:],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
