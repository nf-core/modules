nextflow_process {

    name "Test Process CATPACK_PREPARE"
    script "../main.nf"
    process "CATPACK_PREPARE"
    config './nextflow.config'

    tag "modules"
    tag "modules_nfcore"
    tag "catpack"
    tag "catpack/prepare"

    test("metagenome - sarscov2 - fasta") {

        when {
            process {
                """
                input[0] = [ [id:'test'], [ file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/proteome.fasta', checkIfExists: true)  ] ]
                input[1] = [ file(params.modules_testdata_base_path + 'genomics/sarscov2/metagenome/prot_nodes.dmp', checkIfExists: true) ]
                input[2] = [ file(params.modules_testdata_base_path + 'genomics/sarscov2/metagenome/prot_names.dmp', checkIfExists: true) ]
                input[3] = [ file(params.modules_testdata_base_path + 'genomics/sarscov2/metagenome/prot.accession2taxid.gz', checkIfExists: true) ]
                """
            }
        }

        then {
            def allFiles = file(process.out.db.get(0).get(1)).listFiles().sort()
            // Filter out all files that have unstable content (ie: timestamp, non-deterministic or any other variable content)
            def unstableNames = ["database.dmnd", "database.fastaid2LCAtaxid", "database.log", "database.taxids_with_multiple_offspring"]
            // Filter out the unstable files
            def stableFiles = allFiles.grep { file -> !unstableNames.contains(file.name) }
            // Collect the stable file names
            def stableNames = allFiles.grep { file -> unstableNames.contains(file.name) }.collect { file -> file.name }

            assertAll(
                { assert process.success },
                { assert snapshot(
                        stableFiles,
                        stableNames,
                        process.out.taxonomy,
                        process.out.versions
                    ).match() }
            )
        }
    }

    test("metagenome - sarscov2 - fasta - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [id:'test'], [ file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/proteome.fasta', checkIfExists: true)  ] ]
                input[1] = [ file(params.modules_testdata_base_path + 'genomics/sarscov2/metagenome/prot_nodes.dmp', checkIfExists: true) ]
                input[2] = [ file(params.modules_testdata_base_path + 'genomics/sarscov2/metagenome/prot_names.dmp', checkIfExists: true) ]
                input[3] = [ file(params.modules_testdata_base_path + 'genomics/sarscov2/metagenome/prot.accession2taxid.gz', checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}