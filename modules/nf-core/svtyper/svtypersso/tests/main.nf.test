nextflow_process {

    name "Test Process SVTYPER_SVTYPERSSO"
    script "../main.nf"
    process "SVTYPER_SVTYPERSSO"

    tag "modules"
    tag "modules_nfcore"
    tag "svtyper"
    tag "svtyper/svtypersso"

    test("homo_sapiens - bam - vcf - fasta") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf', checkIfExists: true)
                ]
                input[1] = [
                     [ id:'reference' ], // meta map
                     file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.gt_vcf,
                                    process.out.versions).match("bam_vcf_fasta") },
                { assert file(process.out.json.get(0).get(1)).exists() }
            )
        }
    }

    test("homo_sapiens - bam - vcf - fasta - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf', checkIfExists: true)
                ]
                input[1] = [
                     [ id:'reference' ], // meta map
                     file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("bam_vcf_fasta_stub") }
            )
        }
    }

    test("homo_sapiens - bam") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    []
                ]
                input[1] = [
                     [ id:'reference' ], // meta map
                     []
                ]
                """
            }
        }


        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.gt_vcf,
                                    process.out.versions).match("bam") },
                { assert file(process.out.json.get(0).get(1)).exists() }
            )
        }
    }

    test("homo_sapiens - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    []
                ]
                input[1] = [
                     [ id:'reference' ], // meta map
                     []
                ]
                """
            }
        }


        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("bam_stub") }
            )
        }
    }
}
