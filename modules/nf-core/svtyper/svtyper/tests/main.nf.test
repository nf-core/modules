
nextflow_process {

    name "Test Process SVTYPER_SVTYPER"
    script "../main.nf"
    process "SVTYPER_SVTYPER"

    tag "modules"
    tag "modules_nfcore"
    tag "svtyper"
    tag "svtyper/svtyper"

    test("test-svtyper-svtyper") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf', checkIfExists: true)
				]
				input[1] = [
				    [id:"ref"],
				    fasta = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
				]
				input[2] = [
				    [id:"ref"],
				    fai = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					process.out.json,
					file(process.out.gt_vcf[0][1]).name, // nft-vcf says, 'Your input file has a malformed header'.
					bam(process.out.bam[0][1]).getHeaderMD5(),
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-svtyper-svtyper-stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = [
				    [ id:'test' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf', checkIfExists: true)
				]
				input[1] = [
				    [id:"ref"],
				    fasta = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
				]
				input[2] = [
				    [id:"ref"],
				    fai = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
