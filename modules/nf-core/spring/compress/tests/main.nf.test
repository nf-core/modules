
nextflow_process {

    name "Test Process SPRING_COMPRESS"
    script "../main.nf"
    process "SPRING_COMPRESS"

    tag "modules"
    tag "modules_nfcore"
    tag "spring"
    tag "spring/compress"

    test("test-spring-compress-single-end") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:true ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
				    []
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.spring[0][1]).name,
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("test-spring-compress-paired-end") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.spring[0][1]).name,
                    process.out.versions
                    ).match()
                }
            )
        }
    }

}
