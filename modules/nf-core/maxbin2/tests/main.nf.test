
nextflow_process {

    name "Test Process MAXBIN2"
    script "../main.nf"
    process "MAXBIN2"

    tag "modules"
    tag "modules_nfcore"
    tag "maxbin2"
    tag "coverm/contig"

    test("test-maxbin2") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test1', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkIfExists: true),
				    []
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					process.out.binned_fastas,
					process.out.summary,
					file(process.out.log[0][1]).name,
					process.out.marker_counts,
					file(process.out.unbinned_fasta[0][1]).name, // empty
					process.out.tooshort_fasta,
					file(process.out.marker_bins[0][1]).name, // unstable
					process.out.marker_genes,
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-maxbin2- abund") {

        setup {
            run("COVERM_CONTIG") {
                script "../../coverm/contig/main.nf"
                process {
                    """
                    input[0] = Channel.of(
                        [
                            [ id:'test', single_end:false ], // meta map
                            [
                                file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkIfExists: true)
                            ]
                        ],
                        [
                            [ id:'test2', single_end:false ], // meta map
                            [
                                file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_1.fastq.gz', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_2.fastq.gz', checkIfExists: true)
                            ]
                        ]
                    )
                    input[1] = [
                        [id: "ref"],
                        file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true)
                    ]
                    input[2] = false
                    input[3] = false
                    """
                }
            }
        }

        when {
            process {
                """
                ch_coverm_depths = COVERM_CONTIG.out.coverage
                    .map { meta, coverage -> coverage }
                    .collect()
                    .map { coverages -> [ [id: 'ref'], coverages ] }

                input[0] = Channel.of(
                        [
				            [ id: 'ref' ], // meta map
				            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true)
				        ]
                    ).combine(ch_coverm_depths, by: 0)
                    .map { meta, contigs, coverages -> [ meta, contigs, [], coverages ] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					process.out.binned_fastas,
					process.out.summary,
					file(process.out.log[0][1]).name,
					process.out.marker_counts,
					file(process.out.unbinned_fasta[0][1]).name, // empty
					process.out.tooshort_fasta,
					file(process.out.marker_bins[0][1]).name, // unstable
					process.out.marker_genes,
					process.out.versions
					).match()
				}
            )
        }
    }

    test("test-maxbin2 - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
				    [ id:'test1', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkIfExists: true),
				    []
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }


}
