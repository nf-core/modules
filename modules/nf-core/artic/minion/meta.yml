name: artic_minion
description: |
  Run the alignment/variant-call/consensus logic of the artic pipeline
keywords:
  - artic
  - aggregate
  - demultiplexed reads
tools:
  - artic:
      description: ARTIC pipeline - a bioinformatics pipeline for working with virus
        sequencing data sequenced with nanopore
      homepage: https://artic.readthedocs.io/en/latest/
      documentation: https://artic.readthedocs.io/en/latest/
      tool_dev_url: https://github.com/artic-network/fieldbioinformatics
      licence: ["MIT"]
      identifier: biotools:artic
input:
  - - meta:
        type: map
        description: |
          Groovy Map containing sample information
          e.g. [ id:'test', single_end:false ]
    - fastq:
        type: file
        description: FastQ file containing reads
        pattern: "*.{fastq.gz}"
  - - meta2:
        type: map
        description: |
          Groovy Map containing model information
          e.g. [ id:'test', single_end:false ]
    - model_dir:
        type: directory
        description: Path containing clair3 models, defaults to models packaged with conda installation
        pattern: "*"
    - model:
        type: string
        description: |
          The model to use for clair3, if not provided the pipeline will try to figure
          it out the appropriate model from the read fastq
  - - meta3:
        type: map
        description: |
          Groovy Map containing scheme information
          e.g. [ id:'test', single_end:false ]
    - fasta:
        type: file
        description: Scheme reference fasta file
        pattern: "*.{fasta}"
    - bed:
        type: file
        description: Scheme BED file
        pattern: "*.{bed}"
output:
  - results:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${prefix}.*:
          type: file
          description: Aggregated FastQ files
          pattern: "*.fastq.gz"
  - bam:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${prefix}.sorted.bam:
          type: file
          description: BAM file
          pattern: "*.{sorted.bam}"
  - bai:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${prefix}.sorted.bam.bai:
          type: file
          description: BAM index file
          pattern: "*.{sorted.bai}"
  - bam_trimmed:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${prefix}.trimmed.rg.sorted.bam:
          type: file
          description: BAM file with the primers left on
          pattern: "*.{trimmed.rg.sorted.bam}"
  - bai_trimmed:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${prefix}.trimmed.rg.sorted.bam.bai:
          type: file
          description: BAM index file of bam_trimmed
          pattern: "*.{sorted.bai}"
  - bam_primertrimmed:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${prefix}.primertrimmed.rg.sorted.bam:
          type: file
          description: BAM containing reads after primer-binding site trimming
          pattern: "*.{trimmed.rg.sorted.bam}"
  - bai_primertrimmed:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${prefix}.primertrimmed.rg.sorted.bam.bai:
          type: file
          description: BAM index file of bam_primertrimmed
          pattern: "*.{primertrimmed.rg.sorted.bam.bai}"
  - fasta:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${prefix}.consensus.fasta:
          type: file
          description: FAST file with consensus sequence
          pattern: "*.{consensus.fasta}"
  - vcf:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${prefix}.pass.vcf.gz:
          type: file
          description: VCF file containing detected variants passing quality filter
          pattern: "*.{pass.vcf.gz}"
  - tbi:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${prefix}.pass.vcf.gz.tbi:
          type: file
          description: VCF index
          pattern: "*.{pass.vcf.gz.tbi}"
  - json:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - "*.json":
          type: file
          description: JSON file for MultiQC
          pattern: "*.json"
  - versions:
      - versions.yml:
          type: file
          description: File containing software versions
          pattern: "versions.yml"
authors:
  - "@joseespinosa"
  - "@drpatelh"
maintainers:
  - "@joseespinosa"
  - "@drpatelh"
