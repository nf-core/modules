nextflow_process {

    name "Test Process ARTIC_MINION"

    script "../main.nf"
    process "ARTIC_MINION"

    tag "modules"
    tag "modules_nfcore"
    tag "untar"
    tag "artic"
    tag "artic/minion"

    test("sarscov2 - fastq") {
        when {
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/nanopore/fastq/test.fastq.gz', checkIfExists:true)
                ]
                input[1] = [[id: 'model'], [], "hifi"]
                input[2] = [
                    [id: "nCov-2019", version: "3.0.0"],
                    file('https://github.com/artic-network/primer-schemes/raw/master/nCoV-2019/V3/nCoV-2019.reference.fasta', checkIfExists:true),
                    file('https://github.com/artic-network/primer-schemes/raw/master/nCoV-2019/V3/nCoV-2019.primer.bed', checkIfExists:true)
                ]
                """
            }
        }
        then {
            def fileNames = process.out.results.collect { result ->
                def files = result[1]
                files.collect { filePath ->
                    def f = file(filePath)
                    f.directory ? f.listFiles().name : f.name
                }
            }
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    fileNames,
                    process.out.bam.collect{ file(it[1]).name },
                    process.out.bai,
                    process.out.bam_trimmed.collect{ file(it[1]).name },
                    process.out.bai_trimmed,
                    process.out.bam_primertrimmed.collect{ file(it[1]).name },
                    process.out.bai_primertrimmed,
                    process.out.fasta,
                    process.out.vcf.collect{ file(it[1]).name },
                    process.out.tbi,
                    process.out.json
                ).match() }
            )
        }
    }
    test("sarscov2 - fastq - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/nanopore/fastq/test.fastq.gz', checkIfExists:true)
                ]
                input[1] = [[id: 'model'], [], "hifi"]
                input[2] = [
                    [id: "nCov-2019", version: "3.0.0"],
                    file('https://github.com/artic-network/primer-schemes/raw/master/nCoV-2019/V3/nCoV-2019.reference.fasta', checkIfExists:true),
                    file('https://github.com/artic-network/primer-schemes/raw/master/nCoV-2019/V3/nCoV-2019.primer.bed', checkIfExists:true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
}