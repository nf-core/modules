// nf-core modules test metabat2/metabat2
nextflow_process {

    name "Test Process METABAT2_METABAT2"
    script "../main.nf"
    process "METABAT2_METABAT2"

    tag "modules"
    tag "modules_nfcore"
    tag "gunzip"
    tag "metabat2"
    tag "metabat2/metabat2"
    tag "metabat2/jgisummarizebamcontigdepths"

    setup {
        run("METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS") {
            script "../../jgisummarizebamcontigdepths/main.nf"
            process {
                """
                input[0] = [
                                [id: 'test', single_end: false],
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                            ]
                """
            }
        }

        run("GUNZIP") {
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] = METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS.out.depth
                """
            }
        }
    }

    test("sarscov2 - genome - fasta") {

        when {
            process {
                """
                input[0] = [
                                [id: 'test', single_end: false],
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                                []
                            ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - genome - fasta - depths") {

        when {
            process {
                """
                input[0] = Channel
                            .fromPath(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                            .map { it -> [[ id:'test', single_end:false ], it] }
                            .join(METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS.out.depth)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.membership[0][1]).name).match() }
            )
        }

    }

    test("sarscov2 - genome - fasta - depths uncompressed") {

        when {
            process {
                """
                input[0] = Channel
                            .fromPath(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                            .map { it -> [[ id:'test', single_end:false ], it] }
                            .join(GUNZIP.out.gunzip)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.membership[0][1]).name).match() }
            )
        }

    }

    test("sarscov2 - genome - fasta - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                                [id: 'test', single_end: false],
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                                []
                            ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
