nextflow_process {

    name "Test Process TIDK_EXPLORE"
    script "../main.nf"
    process "TIDK_EXPLORE"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "tidk"
    tag "tidk/explore"

    test("homo_sapiens-genome_21_fasta-success") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("homo_sapiens-genome_fasta-no_top_sequence") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.explore_tsv).match("no_top_sequence_explore_tsv") },
                { assert process.out.top_sequence == [] },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("stub") {

        options '-stub'

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.explore_tsv != null },
                { assert process.out.top_sequence != null },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

}
