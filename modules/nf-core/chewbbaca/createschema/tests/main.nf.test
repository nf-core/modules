nextflow_process {

    name "Test Process CHEWBBACA_CREATESCHEMA"
    script "../main.nf"
    process "CHEWBBACA_CREATESCHEMA"

    tag "modules"
    tag "modules_nfcore"
    tag "chewbbaca"
    tag "chewbbaca/createschema"

    test("sarscov2 illumina contigs [fasta]") {

        when {
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true)
                ]
                input[1] = [] // ptf
                input[2] = [] //cds
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.schema[0][1]).list().sort().findAll { file(it).name != ".genes_list" },
                                process.out.cds_coordinates,
                                process.out.invalid_cds,
                                process.out.versions).match() }
            )
        }
    }

    test("sarscov2 illumina contigs & genome [fasta]") {

        when {
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = [] // ptf
                input[2] = [] // cds
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.schema[0][1]).list().sort().findAll { file(it).name != ".genes_list" },
                                process.out.cds_coordinates,
                                process.out.invalid_cds,
                                process.out.versions).match() }
            )
        }
    }

    test("sarscov2 illumina contigs [fasta] & genome [fasta_gz]") {

        when {
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.gz', checkIfExists: true)
                ]
                input[1] = [] // ptf
                input[2] = [] // cds
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.schema[0][1]).list().sort().findAll { file(it).name != ".genes_list" },
                                process.out.cds_coordinates,
                                process.out.invalid_cds,
                                process.out.versions).match() }
            )
        }
    }

    test("sarscov2 illumina contigs [fasta] & genome [fasta_gz] - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.gz', checkIfExists: true)
                ]
                input[1] = [] // ptf
                input[2] = [] // cds
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.schema[0][1]).list().sort().findAll { file(it).name != ".genes_list" },
                                process.out.cds_coordinates,
                                process.out.invalid_cds,
                                process.out.versions).match() }
            )
        }
    }
}
