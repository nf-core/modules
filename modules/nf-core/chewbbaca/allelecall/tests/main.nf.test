nextflow_process {

    name "Test Process CHEWBBACA_ALLELECALL"
    script "../main.nf"
    process "CHEWBBACA_ALLELECALL"

    tag "modules"
    tag "modules_nfcore"
    tag "chewbbaca"
    tag "chewbbaca/allelecall"
    tag "chewbbaca/createschema"

    setup {
        run("CHEWBBACA_CREATESCHEMA") {
            script "../../createschema/main.nf"
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true)
                ]
                input[1] = [] // ptf
                input[2] = [] //cds
                """
            }
        }
    }

    test("sarscov2 - fasta_dir") {

        when {
            process {
                """
                // Create a directory and copy the FASTA file into it
                def fasta_file = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                def fasta_dir = file("\${workDir}/fasta_dir")
                fasta_dir.mkdirs()
                fasta_file.copyTo(fasta_dir)

                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    fasta_dir
                ]
                input[1] = CHEWBBACA_CREATESCHEMA.out.schema
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.stats.get(0).get(1)).exists() },
                { assert path(process.out.contigsInfo.get(0).get(1)).exists() },
                { assert path(process.out.alleles.get(0).get(1)).exists() },
                { assert path(process.out.log.get(0).get(1)).exists() },
                { assert path(process.out.versions.get(0)).exists() }
            )
        }
    }

    test("sarscov2 - fasta_dir - stub") {

        options "-stub"

        when {
            process {
                """
                // Create a directory and copy the FASTA file into it
                def fasta_file = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                def fasta_dir = file("\${workDir}/fasta_dir")
                fasta_dir.mkdirs()
                fasta_file.copyTo(fasta_dir)

                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    fasta_dir
                ]
                input[1] = CHEWBBACA_CREATESCHEMA.out.schema
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.stats.get(0).get(1)).exists() },
                { assert path(process.out.contigsInfo.get(0).get(1)).exists() },
                { assert path(process.out.alleles.get(0).get(1)).exists() },
                { assert path(process.out.log.get(0).get(1)).exists() },
                { assert path(process.out.versions.get(0)).exists() }
            )
        }
    }
}