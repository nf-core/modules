nextflow_process {

    name "Test Process SHAPEIT5_SWITCH"
    script "../main.nf"
    process "SHAPEIT5_SWITCH"

    tag "modules"
    tag "modules_nfcore"
    tag "shapeit5"
    tag "shapeit5/switch"
    tag "shapeit5/phasecommon"
    tag "bcftools/index"

    test("homo sapiens - vcf, scaffold, []") {
        config "./nextflow.config"
        setup {
            run("SHAPEIT5_PHASECOMMON") {
                script "../../../shapeit5/phasecommon"
                params {
                    shapeit5_phasecommon_args = "--filter-maf 0.001"
                }
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'scaffold', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists: true),
                        [],
                        "chr22",
                    ])
                    input[1] = Channel.of([[],[],[]])
                    input[2] = Channel.of([[],[],[]])
                    input[3] = Channel.of([[],[]])
                    """
                }
            }
            run("BCFTOOLS_INDEX") {
                script "../../../bcftools/index"
                process {
                    """
                    input[0] = SHAPEIT5_PHASECOMMON.out.phased_variant
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = SHAPEIT5_PHASECOMMON.out.phased_variant
                    .join(BCFTOOLS_INDEX.out.csi)
                    .combine(Channel.of("chr22"))
                    .combine(Channel.of([[]]))
                input[1] = Channel.of([[ id:'truth_panel'],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz",checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi",checkIfExists:true)
                ])
                input[2] = Channel.of([[ id:'freq_file'],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.sites.vcf.gz",checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.sites.vcf.gz.csi",checkIfExists:true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.errors.collect { meta, txt -> [ meta, txt.collect{ file(it).name } ] },
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo sapiens - vcf, scaffold, [] - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = Channel.of([
                    [id:'truth_panel'],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz",checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi",checkIfExists:true),
                    "chr21",
                    []
                ])
                input[1] = [[], [], []]
                input[2] = [[], [], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
