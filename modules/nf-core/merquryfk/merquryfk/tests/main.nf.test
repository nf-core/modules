nextflow_process {

    name "Test Process MERQURYFK"
    script "../main.nf"
    process "MERQURYFK_MERQURYFK"

    tag "modules"
    tag "modules_nfcore"
    tag "merquryfk"
    tag "merquryfk/merquryfk"
    tag "fastk"
    tag "fastk/fastk"

    setup {
            run("FASTK_FASTK") {
            script "../../../fastk/fastk"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                """
            }
            }
            run("FASTK_FASTK", alias: "FASTK_MAT") {
            script "../../../fastk/fastk"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], 
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                ]
                """
            }
            }

        run("FASTK_FASTK", alias: "FASTK_PAT") {
            script "../../../fastk/fastk"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_2.fastq.gz', checkIfExists: true),
                ]
                """
            }
            }
        }

   test("homo_sapiens - Illumina - png") {
        config "./nextflow.png.config"
        when {
            process {
                """
                assembly = [
                    [ id:'test', single_end:true ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]

                haplotigs = [
                    [ id:'test', single_end:true ], []
                ]
                input[0] = FASTK_FASTK.out.hist.join(FASTK_FASTK.out.ktab).join(Channel.from(assembly)).join(Channel.from(haplotigs))
                input[1] = []
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - Illumina - pdf") {
        config "./nextflow.pdf.config"
        when {
            process {
                """
                assembly = [
                    [ id:'test', single_end:true ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]

                haplotigs = [
                    [ id:'test', single_end:true ], []
                ]
                input[0] = FASTK_FASTK.out.hist.join(FASTK_FASTK.out.ktab).join(Channel.from(assembly)).join(Channel.from(haplotigs))
                input[1] = []
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
    
    test("homo_sapiens - Illumina - trio") {
        config "./nextflow.trio.config"
        when {
            process {
                """                
                assembly = [
                    [ id:'test', single_end:true ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]

                haplotigs = [
                    [ id:'test', single_end:true ], []
                ]
                input[0] = FASTK_FASTK.out.hist.join(FASTK_FASTK.out.ktab).join(Channel.from(assembly)).join(Channel.from(haplotigs))
                input[1] = FASTK_MAT.out.ktab
                input[2] = FASTK_PAT.out.ktab
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - Illumina - stub") {
        options "-stub"
        config "./nextflow.pdf.config"
        when {
            process {
                """
                assembly = [
                    [ id:'test', single_end:true ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]

                haplotigs = [
                    [ id:'test', single_end:true ], []
                ]
                input[0] = FASTK_FASTK.out.hist.join(FASTK_FASTK.out.ktab).join(Channel.from(assembly)).join(Channel.from(haplotigs))
                input[1] = []
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }


    
}