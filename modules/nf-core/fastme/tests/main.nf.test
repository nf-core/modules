nextflow_process {

    name "Test Process FASTME"
    script "../main.nf"
    process "FASTME"

    tag "modules"
    tag "modules_nfcore"
    tag "fastme"
    tag "tcoffee/seqreformat"
    tag "famsa/guidetree"

    test("setoxin - phylip - basic") {

        config "./main.config"

        setup {
            run("TCOFFEE_SEQREFORMAT") {
                script "../../tcoffee/seqreformat/main.nf"
                process {
                    """
                    input[0] = [ [ id: "test" ],
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin.ref", checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = TCOFFEE_SEQREFORMAT.out.formatted_file.collect{ meta, aln -> aln }
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("setoxin - phylip - with_tree") {

        config "./main.config"

        setup {
            run("TCOFFEE_SEQREFORMAT") {
                script "../../tcoffee/seqreformat/main.nf"
                process {
                    """
                    input[0] = [ [ id: "test" ],
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin.ref", checkIfExists: true)
                    ]
                    """
                }
            }
            run("FAMSA_GUIDETREE") {
                script "../../famsa/guidetree/main.nf"
                process {
                    """
                    input[0] = [ [ id: "test" ],
                                file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin.ref", checkIfExists: true)
                            ]

                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = TCOFFEE_SEQREFORMAT.out.formatted_file.collect{ meta, aln -> aln }
                input[1] = FAMSA_GUIDETREE.out.tree.collect{ meta, tree -> tree }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("setoxin - phylip - bootstrap") {

        config "./optionals.config"

        setup {
            run("TCOFFEE_SEQREFORMAT") {
                script "../../tcoffee/seqreformat/main.nf"
                process {
                    """
                    input[0] = [ [ id: "test" ],
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin.ref", checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = TCOFFEE_SEQREFORMAT.out.formatted_file.collect{ meta, aln -> aln }
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.nwk },
                { assert process.out.matrix },
                { assert process.out.bootstrap }
            )
        }
    }
}