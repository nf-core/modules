nextflow_process {
    name "Test Process MOTUS_PROFILE"
    script "../main.nf"
    process "MOTUS_PROFILE"
    tag "modules"
    tag "modules_nfcore"
    tag "motus"
    tag "motus/downloaddb"
    tag "motus/profile"


    test("sarscov2 - illumina paired end [fastq]") {

        setup {
            run("MOTUS_DOWNLOADDB") {
                script "modules/nf-core/motus/downloaddb/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        file('https://raw.githubusercontent.com/motu-tool/mOTUs/master/motus/downloadDB.py')
                    ])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true ),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true )
                    ]
                ]
                input[1] =  MOTUS_DOWNLOADDB.out.db
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            { assert snapshot(
                    path(process.out.out[0][1]).readLines()[3..10],
                    path(process.out.log[0][1]).readLines().last().contains('Reads are filtered for'),
                    process.out.versions,
                ).match()
            }
            )
        }
    }

    test("sarscov2 - illumina paired end [bam]") {

        setup {
            run("MOTUS_DOWNLOADDB") {
                script "modules/nf-core/motus/downloaddb/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        file('https://raw.githubusercontent.com/motu-tool/mOTUs/master/motus/downloadDB.py')
                    ])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file( params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true )]
                input[1] =  MOTUS_DOWNLOADDB.out.db
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            { assert snapshot(
                    path(process.out.out[0][1]).readLines()[3..10],
                    path(process.out.log[0][1]).readLines().last().contains('Reads are filtered for'),
                    process.out.versions
                ).match()
            }
            )
        }
    }

    test("sarscov2 - illumina single end [fastq] - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file( params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true )
                ]
                input[1] =  []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot( process.out ).match() }
            )
        }
    }

    test("sarscov2 - illumina paired end [fastq] - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true ),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true )
                    ]
                ]
                input[1] =  []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot( process.out ).match() }
            )
        }
    }

    test("sarscov2 - illumina paired end [bam] - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file( params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true )]
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot( process.out ).match() }
            )
        }
    }
}
