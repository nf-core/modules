nextflow_process {

    name "Test Process CNVNATOR_CONVERT2VCF"
    config "./nextflow.config"
    script "../main.nf"
    process "CNVNATOR_CONVERT2VCF"

    tag "modules"
    tag "modules_nfcore"
    tag "cnvnator"
    tag "cnvnator/cnvnator"
    tag "cnvnator/convert2vcf"

    setup {
        run("CNVNATOR_CNVNATOR", alias: "CNVNATOR_RD") {
            script "../../cnvnator/main.nf"

            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists:true)
                    ]
                input[1] = [[:],[]]
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                """
            }
        }

        run("CNVNATOR_CNVNATOR", alias: "CNVNATOR_HIST") {
            script "../../cnvnator/main.nf"

            process {
                """
                input[0] = [[:],[],[]]
                input[1] = CNVNATOR_RD.out.root
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                """
            }
        }

        run("CNVNATOR_CNVNATOR", alias: "CNVNATOR_STAT") {
            script "../../cnvnator/main.nf"

            process {
                """
                input[0] = [[:],[],[]]
                input[1] = CNVNATOR_HIST.out.root
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                """
            }
        }

        run("CNVNATOR_CNVNATOR", alias: "CNVNATOR_PARTITION") {
            script "../../cnvnator/main.nf"

            process {
                """
                input[0] = [[:],[],[]]
                input[1] = CNVNATOR_STAT.out.root
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                """
            }
        }

        run("CNVNATOR_CNVNATOR", alias: "CNVNATOR_CALL") {
            script "../../cnvnator/main.nf"

            process {
                """
                input[0] = [[:],[],[]]
                input[1] = CNVNATOR_PARTITION.out.root
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                """
            }
        }
    }

    test("test_cnvnator_convert2vcf") {

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = CNVNATOR_CALL.out.tab
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }


    test("test_cnvnator_convert2vcf -- stub") {
        options '-stub'
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = CNVNATOR_CALL.out.tab
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}