nextflow_process {

    name "Test Process CNVNATOR_CNVNATOR"
    config "./nextflow.config"
    script "../main.nf"
    process "CNVNATOR_CNVNATOR"

    tag "modules"
    tag "modules_nfcore"
    tag "cnvnator"
    tag "cnvnator/cnvnator"

    setup {
        run("CNVNATOR_CNVNATOR", alias: "CNVNATOR_RD") {
            script "../main.nf"

            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai',checkIfExists:true)
                    ]
                input[1] = [[:],[]]
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                """
            }
        }

        run("CNVNATOR_CNVNATOR", alias: "CNVNATOR_HIST") {
            script "../main.nf"

            process {
                """
                input[0] = [[:],[],[]]
                input[1] = CNVNATOR_RD.out.root
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                """
            }
        }

        run("CNVNATOR_CNVNATOR", alias: "CNVNATOR_STAT") {
            script "../main.nf"

            process {
                """
                input[0] = [[:],[],[]]
                input[1] = CNVNATOR_HIST.out.root
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                """
            }
        }

        run("CNVNATOR_CNVNATOR", alias: "CNVNATOR_PARTITION") {
            script "../main.nf"

            process {
                """
                input[0] = [[:],[],[]]
                input[1] = CNVNATOR_STAT.out.root
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                """
            }
        }
    }

    test("test_cnvnator") {

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [[:],[],[]]
                input[1] = CNVNATOR_PARTITION.out.root
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert process.out.root },
                { assert process.out.versions },
                { assert process.out.root[0][1].size() > 0 }
            )
            assert new File(process.out.root[0][1]).exists()

        }
    }


    test("test_cnvnator -- stub") {
        options '-stub'
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [[:],[],[]]
                input[1] = CNVNATOR_PARTITION.out.root
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    process.out.versions.collect{path(it).yaml}
                    ).match() }
            )
        }
    }
}