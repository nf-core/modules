nextflow_process {

    name "Test Process SAWFISH_JOINTCALL"
    script "../main.nf"
    process "SAWFISH_JOINTCALL"

    tag "modules"
    tag "modules_nfcore"
    tag "sawfish"
    tag "sawfish/jointcall"
    tag "sawfish/discover"

    setup {
        run("SAWFISH_DISCOVER") {
            script "../../../sawfish/discover/main.nf"
            config "./sawfish_jointcall.config"
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam.bai', checkIfExists: true)
                ]

                input[1] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome3.fasta', checkIfExists: true)
                ]

                input[2] = [[], []]
                input[3] = [[], []]
                input[4] = [[], []]
                """
            }
        }
    }

    test("sawfish_jointcall") {

        when {
            process {
                """
                input[0] = SAWFISH_DISCOVER.out.discover_dir.collect()

                input[1] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome3.fasta', checkIfExists: true)
                ]

                input[2] = SAWFISH_DISCOVER.out.bam.collect()
                input[3] = [[], []]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    file(process.out.tbi.get(0).get(1)).name,
                    path(process.out.vcf.get(0).get(1)).linesGzip[2..39],
                ).match() }
            )
        }
    }

    test("sawfish_jointcall_stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = SAWFISH_DISCOVER.out.discover_dir.collect()

                input[1] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome3.fasta', checkIfExists: true)
                ]

                input[2] = SAWFISH_DISCOVER.out.bam.collect()
                input[3] = [[], []]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
