nextflow_process {

    name "Test Process SAWFISH_JOINTCALL"
    script "../main.nf"
    process "SAWFISH_JOINTCALL"

    tag "modules"
    tag "modules_nfcore"
    tag "sawfish"
    tag "sawfish/jointcall"
    tag "sawfish/discover"


    setup {
        run("SAWFISH_DISCOVER") {
            script "../../../sawfish/discover/main.nf"
            config "./sawfish_jointcall.config"
            process {
                """
                input[0] = Channel.fromList([
                    tuple(
                        [ id:'sample1' ],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam.bai', checkIfExists: true)
                    ),
                    tuple(
                        [id:'sample2'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA037562_downsampled.pbmm2.repeats.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA037562_downsampled.pbmm2.repeats.bam.bai', checkIfExists: true),
                    )
                ])
                input[1] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome3.fasta', checkIfExists: true)
                ]
                input[2] = [[], []]
                input[3] = [[], []]
                input[4] = [[], []]
                """
            }
        }
    }


    test("sawfish_jointcall") {

        when {
            process {
                """

                input[0] = SAWFISH_DISCOVER.out.discover_dir
                                .map { it[1] }
                                .collect()
                                .map { dirs -> tuple([ id:'cohort' ], dirs) }

                input[1] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome3.fasta', checkIfExists: true)
                ]

                // Provide a single tuple: cohort meta + list of BAMs + list of indexes
                input[2] = Channel.fromList([
                    tuple(
                        [ id:'cohort' ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA037562_downsampled.pbmm2.repeats.bam', checkIfExists: true)
                        ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam.bai', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA037562_downsampled.pbmm2.repeats.bam.bai', checkIfExists: true)
                        ]
                    )
                ])
                input[3] = [[], []]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    file(process.out.tbi.get(0).get(1)).name,
                    path(process.out.vcf.get(0).get(1)).linesGzip[2..39],
                ).match() }
            )
        }
    }

    test("sawfish_jointcall - one sample") {
        tag "one_sample"
        when {
            process {
                """

                input[0] = SAWFISH_DISCOVER.out.discover_dir
                                .filter { meta, dir -> meta.id == "sample1" }
                                .map { it[1] }
                                .collect()
                                .map { dirs -> tuple([ id:'cohort' ], dirs) }

                input[1] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome3.fasta', checkIfExists: true)
                ]

                // Provide a single tuple: cohort meta + list of BAMs + list of indexes
                input[2] = Channel.fromList([
                    tuple(
                        [ id:'cohort' ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam', checkIfExists: true)
                        ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam.bai', checkIfExists: true)
                        ]
                    )
                ])
                input[3] = [[], []]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    file(process.out.tbi.get(0).get(1)).name,
                    path(process.out.vcf.get(0).get(1)).linesGzip[2..39],
                ).match() }
            )
        }
    }

    test("sawfish_jointcall_sample_csv") {

        when {
            process {
                """

                input[0] = SAWFISH_DISCOVER.out.discover_dir
                                .map { it[1] }
                                .collect()
                                .map { dirs -> tuple([ id:'cohort' ], dirs) }

                input[1] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome3.fasta', checkIfExists: true)
                ]

                // Provide a single tuple: cohort meta + list of BAMs + list of indexes
                input[2] = Channel.fromList([
                    tuple(
                        [ id:'cohort' ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA037562_downsampled.pbmm2.repeats.bam', checkIfExists: true)
                        ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam.bai', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA037562_downsampled.pbmm2.repeats.bam.bai', checkIfExists: true)
                        ]
                    )
                ])
                input[3] = Channel.of("sample1", "sample2")
                    .collectFile(name:"samples.csv", newLine:true).map { file -> [ [ id: 'cohort' ], file ] }

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    file(process.out.tbi.get(0).get(1)).name,
                    path(process.out.vcf.get(0).get(1)).linesGzip[2..39],
                ).match() }
            )
        }
    }

    test("sawfish_jointcall_stub") {

        options "-stub"

        when {
            process {
                """

                input[0] = SAWFISH_DISCOVER.out.discover_dir
                                .map { it[1] }
                                .collect()
                                .map { dirs -> tuple([ id:'cohort' ], dirs) }

                input[1] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome3.fasta', checkIfExists: true)
                ]

                // Provide a single tuple: cohort meta + list of BAMs + list of indexes
                input[2] = Channel.fromList([
                    tuple(
                        [ id:'cohort' ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA037562_downsampled.pbmm2.repeats.bam', checkIfExists: true)
                        ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam.bai', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/NA037562_downsampled.pbmm2.repeats.bam.bai', checkIfExists: true)
                        ]
                    )
                ])
                input[3] = [[], []]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
