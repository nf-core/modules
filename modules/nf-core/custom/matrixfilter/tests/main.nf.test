nextflow_process {

    name "Test Process CUSTOM_MATRIXFILTER"
    script "../main.nf"
    process "CUSTOM_MATRIXFILTER"
    config "./nextflow.config"
    tag "modules"
    tag "modules_nfcore"
    tag "custom_matrixfilter"
    tag "custom"
    tag "custom/matrixfilter"

    test("test_custom_matrixfilter") {

        when {
            process {
                """
                input[0] = [ [id:"test"], file("https://github.com/nf-core/test-datasets/raw/refs/heads/differentialabundance/modules_testdata/SRP254919.salmon.merged.gene_counts.top1000cov.assay.tsv",checkIfExists: true) ]
                input[1] = [ [id:"test"], file("https://github.com/nf-core/test-datasets/raw/refs/heads/differentialabundance/modules_testdata/SRP254919.samplesheet.sample_metadata.tsv",checkIfExists: true) ]
                """

            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out.filtered).match("filtered") },
                { assert snapshot(process.out.tests).match("tests") },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }
    }

    test("test_custom_matrixfilter - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [id:"test"], file("https://github.com/nf-core/test-datasets/raw/refs/heads/differentialabundance/modules_testdata/SRP254919.salmon.merged.gene_counts.top1000cov.assay.tsv",checkIfExists: true) ]
                input[1] = [ [id:"test"], file("https://github.com/nf-core/test-datasets/raw/refs/heads/differentialabundance/modules_testdata/SRP254919.samplesheet.sample_metadata.tsv",checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out.filtered).match("filtered_stub") },
                { assert snapshot(process.out.tests).match("tests_stub") },
                { assert snapshot(process.out.versions).match("versions_stub") }
            )
        }
    }
}
