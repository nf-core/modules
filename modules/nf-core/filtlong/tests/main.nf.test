nextflow_process {

    name "Test Process FILTLONG"
    script "../main.nf"
    process "FILTLONG"
    config "./nextflow.config"
    tag "filtlong"
    tag "modules"
    tag "modules_nfcore"

    test("sarscov2 nanopore [fastq]") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/nanopore/fastq/test.fastq.gz', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.log.get(0).get(1)).readLines().contains("Scoring long reads")},
                { assert snapshot(
                    process.out.reads,
                    process.out.versions
                    ).match()
                }
            )
        }

    }


    test("sarscov2 nanopore [fastq] + Illumina single-end [fastq]") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/nanopore/fastq/test.fastq.gz', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.log.get(0).get(1)).readLines().contains("Scoring long reads")},
                { assert snapshot(
                    process.out.reads,
                    process.out.versions
                    ).match()
                }
            )
        }

    }


    test("sarscov2 nanopore [fastq] + Illumina paired-end [fastq]") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/nanopore/fastq/test.fastq.gz', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.log.get(0).get(1)).readLines().contains("Scoring long reads")},
                { assert snapshot(
                    process.out.reads,
                    process.out.versions
                    ).match()
                }
            )
        }

    }
}
