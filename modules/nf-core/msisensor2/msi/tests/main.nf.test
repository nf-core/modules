nextflow_process {

    name "Test Process MSISENSOR2_MSI"

    script "../main.nf"
    process "MSISENSOR2_MSI"

    tag "modules"
    tag "modules_nfcore"
    tag "msisensor2"
    tag "msisensor2/scan"
    tag "msisensor2/msi"

    test("homo_sapiens tumor_only - bam - fasta scan") {
        setup {
            run("MSISENSOR2_SCAN") {
                script "../../scan/main.nf"

                process {
                    """
                    input[0] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta',checkIfExists:true)
                    input[1] = "outputfile"
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists:true),
                    [],
                    [],
                    [],
                ]
                input[1] = MSISENSOR2_SCAN.out.scan
                input[2] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.msi,
                    process.out.distribution,
                    file(process.out.somatic[0][1]).name, // Empty file
                    process.out.versions
                ).match() }
            )
        }
    }
    test("homo_sapiens tumor_normal - bam tumor bam normal - fasta scan") {
        setup {
            run("MSISENSOR2_SCAN") {
                script "../../scan/main.nf"

                process {
                    """
                    input[0] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)
                    input[1] = "outputfile"
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai',checkIfExists:true),
                    [],
                    ]
                input[1] = MSISENSOR2_SCAN.out.scan
                input[2] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.msi,
                    process.out.distribution,
                    file(process.out.somatic[0][1]).name, // Empty file
                    file(process.out.germline[0][1]).name, // Empty file
                    process.out.versions
                ).match() }
            )
        }
    }
    test("homo_sapiens tumor_only - bam - [] - models") {
        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file('https://github.com/niu-lab/msisensor2/raw/master/test/example.tumor.only.hg19.bam',checkIfExists:true),
                    file('https://github.com/niu-lab/msisensor2/raw/master/test/example.tumor.only.hg19.bam.bai',checkIfExists:true),
                    [],
                    [],
                    [],
                    ]
                input[1] = []
                input[2] = Channel.fromPath([
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/016a16e12aca2bdba3713a3be76f72cd",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/02d42c2bda19aac304d6e86390c7f328",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/1030c0aa35ca5c263daeae866ad18632",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/15c3f5ec1c020d8f44283e40a2d9b6bb",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/15d6012f9a234b7adbbeecec524aea7d",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/2cf9a58f57e78b88acd86d792fe6a7b3",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/3ba04410c7ccbfc33e8b1b11d8132ae9",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/4431c9dc08be932c460a9e67192e7c57",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/4f5fa7bed97b48093375222d242fc982",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/71e6c0d59ea09d2a7acc566560841e34",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/8144b15900bba7086e86b31a0e1f8cfd",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/9bf6f7a544f369c3262a3a6f72cfdd7b",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/b8a36f2274b33cb0ed932e85cd1ddd5a",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/c08f164ded323a8c2606c408c555d73d",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/ceaa36ddbb76dc6eb6199ed946945788",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/e05d5da7208a924762311eddc4ec96c0",
                    "https://github.com/niu-lab/msisensor2/raw/master/test/tmp/models_hg19_17sites/f8a20acf51ccb2b0ce6af42f24a8b5ef",
                ], checkIfExists:true).collect()
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.msi,
                    process.out.distribution,
                    file(process.out.somatic[0][1]).name, // Empty file
                    process.out.versions
                ).match() }
            )
        }
    }

    test("homo_sapiens tumor_only - bam -- stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists:true),
                    [],
                    [],
                    [],
                ]
                input[1] = []
                input[2] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
}