nextflow_process {

    name "Test Process 2FAST2Q"
    script "../main.nf"
    process "FAST2Q"

    tag "modules"
    tag "modules_nfcore"
    tag "fast2q"
    
    config './nextflow.config'

    test("Extracting all features at position=0 with default length of 20bp from a FASTQ file (without optional library.csv)") {
        
        when {
            
            params {
                module_args = '--mo EC'
            }

            process {
                """
                input[0] = [
                    [ id:'test1', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + '/example.fastq.gz', checkIfExists: true) // FASTQ file
                ]
                input[1] = [
                    [ id:'test2', single_end:true ], // meta map for second input
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.count_matrix).exists() } // Check processed count table exists
                { assert path(process.out.versions).readLines().join("\n").contains("2FAST2Q version") } // Verify version output
            )
        }

    }

    test("2FAST2Q self-test") {

        when {

            params {
            module_args = '-t'
                }

            process {
                """
                input[0] = [
                    [ id:'test1', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + '/example.fastq.gz', checkIfExists: true) // FASTQ file
                ]
                input[1] = [
                    [ id:'test2', single_end:true ], // meta map for second input
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.count_matrix).exists() } // Check processed count table exists
                { assert path(process.out.versions).readLines().join("\n").contains("2FAST2Q version") } // Verify version output
            )
        }

    }

    test("FASTQ file with optional library") {

        when {

            process {
                """
                input[0] = [
                    [ id:'test1', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + '/example.fastq.gz', checkIfExists: true) // FASTQ file
                ]
                input[1] = [
                    [ id:'test2', single_end:true ], // meta map for second input
                    file(params.modules_testdata_base_path + '/D39V_guides.csv', checkIfExists: true) // library file
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.count_matrix).exists() } // Check processed count table exists
                { assert path(process.out.versions).readLines().join("\n").contains("2FAST2Q version") } // Verify version output
            )
        }
    }
}
