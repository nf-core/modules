nextflow_process {

    name "Test Process SOURCEPREDICT"
    script "../main.nf"
    process "SOURCEPREDICT"
    config "./nextflow.config"
    tag "modules"
    tag "modules_nfcore"
    tag "xz/decompress"
    tag "sourcepredict"

    setup {
        run("XZ_DECOMPRESS") {
            script "../../xz/decompress/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [],
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/metagenome/taxonomy/misc/taxa_sqlite.xz', checkIfExists: true)
                ])
                """
            }
        }
    }

    test("metagenome - csv") {

        when {
            process {
                """                
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/metagenome/taxonomy/misc/sink_taxid.csv', checkIfExists: true),
                ]
                input[1] = file(params.modules_testdata_base_path + 'genomics/prokaryotes/metagenome/taxonomy/misc/sources_taxid.csv', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/prokaryotes/metagenome/taxonomy/misc/sources_labels.csv', checkIfExists: true)
                input[3] = XZ_DECOMPRESS.out.file.map{ it[1] }
                input[4] = file(params.modules_testdata_base_path + 'genomics/prokaryotes/metagenome/taxonomy/misc/taxa_sqlite_traverse.pkl', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("metagenome - csv - stub") {

        options "-stub"

        when {
            process {
                """                
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/metagenome/taxonomy/misc/sink_taxid.csv', checkIfExists: true),
                ]
                input[1] = file(params.modules_testdata_base_path + 'genomics/prokaryotes/metagenome/taxonomy/misc/sources_taxid.csv', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/prokaryotes/metagenome/taxonomy/misc/sources_labels.csv', checkIfExists: true)
                input[3] = XZ_DECOMPRESS.out.file.map{ it[1] }
                input[4] = file(params.modules_testdata_base_path + 'genomics/prokaryotes/metagenome/taxonomy/misc/taxa_sqlite_traverse.pkl', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
