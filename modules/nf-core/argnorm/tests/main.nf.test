nextflow_process {
    name "Test Process ARGNORM"
    script "../main.nf"
    process "ARGNORM"

    tag "modules"
    tag "modules_nfcore"
    tag "argnorm"

    test("argnorm - amrfinderplus_ncbi_raw - tsv") {
        config './argnorm_raw.config'

        when {
            process {
                """
                input[0] = [
                    [ id:'argnorm_raw.tsv' ], // meta map
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/delete_me/amrfinderplus/test_output.tsv", checkIfExists: true)
                ]
                input[1] = 'amrfinderplus'
                input[2] = 'ncbi'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("argnorm - amrfinderplus_ncbi_hamronized - tsv") {
        config './argnorm_hamronized.config'

        when {
            process {
                """
                input[0] = [
                    [ id:'argnorm_hamronized.tsv' ], // meta map
                    file("https://raw.githubusercontent.com/BigDataBiology/argNorm/main/examples/hamronized/amrfinderplus.ncbi.orfs.tsv", checkIfExists: true)
                ]
                input[1] = 'amrfinderplus'
                input[2] = 'ncbi'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("argnorm - missing tool") {

        when {
            process {
                """
                input[0] = [
                    [ id:'argnorm_raw.tsv' ], // meta map
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/delete_me/amrfinderplus/test_output.tsv", checkIfExists: true)
                ]
                input[1] = []
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert !process.success },
                { assert process.stdout.toString().contains("Tool not provided") }
            )
        }
    }

    test("argnorm - missing db") {

        when {
            process {
                """
                input[0] = [
                    [ id:'argnorm_raw.tsv' ], // meta map
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/delete_me/amrfinderplus/test_output.tsv", checkIfExists: true)
                ]
                input[1] = "abricate"
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert !process.success },
                { assert process.stdout.toString().contains("abricate requires a database but <db> not provided.") }
            )
        }
    }

    test("argnorm - amrfinderplus_ncbi_hamronized - tsv - stub") {
        options "-stub"
        config './argnorm_hamronized.config'

        when {
            process {
                """
                input[0] = [
                    [ id:'argnorm_hamronized_stub.tsv'  ], // meta map
                    file("https://raw.githubusercontent.com/BigDataBiology/argNorm/main/examples/hamronized/amrfinderplus.ncbi.orfs.tsv", checkIfExists: true)
                ]
                input[1] = 'amrfinderplus'
                input[2] = 'ncbi'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("argnorm - amrfinderplus_ncbi - tsv - stub") {

        options "-stub"
        config './argnorm_raw.config'

        when {
            process {
                """
                input[0] = [
                    [ id:'argnorm_raw_stub.tsv' ], // meta map
                    file("https://raw.githubusercontent.com/BigDataBiology/argNorm/main/examples/raw/amrfinderplus.ncbi.orfs.tsv", checkIfExists: true)
                ]
                input[1] = 'amrfinderplus'
                input[2] = 'ncbi'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
