nextflow_process {

    name "Test Process RIBOTRICER_DETECTORFS"
    script "../main.nf"
    process "RIBOTRICER_DETECTORFS"

    tag "modules"
    tag "modules_nfcore"
    tag "ribotricer"
    tag "ribotricer/prepareorfs"
    tag "ribotricer/detectorfs"
    tag "gunzip"

    setup {
        run("GUNZIP") {
            script "modules/nf-core/gunzip/main.nf"
            process {
            """
            input[0] = [
                [ ],
                file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/Homo_sapiens.GRCh38.dna.chromosome.20.fa.gz", checkIfExists: true)
            ]
            """
            }
        }
        run("RIBOTRICER_PREPAREORFS") {
            script "modules/nf-core/ribotricer/prepareorfs/main.nf"
            process {
            """
            input[0] = GUNZIP.out.gunzip.map{[
                [id:'homo_sapiens_chr20'], 
                it[1],
                file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/Homo_sapiens.GRCh38.111_chr20.gtf", checkIfExists: true)
            ]}
            """
            }
        }

    }

    test("human chr20 - bam") {

        config './nextflow.config'

        when {
            process {
                """
                input[0] = [ 
                    [ id:'test', single_end:true, strandedness:'forward' ], // meta map
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780888_chr20.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/riboseq_expression/aligned_reads/SRX11780888_chr20.bam.bai", checkIfExists: true)
                ]
                input[1] = RIBOTRICER_PREPAREORFS.out.candidate_orfs
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
}




