// nf-core modules test trgt/merge
nextflow_process {

    name "Test Process TRGT_MERGE"
    script "../main.nf"
    process "TRGT_MERGE"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "trgt"
    tag "trgt/merge"
    tag "trgt/genotype"
    tag "samtools/faidx"
    tag "samtools/sort"
    tag "samtools/index"
    tag "bcftools/sort"
    tag "gunzip"

    setup {
        run("GUNZIP"){
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] = [
                    [ id : 'chr22' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr22_chr22_KI270734v1_random/sequence/genome.fa.gz', checkIfExists: true)
                ]
                """
            }
        }
        run("SAMTOOLS_FAIDX"){
            script "../../../samtools/faidx/main.nf"
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = [[],[]]
                """
            }
        }
        run("TRGT_GENOTYPE"){
            script "../../genotype/main.nf"
            process {
                """
                input[0] = Channel.fromList([
                    tuple(
                        [ id:'test1' ],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam.bai', checkIfExists: true),
                        'XX'
                    ),
                    tuple(
                        [ id:'test2' ],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam.bai', checkIfExists: true),
                        'XX'
                    )
                ])
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = Channel.of('chr22\t18890357\t18890451\tID=TEST;MOTIFS=AT;STRUC=(AT)n')
                            .collectFile(name : 'repeats.bed', newLine: false)
                            .map { file -> [ [ id : 'chr22' ], file ] }
                            .first()
                """
            }
        }
        run("BCFTOOLS_SORT"){
            script "../../../bcftools/sort/main.nf"
            process {
                """
                input[0] = TRGT_GENOTYPE.out.vcf
                """
            }
        }
    }
    test("homo sapiens - 2 VCFs") {
        when {
            process {
                """
                input[0] = BCFTOOLS_SORT.out.vcf
                            .join(BCFTOOLS_SORT.out.tbi)
                            .map { meta, vcf, tbi -> [ [ id : 'test' ], vcf, tbi ] }
                            .groupTuple()
                input[1] = [[],[]]
                input[2] = [[],[]]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).vcf.variantsMD5,
                    path(process.out.vcf.get(0).get(1)).vcf.summary,
                    path(process.out.vcf.get(0).get(1)).vcf.sampleCount,
                    process.out.versions
                ).match() }
            )
        }
    }
    test("homo sapiens - 2 VCFs - reference") {
        when {
            process {
                """
                input[0] = BCFTOOLS_SORT.out.vcf
                            .join(BCFTOOLS_SORT.out.tbi)
                            .map { meta, vcf, tbi -> [ [ id : 'test' ], vcf, tbi ] }
                            .groupTuple()
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).vcf.variantsMD5,
                    path(process.out.vcf.get(0).get(1)).vcf.summary,
                    path(process.out.vcf.get(0).get(1)).vcf.sampleCount,
                    process.out.versions
                ).match() }
            )
        }
    }
    test("homo sapiens - 1 VCF") {
        when {
            process {
                """
                input[0] = BCFTOOLS_SORT.out.vcf
                            .join(BCFTOOLS_SORT.out.tbi)
                            .first()
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                """
            }
        }
        then {
            assertAll(
                { assert !process.success }
            )
        }
    }
    test("homo sapiens - 1 VCF - --force-single") {
        when {
            params {
                trgt_merge_args = "--force-single"
            }
            process {
                """
                input[0] = BCFTOOLS_SORT.out.vcf
                            .join(BCFTOOLS_SORT.out.tbi)
                            .first()
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).vcf.variantsMD5,
                    path(process.out.vcf.get(0).get(1)).vcf.summary,
                    path(process.out.vcf.get(0).get(1)).vcf.sampleCount,
                    process.out.versions
                ).match() }
            )
        }
    }
    test("homo sapiens - 2 VCFs - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = BCFTOOLS_SORT.out.vcf
                            .join(BCFTOOLS_SORT.out.tbi)
                            .map { meta, vcf, tbi -> [ [ id : 'test' ], vcf, tbi ] }
                            .groupTuple()
                input[1] = [[],[]]
                input[2] = [[],[]]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
