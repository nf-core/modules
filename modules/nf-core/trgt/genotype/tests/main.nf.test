// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test trgt/genotype
nextflow_process {

    name "Test Process TRGT_GENOTYPE"
    script "../main.nf"
    process "TRGT_GENOTYPE"

    tag "modules"
    tag "modules_nfcore"
    tag "trgt"
    tag "trgt/genotype"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("trgt - [bam] [bai] [fasta] [bed]") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path +  'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam', checkIfExists: true)
                ]

                input[1] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path +  'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam.bai', checkIfExists: true)
                ]

                input[2] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome3.fasta', checkIfExists: true)
                ]

                input[3] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/pacbio/bed/alz.ccs.fl.NEB_5p--NEB_Clontech_3p.flnc.clustered.singletons.merged.aligned_tc.bed', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("trgt - [bam] [bai] [fasta] [bed] - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path +  'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam', checkIfExists: true)
                ]

                input[1] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path +  'genomics/homo_sapiens/pacbio/bam/NA03697B2_downsampled.pbmm2.repeats.bam.bai', checkIfExists: true)
                ]

                input[2] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome3.fasta', checkIfExists: true)
                ]

                input[3] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/pacbio/bed/alz.ccs.fl.NEB_5p--NEB_Clontech_3p.flnc.clustered.singletons.merged.aligned_tc.bed', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
