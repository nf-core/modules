nextflow_process {
    name "Test Process CHECKM_QA"
    script "../main.nf"
    process "CHECKM_QA"

    tag "modules"
    tag "modules_nfcore"
    tag "checkm"
    tag "checkm/qa"
    tag "checkm/lineagewf"

    test("checkm - qa") {

        setup {
            run("CHECKM_LINEAGEWF") {
                script "../../lineagewf/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true)
                    ]
                    input[1] = 'fasta'
                    input[2] = [] // Download CheckM database
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = CHECKM_LINEAGEWF.out.checkm_output.join(CHECKM_LINEAGEWF.out.marker_file)
                             .map { v -> v + [file('NO_FILE')] }
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("stub") {

        options "-stub"

        setup {
            run("CHECKM_LINEAGEWF") {
                script "../../lineagewf/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true)
                    ]
                    input[1] = 'fasta'
                    input[2] = [] // Download CheckM database
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = CHECKM_LINEAGEWF.out.checkm_output.join(CHECKM_LINEAGEWF.out.marker_file)
                             .map { v -> v + [file('NO_FILE')] }
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}