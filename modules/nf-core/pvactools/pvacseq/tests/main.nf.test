// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test pvactools/pvacseq
nextflow_process {

    name "Test Process PVACTOOLS_PVACSEQ"
    script "../main.nf"
    process "PVACTOOLS_PVACSEQ"

    tag "modules"
    tag "modules_nfcore"
    tag "pvactools"
    tag "pvactools/pvacseq"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("sarscov2 - bam") {

        // TODO nf-core: If you are created a test for a chained module
        // (the module requires running more than one process to generate the required output)
        // add the 'setup' method here.
        // You can find more information about how to use a 'setup' method in the docs (https://nf-co.re/docs/contributing/modules#steps-for-creating-nf-test-for-chained-modules).

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:

                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
                // See https://nf-co.re/docs/contributing/tutorials/nf-test_assertions for more information and examples.
            )
        }

    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:

                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }

    }

}
// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test pvacseq
nextflow_process {

    name "Test Process PVACTOOLS_PVACSEQ"
    script "../main.nf"
    config "./nextflow.config"
    process "PVACTOOLS_PVACSEQ"

    tag "modules"
    tag "modules_nfcore"
    tag "pvactools"
    tag "pvactools/pvacseq"
    tag "pvactools/installvepplugin"
    tag "ensemblvep/vep"
    tag "untar"


    test("homo sapiens - vcf.gz") {

        setup {
            run("PVACTOOLS_INSTALLVEPPLUGIN") {
                script "../../installvepplugin"

                process {}
            }
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                """
                input[0] = [
                    [ id:'vep_test' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/vep.tar.gz', checkIfExists: true)
                ]
                """
                }
            }
            run("ENSEMBLVEP_VEP") {
                script "../../../../../modules/nf-core/ensemblvep/vep"

                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test' ],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/empty.vcf.gz', checkIfExists: true),
                        []
                    ])
                    input[1] = 'GRCh38'
                    input[2] = 'homo_sapiens'
                    input[3] = '106'
                    input[4] = UNTAR.out.untar.map{ it[1] }
                    input[5] = Channel.of([
                        [id:'fasta'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                    ])
                    input[6] = PVACTOOLS_INSTALLVEPPLUGIN.out.vep_plugins_dir
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ],
                    'test',
                    'HLA-A*23:01,DPA1*01:03-DPB1*105:01',
                ]).join(ENSEMBLVEP_VEP.out.vcf)
                input[1] = 'NetMHC MHCnuggetsII'
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                input[6] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                {
                    assert snapshot(
                        process.out.mhc_i_intermediate_tsv,
                        process.out.mhc_i_chunks,
                        process.out.mhc_i_fasta,
                        process.out.mhc_i_net_chop_fasta,
                        process.out.mhc_i_all_epitopes,
                        process.out.mhc_i_filtered,
                        process.out.mhc_i_all_epitopes_aggregated,
                        process.out.mhc_i_reference_matches,
                        process.out.mhc_i_metrics,
                        process.out.mhc_i_r_files,
                        process.out.mhc_i_www,
                        process.out.mhc_ii_intermediate_tsv,
                        process.out.mhc_ii_chunks,
                        process.out.mhc_ii_fasta,
                        process.out.mhc_ii_net_chop_fasta,
                        process.out.mhc_ii_all_epitopes,
                        process.out.mhc_ii_filtered,
                        process.out.mhc_ii_all_epitopes_aggregated,
                        process.out.mhc_ii_reference_matches,
                        process.out.mhc_ii_metrics,
                        process.out.mhc_ii_r_files,
                        process.out.mhc_ii_www,
                        process.out.combined_fasta,
                        process.out.combined_net_chop_fasta,
                        process.out.combined_all_epitopes,
                        process.out.combined_filtered,
                        process.out.combined_all_epitopes_aggregated,
                        process.out.combined_reference_matches,
                        process.out.combined_metrics,
                        process.out.combined_r_files,
                        process.out.combined_www
                    ).match("pvacseq_test_data")
                }
            )
        }
    }

    test("homo sapiens - vcf.gz - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ],
                    'test',
                    'HLA-A*23:01,DPA1*01:03-DPB1*105:01',
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/empty.vcf.gz', checkIfExists: true)
                ])
                input[1] = 'NetMHC MHCnuggetsII'
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                input[6] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("pvacseq_stub") }
            )
        }

    }

}