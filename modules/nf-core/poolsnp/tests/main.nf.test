nextflow_process {

    name "Test Process POOLSNP"
    script "../main.nf"
    process "POOLSNP"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "poolsnp"
    tag "samtools/mpileup"

    setup {
        run("SAMTOOLS_MPILEUP") {
            script "../../samtools/mpileup/main.nf"
            process {
            """
            input[0] = Channel.of([
                [ id:'test', single_end:false ], // meta map
                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
            ])
            input[1] = Channel.of([ file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ])
            """
            }
        }
    }

    test("sarscov2 - mpileup") {

        when {
            process {
                """
                input[0] = SAMTOOLS_MPILEUP.out.mpileup
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = params.max_cov
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    process.out.max_cov
                    ).match()
                }
            )
        }
    }
}
