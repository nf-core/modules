nextflow_process {

    name "Test Process PURGEDUPS_PURGEDUPS"
    script "../main.nf"
    process "PURGEDUPS_PURGEDUPS"
   
    tag "modules"
    tag "modules_nfcore"
    tag "purgedups"
    tag "purgedups/pbcstat"
    tag "purgedups/calcuts"
    tag "purgedups/purgedups"
   
    setup {
        run("PURGEDUPS_PBCSTAT") {
            script "../../pbcstat/main.nf"
            
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.paf',checkIfExists:true)
                    ]
                """
            }
        }
        
        run("PURGEDUPS_CALCUTS") {
            script "../../calcuts/main.nf"
            
            process {
                """
                input[0] = PURGEDUPS_PBCSTAT.out.stat
                """
            }
        }
    }

    test("test_purgedups_purgedups") {
   
        when {
            process {
                """
                pbstat_input = [
                    [id:'test'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.paf',checkIfExists:true)
                    ]

                input[0] = PURGEDUPS_PBCSTAT.out.basecov
                    .join(PURGEDUPS_CALCUTS.out.cutoff)
                    .join(Channel.value(pbstat_input))
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bed,
                    process.out.versions,
                    file(process.out.log[0][1]).name
                    ).match()}
            )
        }
    }

    test("test_purgedups_purgedups_stub") {
     
        options "-stub"

        when {
            process {
                """
                pbstat_input = [
                    [id:'test'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.paf',checkIfExists:true)
                    ]
                    
                input[0] = PURGEDUPS_PBCSTAT.out.basecov
                    .join(PURGEDUPS_CALCUTS.out.cutoff)
                    .join(Channel.value(pbstat_input))
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bed,
                    path(process.out.versions[0]).yaml,
                    file(process.out.log[0][1]).name
                    ).match()}
            )
        }
   
    }
}