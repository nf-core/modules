nextflow_process {

    name "Test Process RGI_MAIN"
    script "../main.nf"
    process "RGI_MAIN"

    tag "modules"
    tag "modules_nfcore"
    tag "rgi"
    tag "rgi/main"

    test("rgi/main - haemophilus_influenzae - genome_fna_gz") {

        when {
            process {
                """
                input[0] = [                                                                                                                                                                   
                    [ id:'test', single_end:false ], // meta map                                                                                                                            
                    file(params.test_data['haemophilus_influenzae']['genome']['genome_fna_gz'], checkIfExists: true)                                                                        
                ]
                input[1] = "asdf"
                input[2] = ["/path/to/card-db"]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() }
                { assert path(process.out.tsv[0][1]).text.contains("ORF_ID") }
            )
        }

    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    // test("sarscov2 - bam - stub") {

    //     options "-stub"

    //     when {
    //         process {
    //             """
    //             // TODO nf-core: define inputs of the process here. Example:
                
    //             input[0] = file(params.test_data['sarscov2']['illumina']['test_single_end_bam'], checkIfExists: true)
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(process.out).match() }
    //             //TODO nf-core: Add all required assertions to verify the test output.
    //         )
    //     }

    // }

}
