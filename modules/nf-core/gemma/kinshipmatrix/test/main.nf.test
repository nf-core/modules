nextflow_process {

    name "Test Process GEMMA_KINSHIPMATRIX"
    script "../main.nf"
    process "GEMMA_KINSHIPMATRIX"

    tag "modules"
    tag "modules_nfcore"
    tag "gemma"
    tag "gemma/kinshipmatrix"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("gwas - vcf - pheno") {

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:

                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file( "https://raw.githubusercontent.com/genetics-statistics/GEMMA/master/example/mouse_hs1940.geno.txt.gz", checkIfExists: true)

                ]
                input[1] = [
                    [ id:'test', single_end:false ], // meta map
                    file( "https://raw.githubusercontent.com/genetics-statistics/GEMMA/master/example/mouse_hs1940.pheno.txt", checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("gwas - vcf - pheno - stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:

                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file( "https://raw.githubusercontent.com/genetics-statistics/GEMMA/master/example/mouse_hs1940.geno.txt.gz", checkIfExists: true)

                ]
                input[1] = [
                    [ id:'test', single_end:false ], // meta map
                    file( "https://raw.githubusercontent.com/genetics-statistics/GEMMA/master/example/mouse_hs1940.pheno.txt", checkIfExists: true),
                ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }

    }

}
