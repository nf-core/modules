nextflow_process {

    name "Test Process FGBIO_FASTQTOBAM"
    script "../main.nf"
    process "FGBIO_FASTQTOBAM"

    tag "modules"
    tag "modules_nfcore"
    tag "fgbio"
    tag "fgbio/fastqtobam"

    test("homo_sapiens - [fastq1, fastq2] - default") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_umi_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_umi_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [fastq1, fastq2] - cram") {

        config "./cram.config"
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_umi_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_umi_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam,
                    file(process.out.cram[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [fastq1, fastq2] - bam") {

        config "./bam.config"
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_umi_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_umi_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - fastq1") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_umi_1_fastq_gz'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [fastq1, fastq2] - umi") {

        config "./umi.config"
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_umi_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_umi_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [fastq1, fastq2] - custom sample") {

        config "./custom_sample.config"
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_umi_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_umi_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [fastq1, fastq2] - stub") {

        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_umi_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_umi_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.versions
                ).match() }
            )
        }

    }
}
