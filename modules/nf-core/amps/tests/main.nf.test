nextflow_process {

    name "Test Process AMPS"
    script "../main.nf"
    process "AMPS"

    tag "modules"
    tag "modules_nfcore"
    tag "amps"
    tag "unzip"
    tag "malt/build"
    tag "malt/run"
    tag "maltextract"

    config "./nextflow.config"

    test("maltextract - sarscov2 - genome_fasta") {
        setup {
            run("UNZIP", alias: "UNZIP_MALT") {
                script "../../unzip/main.nf"
                process {
                    """
                    input[0] =  [[], file("s3://ngi-igenomes/test-data/createtaxdb/taxonomy/megan-nucl-Feb2022.db.zip", checkIfExists: true) ]
                    """
                }
            }
            run("UNZIP", alias: "UNZIP_MALTEXTRACT") {
                script "../../unzip/main.nf"
                process {
                    """
                    input[0] =  [ [], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/maltextract/ncbi_taxmap.zip', checkIfExists: true) ]
                    """
                }
            }
            run("MALT_BUILD") {
                script "../../malt/build/main.nf"
                process {
                    """
                    input[0] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    input[1] = []
                    input[2] = UNZIP_MALT.out.unzipped_archive.map { it[1] }
                    input[3] = "-mapDB"
                    """
                }
            }
            run("MALT_RUN") {
                script "../../malt/run/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                    ])
                    input[1] = MALT_BUILD.out.index
                    """
                }
            }
            run("MALTEXTRACT") {
                script "../../maltextract/main.nf"
                process {
                    """
                    input[0] = MALT_RUN.out.rma6
                    input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/maltextract/taxon_list.txt', checkIfExists: true)
                    input[2] = UNZIP_MALTEXTRACT.out.unzipped_archive.map{ it[1] }
                    """
                }
            }
        }
        when {
            params {
                malt_run_args = "-m BlastN -J-Xmx8G"
                malt_build_args = "--sequenceType DNA"
                maltextract_args = "-f def_anc"
            }
            process {
                """
                input[0] = MALTEXTRACT.out.results.map { it[1] }
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/maltextract/taxon_list.txt', checkIfExists: true)
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.json,
                    process.out.tsv,
                    process.out.summary_pdf.collect{file(it).name},
                    process.out.candidate_pdfs.collect{file(it).listFiles().name}
                ).match() }
            )
        }

    }

    test("sarscov2 - stub") {

        options "-stub"

        when {
            params {
                malt_run_args = "-m BlastN -J-Xmx8G"
                malt_build_args = "--sequenceType DNA"
                malt_extract_args = "-f def_anc"
            }
            process {
                """
                input[0] = []
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/maltextract/taxon_list.txt', checkIfExists: true)
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
