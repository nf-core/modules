nextflow_process {

    name "Test Process DEEPBGC_PIPELINE"
    script "../main.nf"
    process "DEEPBGC_PIPELINE"

    tag "modules"
    tag "modules_nfcore"
    tag "deepbgc"
    tag "deepbgc/pipeline"

    test("deepbgc pipeline gbk - bacteroides fragilis - test1_contigs.fa.gz") {

        setup {
 
            run("DEEPBGC_DOWNLOAD") {
                script "../..//download/main.nf"
                process {
                    """
                    """
                }
            }
            run("GUNZIP") {
                script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] =  Channel.fromList([
                        tuple([ id:'test_gbk', single_end:false ], // meta map
                                file(params.test_data['bacteroides_fragilis']['illumina']['test1_contigs_fa_gz'], checkIfExists: true))
                    ])
                    """
                }
            }
            run("PRODIGAL") {
                script "../../../prodigal/main.nf"
                process {
                    """
                    input[0] =  GUNZIP.out.gunzip
                    input[1] =  'gbk'
                    """
                }
            }
        }

        when {
            process {
                """
                input [0] = PRODIGAL.out.gene_annotations 
                input [1] = DEEPBGC_DOWNLOAD.out.db 
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("gbk_versions") },
                { assert snapshot(process.out.json).match("gbk_json") },
                { assert path(process.out.log.get(0).get(1)).exists() },
                { assert path(process.out.bgc_gbk.get(0).get(1)).exists() },
                { assert path(process.out.full_gbk.get(0).get(1)).exists() }
            )
        }

    }

    test("deepbgc pipeline fa - bacteroides fragilis - test1_contigs.fa.gz") {

        setup {
 
            run("DEEPBGC_DOWNLOAD") {
                script "../..//download/main.nf"
                process {
                    """
                    """
                }
            }
            run("GUNZIP") {
                script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] =  Channel.fromList([
                        tuple([ id:'test_gbk', single_end:false ], // meta map
                                file(params.test_data['bacteroides_fragilis']['illumina']['test1_contigs_fa_gz'], checkIfExists: true))
                    ])
                    """
                }
            }
        }

        when {
            process {
                """
                input [0] = GUNZIP.out.gunzip 
                input [1] = DEEPBGC_DOWNLOAD.out.db 
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("fa_versions") },
                { assert snapshot(process.out.bgc_gbk).match("fa_bgc_gbk") },
                { assert snapshot(process.out.bgc_png).match("fa_bgc_png") },
                { assert snapshot(process.out.score_png).match("fa_score_png") },
                { assert snapshot(process.out.pfam_tsv).match("fa_pfam_tsv") },
                { assert path(process.out.json.get(0).get(1)).exists() },
                { assert path(process.out.log.get(0).get(1)).exists() },
                { assert path(process.out.bgc_tsv.get(0).get(1)).exists() },
                { assert path(process.out.full_gbk.get(0).get(1)).exists() }        
            )                
        }
    }
}

