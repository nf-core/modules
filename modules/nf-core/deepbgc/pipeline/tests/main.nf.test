nextflow_process {

    name "Test Process DEEPBGC_PIPELINE"
    script "../main.nf"
    process "DEEPBGC_PIPELINE"

    tag "modules"
    tag "modules_nfcore"
    tag "deepbgc"
    tag "deepbgc/pipeline"
    tag "deepbgc/download"
    tag "gunzip"
    tag "prodigal"

    test("deepbgc pipeline gbk - bacteroides fragilis - test1_contigs.fa.gz") {

        setup {
            run("DEEPBGC_DOWNLOAD") {
                script "../..//download/main.nf"
                process {
                    """
                    """
                }
            }
            run("GUNZIP") {
                script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] =  Channel.fromList([
                        tuple([ id:'test_gbk', single_end:false ], // meta map
                                file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true))
                    ])
                    """
                }
            }
            run("PRODIGAL") {
                script "../../../prodigal/main.nf"
                process {
                    """
                    input[0] =  GUNZIP.out.gunzip
                    input[1] =  'gbk'
                    """
                }
            }
        }

        when {
            process {
                """
                input [0] = PRODIGAL.out.gene_annotations
                input [1] = DEEPBGC_DOWNLOAD.out.db
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bgc_gbk[0][1]).name,
                    file(process.out.full_gbk[0][1]).name,
                    file(process.out.log[0][1]).name,
                    file(process.out.readme[0][1]).name,
                    process.out.json,
                    process.out.versions).match()
                }
            )
        }

    }

    test("deepbgc pipeline fa - bacteroides fragilis - test1_contigs.fa.gz") {

        setup {
            run("DEEPBGC_DOWNLOAD") {
                script "../..//download/main.nf"
                process {
                    """
                    """
                }
            }
            run("GUNZIP") {
                script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] =  Channel.fromList([
                        tuple([ id:'test_gbk', single_end:false ], // meta map
                                file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true))
                    ])
                    """
                }
            }
            run("PRODIGAL") {
                script "../../../prodigal/main.nf"
                process {
                    """
                    input[0] =  GUNZIP.out.gunzip
                    input[1] =  'gbk'
                    """
                }
            }
        }

        when {
            process {
                """
                input [0] = GUNZIP.out.gunzip
                input [1] = DEEPBGC_DOWNLOAD.out.db
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bgc_tsv[0][1]).name,
                    file(process.out.full_gbk[0][1]).name,
                    file(process.out.json[0][1]).name,
                    file(process.out.log[0][1]).name,
                    process.out.bgc_gbk,
                    process.out.bgc_png,
                    process.out.pfam_tsv,
                    process.out.score_png,
                    process.out.versions).match()
                }
            )
        }
    }

    test("deepbgc pipeline gbk - bacteroides fragilis - test1_contigs.fa.gz - stub") {

        options "-stub"

        setup {
            run("DEEPBGC_DOWNLOAD") {
                script "../..//download/main.nf"
                process {
                    """
                    """
                }
            }
            run("GUNZIP") {
                script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] =  Channel.fromList([
                        tuple([ id:'test_gbk', single_end:false ], // meta map
                                file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true))
                    ])
                    """
                }
            }
            run("PRODIGAL") {
                script "../../../prodigal/main.nf"
                process {
                    """
                    input[0] =  GUNZIP.out.gunzip
                    input[1] =  'gbk'
                    """
                }
            }
        }

        when {
            process {
                """
                input [0] = PRODIGAL.out.gene_annotations
                input [1] = DEEPBGC_DOWNLOAD.out.db
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("deepbgc pipeline fa - bacteroides fragilis - test1_contigs.fa.gz - stub") {

        options "-stub"

        setup {
            run("DEEPBGC_DOWNLOAD") {
                script "../..//download/main.nf"
                process {
                    """
                    """
                }
            }
            run("GUNZIP") {
                script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] =  Channel.fromList([
                        tuple([ id:'test_gbk', single_end:false ], // meta map
                                file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true))
                    ])
                    """
                }
            }
            run("PRODIGAL") {
                script "../../../prodigal/main.nf"
                process {
                    """
                    input[0] =  GUNZIP.out.gunzip
                    input[1] =  'gbk'
                    """
                }
            }
        }

        when {
            process {
                """
                input [0] = GUNZIP.out.gunzip
                input [1] = DEEPBGC_DOWNLOAD.out.db
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}

