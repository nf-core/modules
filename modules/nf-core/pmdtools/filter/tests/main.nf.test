
nextflow_process {

    name "Test Process PMDTOOLS_FILTER"
    script "../main.nf"
    process "PMDTOOLS_FILTER"

    tag "modules"
    tag "modules_nfcore"
    tag "pmdtools"
    tag "pmdtools/filter"

    test("test-pmdtools-filter") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ],
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true) ]
                ]
				input[1] = 3
				input[2] = [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
					bam(process.out.bam[0][1]).getReadsMD5(),
					process.out.versions,
                    file(process.out.versions[0]).readLines()[1..2].collect { it.trim() } // Trap to catch conda version mismatches
					).match()
				}
            )
        }
    }

    test("test-pmdtools-filter-stub") {
        options '-stub'

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ],
				    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true) ]
                ]
				input[1] = 3
				input[2] = [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
