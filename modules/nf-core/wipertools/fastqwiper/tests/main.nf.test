nextflow_process {
    name "Test Process WIPERTOOLS_FASTQWIPER"
    script "../main.nf"
    process "WIPERTOOLS_FASTQWIPER"

    tag "modules"
    tag "modules_nfcore"
    tag "wipertools"
    tag "wipertools/fastqwiper"

    test("Quality mismatch - fastq") {
        config "./nextflow.config"

        when {
            params {
                module_args = '-a ACGT'
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_quality_mismatch.fastq', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.wiped_fastq.get(0).get(1)).linesGzip.size() == 8},
                {
                    def read_final_qual = path(process.out.wiped_fastq.get(0).get(1)).linesGzip[7]
                    assert read_final_qual.equals('CCCCCGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG')
                },
                { assert path(process.out.report.get(0).get(1)).readLines().size() == 11},
                {
                    def report_header = path(process.out.report.get(0).get(1)).readLines()[0]
                    assert report_header.equals('FASTQWIPER REPORT:')
                },
                {
                    def qual_check = path(process.out.report.get(0).get(1)).readLines()[9]
                    assert qual_check.equals('Reads discarded because len(SEQ) neq len(QUAL): 1')
                },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Quality mismatch - fastq - stub") {
        options "-stub"
        config "./nextflow.config"

        when {
            params {
                module_args = '-a ACGT'
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/fastq/test_quality_mismatch.fastq", checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
