nextflow_process {

    name "Test Process AMULETY_TRANSLATE"
    script "../main.nf"
    process "AMULETY_TRANSLATE"

    tag "modules"
    tag "modules_nfcore"
    tag "amulety"
    tag "amulety/translate"
    tag "untar"

    setup {
        run ("UNTAR") {
            script "../../../untar/main.nf"
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/index/igblast/igblast_base.tar', checkIfExists: true)
                    ]
                """
            }
        }
    }

    test("human - AIRR rearrangement") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/sc5p_v2_hs_PBMC_1k_bcr/sc5p_v2_hs_PBMC_1k_b_airr_rearrangement.tsv', checkIfExists: true),
                ]
                input[1] = UNTAR.out.untar.map{ it[1] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.repertoire_translated,
                                  process.out.versions).match() }
            )
        }

    }

    test("human - AIRR rearrangement - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/sc5p_v2_hs_PBMC_1k_bcr/sc5p_v2_hs_PBMC_1k_b_airr_rearrangement.tsv', checkIfExists: true),
                ]
                input[1] = UNTAR.out.untar.map{ it[1] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
