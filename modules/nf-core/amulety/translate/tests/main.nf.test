nextflow_process {

    name "Test Process AMULETY_TRANSLATE"
    script "../main.nf"
    process "AMULETY_TRANSLATE"

    tag "modules"
    tag "modules_nfcore"
    tag "amulety"
    tag "amulety/translate"

    test("human - AIRR rearrangement") {

        setup {
            run ("UNZIP") {
                script "../../../unzip/main.nf"
                process {
                    """
                    input[0] = [[],file('https://github.com/nf-core/test-datasets/raw/refs/heads/airrflow/database-cache/igblast_base.zip', checkIfExists: true)]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/sc5p_v2_hs_PBMC_1k_bcr/sc5p_v2_hs_PBMC_1k_b_airr_rearrangement.tsv', checkIfExists: true),
                ]
                input[1] = UNZIP.out.unzipped_archive.map{ it[1] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.repertoire_translated,
                                  process.out.versions).match() }
            )
        }

    }

    test("human - AIRR rearrangement - stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:

                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger/sc5p_v2_hs_PBMC_1k_bcr/sc5p_v2_hs_PBMC_1k_b_airr_rearrangement.tsv', checkIfExists: true),
                ]
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
