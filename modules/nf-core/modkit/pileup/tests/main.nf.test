nextflow_process {

    name "Test Process MODKIT_PILEUP"
    script "../main.nf"
    tag "modules"
    tag "modules_nfcore"
    tag "modkit"
    tag "modkit/pileup"
    process "MODKIT_PILEUP"

    test("[bam, bai], [], []") {

        when {
            process {
                """
                input[0] = [
                    [ id: 'bc_anchored' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("[bam, bai], fasta, []") {

        when {
            process {
                """
                input[0] = [
                    [ id: 'bc_anchored' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id: 'CGI_ladder' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/CGI_ladder_3.6kb_ref.fa', checkIfExists: true)
                ]
                input[2] = [[],[]]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("[bam, bai], fasta, bed") {

        when {
            process {
                """
                input[0] = [
                    [ id: 'bc_anchored' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id: 'CGI_ladder' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/CGI_ladder_3.6kb_ref.fa', checkIfExists: true)
                ]
                input[2] = Channel.of('oligo_1512_adapters\t0\t155')
                    .collectFile(name: 'oligo_1512_adapters.bed', newLine: true)
                    .map { file -> [ [ id:'oligo_1512_adapters' ], file ] }
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("[bam, bai], fasta, bed - traditional") {

        config "./nextflow.traditional.config"

        when {
            process {
                """
                input[0] = [
                    [ id: 'bc_anchored' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id: 'CGI_ladder' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/CGI_ladder_3.6kb_ref.fa', checkIfExists: true)
                ]
                input[2] = Channel.of('oligo_1512_adapters\t0\t155')
                    .collectFile(name: 'oligo_1512_adapters.bed', newLine: true)
                    .map { file -> [ [ id:'oligo_1512_adapters' ], file ] }
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("[bam, bai], fasta, bed - traditional, HP") {

        config "./nextflow.traditional_hp.config"

        when {
            process {
                """
                input[0] = [
                    [ id: 'bc_anchored' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id: 'CGI_ladder' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/CGI_ladder_3.6kb_ref.fa', checkIfExists: true)
                ]
                input[2] = Channel.of('oligo_1512_adapters\t0\t155')
                    .collectFile(name: 'oligo_1512_adapters.bed', newLine: true)
                    .map { file -> [ [ id:'oligo_1512_adapters' ], file ] }
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("[bam, bai], fasta, bed - traditional, HP, bedgraph") {

        config "./nextflow.traditional_hp_bedgraph.config"

        when {
            process {
                """
                input[0] = [
                    [ id: 'bc_anchored' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id: 'CGI_ladder' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/CGI_ladder_3.6kb_ref.fa', checkIfExists: true)
                ]
                input[2] = Channel.of('oligo_1512_adapters\t0\t155')
                    .collectFile(name: 'oligo_1512_adapters.bed', newLine: true)
                    .map { file -> [ [ id:'oligo_1512_adapters' ], file ] }
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("[bam, bai], [], [] - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id: 'bc_anchored' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("[bam, bai], fasta, [] - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id: 'bc_anchored' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id: 'CGI_ladder' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/CGI_ladder_3.6kb_ref.fa', checkIfExists: true)
                ]
                input[2] = [[],[]]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("[bam, bai], fasta, bed - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id: 'bc_anchored' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id: 'CGI_ladder' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/CGI_ladder_3.6kb_ref.fa', checkIfExists: true)
                ]
                input[2] = Channel.of('oligo_1512_adapters\t0\t155')
                    .collectFile(name: 'oligo_1512_adapters.bed', newLine: true)
                    .map { file -> [ [ id:'oligo_1512_adapters' ], file ] }
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("[bam, bai], fasta, bed - traditional - stub") {

        config "./nextflow.traditional.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id: 'bc_anchored' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id: 'CGI_ladder' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/CGI_ladder_3.6kb_ref.fa', checkIfExists: true)
                ]
                input[2] = Channel.of('oligo_1512_adapters\t0\t155')
                    .collectFile(name: 'oligo_1512_adapters.bed', newLine: true)
                    .map { file -> [ [ id:'oligo_1512_adapters' ], file ] }
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("[bam, bai], fasta, bed - traditional, HP - stub") {

        config "./nextflow.traditional_hp.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id: 'bc_anchored' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id: 'CGI_ladder' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/CGI_ladder_3.6kb_ref.fa', checkIfExists: true)
                ]
                input[2] = Channel.of('oligo_1512_adapters\t0\t155')
                    .collectFile(name: 'oligo_1512_adapters.bed', newLine: true)
                    .map { file -> [ [ id:'oligo_1512_adapters' ], file ] }
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("[bam, bai], fasta, bed - traditional, HP, bedgraph - stub") {

        config "./nextflow.traditional_hp_bedgraph.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id: 'bc_anchored' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/modkit/bc_anchored_10_reads.haplotyped.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id: 'CGI_ladder' ],
                    file(params.modules_testdata_base_path + 'delete_me/modkit/CGI_ladder_3.6kb_ref.fa', checkIfExists: true)
                ]
                input[2] = Channel.of('oligo_1512_adapters\t0\t155')
                    .collectFile(name: 'oligo_1512_adapters.bed', newLine: true)
                    .map { file -> [ [ id:'oligo_1512_adapters' ], file ] }
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}