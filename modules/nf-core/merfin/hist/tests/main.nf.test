// nf-core modules test merfin/hist
nextflow_process {

    name "Test Process MERFIN_HIST"
    script "../main.nf"
    process "MERFIN_HIST"

    tag "modules"
    tag "modules_nfcore"
    tag "merfin"
    tag "merfin/hist"

    test("sarscov2 - interleaved illumina reads") {

        setup {

            run("MERYL_COUNT") {
                script "../../../meryl/count/main.nf"
                config "./modules.config"
                tag    "meryl/count"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:true ], // meta map
                        [file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_interleaved.fastq.gz', checkIfExists: true)]
                        ]
                    """
                }
            }
            
            
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                input[1] = MERYL_COUNT.out.meryl_db
                input[2] = []
                input[3] = []
                input[4] = 10
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.get(0), process.out.get(2)).match() },
                // The following asserts that the instable output stdout_log generated by the module is complete
                { assert path(process.out.get(1).get(0)).readLines().last().contains("Bye!") }
            )
        }

    }

    test("Multiple samples - sarscov2 + bacteroides_fragilis - single illumina reads") {

        setup {

            run("MERYL_COUNT") {
                script "../../../meryl/count/main.nf"
                config "./modules.config"
                tag    "meryl/count"
                process {
                    """
                    input[0] = Channel.from([
                        [ id:'test_sars', single_end:true ], // meta map
                        [file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_interleaved.fastq.gz', checkIfExists: true)]
                        ],[
                        [ id:'test_fragilis', single_end:true ], // meta map
                        [file(params.modules_testdata_base_path + '/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkIfExists: true)]
                        ])
                    """
                }
            }
            
            
        }

        when {
            process {
                """
                Channel.from([
                    [ id:'test_sars', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ],[
                    [ id:'test_fragilis', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz', checkIfExists: true)
                    ]).set{ input_zero_ch }

                input_zero_ch.join( MERYL_COUNT.out.meryl_db ).multiMap{ meta, asm, meryl_db ->
                    asm_ch: [meta, asm]
                    meryl_ch: [meta, meryl_db]
                }.set{ multimap_inputs_ch }
                
                multimap_inputs_ch.asm_ch.view()
                multimap_inputs_ch.meryl_ch.view()

                input[0] = multimap_inputs_ch.asm_ch
                input[1] = multimap_inputs_ch.meryl_ch
                input[2] = []
                input[3] = []
                input[4] = 10
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.get(0), process.out.get(2)).match() },
                // The following asserts that the instable output stdout_log generated by the module is complete
                { assert path(process.out.get(1).get(0)).readLines().last().contains("Bye!") }
            )
        }

    }

    test("sarscov2 - paired-end illumina reads") {

        setup {

            run("SEQTK_MERGEPE") {
                script "../../../seqtk/mergepe/main.nf"
                config "./modules.config"
                tag    "seqtk/mergepe"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        [file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                        ]
                    """
                }
            }

            run("MERYL_COUNT") {
                script "../../../meryl/count/main.nf"
                config "./modules.config"
                tag    "meryl/count"
                process {
                    """
                    input[0] = SEQTK_MERGEPE.out.reads
                    """
                }
            }
            
            
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                input[1] = MERYL_COUNT.out.meryl_db
                input[2] = []
                input[3] = []
                input[4] = 10
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.get(0), process.out.get(2)).match() },
                // The following asserts that the instable output stdout_log generated by the module is complete
                { assert path(process.out.get(1).get(0)).readLines().last().contains("Bye!") }
            )
        }

    }


    test("sarscov2 - paired-end illumina reads plus optional input lookup_table") {

        setup {

            run("SEQTK_MERGEPE") {
                script "../../../seqtk/mergepe/main.nf"
                config "./modules.config"
                tag    "seqtk/mergepe"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        [file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                        ]
                    """
                }
            }

            run("MERYL_COUNT") {
                script "../../../meryl/count/main.nf"
                config "./modules.config"
                tag    "meryl/count"
                process {
                    """
                    input[0] = SEQTK_MERGEPE.out.reads
                    """
                }
            }

            run("MERYL_HISTOGRAM") {
                script "../../../meryl/histogram/main.nf"
                config "./modules.config"
                tag    "meryl/histogram"
                process {
                    """
                    input[0] = MERYL_COUNT.out.meryl_db
                    """
                }
            }

            run("GENOMESCOPE2") {
                script "../../../genomescope2/main.nf"
                config "./modules.config"
                tag    "genomescope2"
                process {
                    """
                    input[0] = MERYL_HISTOGRAM.out.hist
                    """
                }
            }


            
            
        }

        when {
            process {
                """
                // Due the fact that GENOMESCOPE2 module doesnt produce the optional output lookup_table.txt
                // we had to do a hack to get this file's path
                GENOMESCOPE2.out.summary.map{ meta, sum -> {
                    def res = sum.getParent();
                    [res/"lookup_table.txt"]
                    }}.set{ lk_ch }
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                input[1] = MERYL_COUNT.out.meryl_db
                input[2] = lk_ch
                input[3] = []
                input[4] = 10
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.get(0), process.out.get(2)).match() },
                // The following asserts that the instable output stdout_log generated by the module is complete
                { assert path(process.out.get(1).get(0)).readLines().last().contains("Bye!") }
            )
        }

    }

    test("sarscov2 - interleaved illumina reads plus optional input lookup_table") {

        setup {

            run("MERYL_COUNT") {
                script "../../../meryl/count/main.nf"
                config "./modules.config"
                tag    "meryl/count"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:true ], // meta map
                        [file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_interleaved.fastq.gz', checkIfExists: true)]
                        ]
                    """
                }
            }


            run("MERYL_HISTOGRAM") {
                script "../../../meryl/histogram/main.nf"
                config "./modules.config"
                tag    "meryl/histogram"
                process {
                    """
                    input[0] = MERYL_COUNT.out.meryl_db
                    """
                }
            }

            run("GENOMESCOPE2") {
                script "../../../genomescope2/main.nf"
                config "./modules.config"
                tag    "genomescope2"
                process {
                    """
                    input[0] = MERYL_HISTOGRAM.out.hist
                    """
                }
            }


            
            
        }

        when {
            process {
                """
                GENOMESCOPE2.out.summary.map{ meta, sum -> {
                    def res = sum.getParent();
                    [res/"lookup_table.txt"]
                    }}.set{ lk_ch }
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                input[1] = MERYL_COUNT.out.meryl_db
                input[2] = lk_ch
                input[3] = []
                input[4] = 10
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.get(0), process.out.get(2)).match() },
                // The following asserts that the instable output stdout_log generated by the module is complete
                { assert path(process.out.get(1).get(0)).readLines().last().contains("Bye!") }
            )
        }

    }

    test("sarscov2 - paired-end illumina reads plus optional inputs lookup_table and seqmers") {

        setup {

            run("SEQTK_MERGEPE") {
                script "../../../seqtk/mergepe/main.nf"
                config "./modules.config"
                tag    "seqtk/mergepe"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        [file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                        ]
                    """
                }
            }

            run("MERYL_COUNT", alias: "MERYL_COUNT_READS") {
                script "../../../meryl/count/main.nf"
                config "./modules.config"
                tag    "meryl/count"
                process {
                    """
                    input[0] = SEQTK_MERGEPE.out.reads
                    """
                }
            }

            run("MERYL_COUNT", alias: "MERYL_COUNT_ASM") {
                script "../../../meryl/count/main.nf"
                config "./modules.config"
                tag    "meryl/count"
                process {
                    """
                    input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }

            run("MERYL_HISTOGRAM") {
                script "../../../meryl/histogram/main.nf"
                config "./modules.config"
                tag    "meryl/histogram"
                process {
                    """
                    input[0] = MERYL_COUNT_READS.out.meryl_db
                    """
                }
            }

            run("GENOMESCOPE2") {
                script "../../../genomescope2/main.nf"
                config "./modules.config"
                tag    "genomescope2"
                process {
                    """
                    input[0] = MERYL_HISTOGRAM.out.hist
                    """
                }
            }


            
            
        }

        when {
            process {
                """
                // Due the fact that GENOMESCOPE2 module doesnt produce the optional output lookup_table.txt
                // we had to do a hack to get this file's path
                GENOMESCOPE2.out.summary.map{ meta, sum -> {
                    def res = sum.getParent();
                    [res/"lookup_table.txt"]
                    }}.set{ lk_ch }
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                input[1] = MERYL_COUNT_READS.out.meryl_db
                input[2] = lk_ch
                input[3] = MERYL_COUNT_ASM.out.meryl_db.map{ meta, meryl_db -> meryl_db }
                input[4] = 10
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.get(0), process.out.get(2)).match() },
                // The following asserts that the instable output stdout_log generated by the module is complete
                { assert path(process.out.get(1).get(0)).readLines().last().contains("Bye!") }
            )
        }

    }

    test("sarscov2 - interleaved illumina reads plus optional inputs lookup_table and seqmers") {

        setup {
            

            run("MERYL_COUNT", alias: "MERYL_COUNT_READS") {
                script "../../../meryl/count/main.nf"
                config "./modules.config"
                tag    "meryl/count"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:true ], // meta map
                        [file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_interleaved.fastq.gz', checkIfExists: true)]
                        ]
                    """
                }
            }

            run("MERYL_COUNT", alias: "MERYL_COUNT_ASM") {
                script "../../../meryl/count/main.nf"
                config "./modules.config"
                tag    "meryl/count"
                process {
                    """
                    input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }


            run("MERYL_HISTOGRAM") {
                script "../../../meryl/histogram/main.nf"
                config "./modules.config"
                tag    "meryl/histogram"
                process {
                    """
                    input[0] = MERYL_COUNT_READS.out.meryl_db
                    """
                }
            }

            run("GENOMESCOPE2") {
                script "../../../genomescope2/main.nf"
                config "./modules.config"
                tag    "genomescope2"
                process {
                    """
                    input[0] = MERYL_HISTOGRAM.out.hist
                    """
                }
            }


            
            
        }

        when {
            process {
                """
                GENOMESCOPE2.out.summary.map{ meta, sum -> {
                    def res = sum.getParent();
                    [res/"lookup_table.txt"]
                    }}.set{ lk_ch }
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                input[1] = MERYL_COUNT_READS.out.meryl_db
                input[2] = lk_ch
                input[3] = MERYL_COUNT_ASM.out.meryl_db.map{ meta, meryl_db -> meryl_db }
                input[4] = 10
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.get(0), process.out.get(2)).match() },
                // The following asserts that the instable output stdout_log generated by the module is complete
                { assert path(process.out.get(1).get(0)).readLines().last().contains("Bye!") }
            )
        }

    }

    test("Multiple samples - sarscov2 + bacteroides_fragilis - paired-end illumina reads") {

        setup {

            run("SEQTK_MERGEPE") {
                script "../../../seqtk/mergepe/main.nf"
                config "./modules.config"
                tag    "seqtk/mergepe"
                process {
                    """
                    input[0] = Channel.from([[ id:'test_sars', single_end:false ], // meta map
                        [file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                        ],
                        [
                        [ id:'test_fragilis', single_end:false ], // meta map
                        [file(params.modules_testdata_base_path + '/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkIfExists: true)]
                        ])
                    """
                }
            }

            run("MERYL_COUNT", alias: "MERYL_COUNT_READS") {
                script "../../../meryl/count/main.nf"
                config "./modules.config"
                tag    "meryl/count"
                process {
                    """
                    input[0] = SEQTK_MERGEPE.out.reads
                    """
                }
            }

            run("MERYL_COUNT", alias: "MERYL_COUNT_ASM") {
                script "../../../meryl/count/main.nf"
                config "./modules.config"
                tag    "meryl/count"
                process {
                    """
                    input[0] = Channel.from([
                    [ id:'test_sars', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ],[
                    [ id:'test_fragilis', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz', checkIfExists: true)
                    ])
                    """
                }
            }

            run("MERYL_HISTOGRAM") {
                script "../../../meryl/histogram/main.nf"
                config "./modules.config"
                tag    "meryl/histogram"
                process {
                    """
                    input[0] = MERYL_COUNT_READS.out.meryl_db
                    """
                }
            }

            run("GENOMESCOPE2") {
                script "../../../genomescope2/main.nf"
                config "./modules.config"
                tag    "genomescope2"
                process {
                    """
                    input[0] = MERYL_HISTOGRAM.out.hist
                    """
                }
            }


            
            
        }

        when {
            process {
                """
                Channel.from([
                    [ id:'test_sars', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ],[
                    [ id:'test_fragilis', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz', checkIfExists: true)
                    ]).set{ input_zero_ch }

                input_zero_ch.view()

                input_zero_ch.join( MERYL_COUNT_READS.out.meryl_db ).multiMap{ meta, asm, meryl_db ->
                    asm_ch: [meta, asm]
                    meryl_ch: [meta, meryl_db]
                }.set{ multimap_inputs_ch }
                
                multimap_inputs_ch.asm_ch.view()
                multimap_inputs_ch.meryl_ch.view()

                // Due the fact that GENOMESCOPE2 module doesnt produce the optional output lookup_table.txt
                // we had to do a hack to get this file's path
                GENOMESCOPE2.out.summary.map{ meta, sum -> {
                    def res = sum.getParent();
                    [res/"lookup_table.txt"]
                    }}.set{ lk_ch }
                
                input[0] = multimap_inputs_ch.asm_ch
                input[1] = multimap_inputs_ch.meryl_ch
                input[2] = lk_ch
                input[3] = MERYL_COUNT_ASM.out.meryl_db.map{ meta, meryl_db -> meryl_db }
                input[4] = 10
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.get(0), process.out.get(2)).match() },
                // The following asserts that the output stdout_log generated by the module is complete
                { assert path(process.out.get(1).get(0)).readLines().last().contains("Bye!") }
            )
        }

    }
}
