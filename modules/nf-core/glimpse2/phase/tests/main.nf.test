nextflow_process {

    name "Test Process GLIMPSE2_PHASE"
    script "../main.nf"

    process "GLIMPSE2_PHASE"

    tag "modules_nfcore"
    tag "modules"
    tag "glimpse2"
    tag "glimpse2/phase"

    test("Should run with vcf") {

        when {
            process {
                """
                input_vcf = Channel.of([
                    [ id:'input' ], // meta map
                    file(params.modules_testdata_base_path + "delete_me/glimpse/NA12878.chr21.s.1x.vcf.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "delete_me/glimpse/NA12878.chr21.s.1x.vcf.gz.csi", checkIfExists: true),
                    [],
                    "chr21:16600000-16800000",
                    "chr21:16650000-16750000"
                ])

                ref_panel = Channel.of([
                        file(params.modules_testdata_base_path + "delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf", checkIfExists: true),
                        file(params.modules_testdata_base_path + "delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf.csi", checkIfExists: true)
                ])

                map_file = Channel.of([
                    file(params.modules_testdata_base_path + "delete_me/glimpse/chr21.b38.gmap.gz", checkIfExists: true)
                ])

                // [meta, vcf, index, sample_infos, regionin, regionout,ref, index, map] [meta, fasta, fai]
                input[0] = input_vcf
                    .combine(ref_panel)
                    .combine(map_file)
                input[1] = Channel.of([[],[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                // File has a timestamp in it and is in binary format, so we can only check the name
                { assert file(process.out.phased_variants[0][1]).name == "input_chr21_16650000-16750000.bcf" },
                { assert snapshot(process.out.versions).match("VCF")}
            )
        }

    }

    test("Should run with bam") {

        when {
            process {
                """
                input_bam = Channel.of([
                    [id:'input'],
                    file(params.modules_testdata_base_path + "delete_me/glimpse/NA12878.chr21.s.1x.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "delete_me/glimpse/NA12878.chr21.s.1x.bam.bai", checkIfExists: true),
                    [],
                    "chr21:16600000-16800000",
                    "chr21:16650000-16750000",
                ])
                ref_panel = Channel.of([
                    file(params.modules_testdata_base_path + "delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf", checkIfExists: true),
                    file(params.modules_testdata_base_path + "delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf.csi", checkIfExists: true)
                ])

                map_file = Channel.of([
                    file(params.modules_testdata_base_path + "delete_me/glimpse/chr21.b38.gmap.gz", checkIfExists: true)
                ])

                // [meta, vcf, index, sample_infos, regionin, regionout,ref, index, map] [meta, fasta, fai]
                input[0] = input_bam
                    .combine(ref_panel)
                    .combine(map_file)
                input[1] = Channel.of([[],[],[]])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                // File has a timestamp in it and is in binary format, so we can only check the name
                { assert file(process.out.phased_variants[0][1]).name == "input_chr21_16650000-16750000.bcf" },
                { assert snapshot(process.out.stats_coverage).match("BAM_coverage")},
                { assert snapshot(process.out.versions).match("BAM")}
            )
        }

    }

    test("Should run with cram and reference genome") {

        when {
            process {
                """
                input_cram = Channel.of([
                    [id:'input'],
                    file(params.modules_testdata_base_path + "delete_me/glimpse/NA12878.chr21.s.1x.cram", checkIfExists: true),
                    file(params.modules_testdata_base_path + "delete_me/glimpse/NA12878.chr21.s.1x.cram.crai", checkIfExists: true),
                    [],
                    "chr21:16600000-16800000",
                    "chr21:16650000-16750000",
                ])
                ref_panel = Channel.of([
                    file(params.modules_testdata_base_path + "delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf", checkIfExists: true),
                    file(params.modules_testdata_base_path + "delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf.csi", checkIfExists: true)
                ])

                map_file = Channel.of([
                    file(params.modules_testdata_base_path + "delete_me/glimpse/chr21.b38.gmap.gz", checkIfExists: true)
                ])
                reference_genome = Channel.of([
                    [id:'refHG38_chr21'],
                    file(params.modules_testdata_base_path + "delete_me/glimpse/hs38DH.chr21.fa.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "delete_me/glimpse/hs38DH.chr21.fa.gz.fai", checkIfExists: true)
                    ])
                // [meta, vcf, index, sample_infos, regionin, regionout,ref, index, map] [meta, fasta, fai]
                input[0] = input_cram
                    .combine(ref_panel)
                    .combine(map_file)
                input[1] = reference_genome
                """
                }
        }

        then {
            assertAll(
                { assert process.success },
                // File has a timestamp in it and is in binary format, so we can only check the name
                { assert file(process.out.phased_variants[0][1]).name == "input_chr21_16650000-16750000.bcf" },
                { assert snapshot(process.out.stats_coverage).match("CRAM_coverage")},
                { assert snapshot(process.out.versions).match("CRAM")}
            )
        }
    }
}
