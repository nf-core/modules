nextflow_process {

    name "Test Process GLIMPSE2_CONCORDANCE"
    script "../main.nf"
    process "GLIMPSE2_CONCORDANCE"
    tag "glimpse2"
    tag "glimpse2/concordance"
    tag "glimpse2/phase"
    tag "bcftools/index"
    tag "modules_nfcore"
    tag "modules"

    setup {
        run("GLIMPSE2_PHASE") {
            script "../../phase/main.nf"
            process {
                """
                input_vcf     = Channel.of([
                    [ id:'input'], // meta map
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/NA12878.chr21.s.1x.vcf.gz", checkIfExists: true),
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/NA12878.chr21.s.1x.vcf.gz.csi", checkIfExists: true),
                    []
                ])

                samples_infos = Channel.of('NA12878 2').collectFile(name: 'sampleinfos.txt')
                region        = Channel.of(["chr21:16600000-16800000","chr21:16650000-16750000"])

                ch_ref_panel = Channel.of([
                        file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf", checkIfExists: true),
                        file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf.csi", checkIfExists: true)
                ])

                ch_map = Channel.of([
                        file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/chr21.b38.gmap.gz", checkIfExists: true),
                ])

                // [meta, vcf, index, sample_infos, regionin, regionout, regionindex, ref, ref_index, map]
                input[0] =  input_vcf
                    .combine(samples_infos)
                    .combine(region)
                    .combine( ch_ref_panel )
                    .combine( ch_map )
                input[1]= Channel.of([[],[],[]])
                """
            }
        }

        run("BCFTOOLS_INDEX") {
            script "../../../bcftools/index/main.nf"
            process {
                """
                input[0] = GLIMPSE2_PHASE.output.phased_variants
                """
            }
        }
    }


    test("test_glimpse2_concordance") {
        config "./nextflow.config"

        when {
            process {
                """
                allele_freq = Channel.of([
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/1000GP.chr21.noNA12878.s.sites.vcf.gz",checkIfExists:true),
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/1000GP.chr21.noNA12878.s.sites.vcf.gz.csi",checkIfExists:true)
                ])

                truth = Channel.of([
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/NA12878.chr21.s.bcf",checkIfExists:true),
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/NA12878.chr21.s.bcf.csi",checkIfExists:true)
                ])
                list_inputs = GLIMPSE2_PHASE.output.phased_variants
                        .join( BCFTOOLS_INDEX.out.csi )
                        .combine( truth )
                        .combine( allele_freq )
                        .combine( Channel.of([[]]) )
                        .combine( Channel.of(["chr21"]) )

                input[0] = list_inputs
                input[1] = Channel.of([[id:"params"],[],"0 0.01 0.05 0.1 0.2 0.5",[],[]])
                input[2] = 0.9999
                input[3] = 8
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.errors_cal.collect{ file(it[1]).name },
                    process.out.errors_grp.collect{ file(it[1]).name },
                    process.out.errors_spl.collect{ file(it[1]).name },
                    process.out.rsquare_grp.collect{ file(it[1]).name },
                    process.out.rsquare_spl.collect{ file(it[1]).name },
                    process.out.versions
                ).match() }
            )
        }

    }

    test("test_list_region") {
        config "./nextflow.config"

        when {
            process {
                """
                allele_freq = Channel.of([
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/1000GP.chr21.noNA12878.s.sites.vcf.gz",checkIfExists:true),
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/1000GP.chr21.noNA12878.s.sites.vcf.gz.csi",checkIfExists:true)
                ])

                truth = Channel.of([
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/NA12878.chr21.s.bcf",checkIfExists:true),
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/NA12878.chr21.s.bcf.csi",checkIfExists:true)
                ])
                list_inputs = GLIMPSE2_PHASE.output.phased_variants
                        .join( BCFTOOLS_INDEX.out.csi )
                        .combine( truth )
                        .combine( allele_freq )
                        .combine( Channel.of([[]]) )
                        .combine( Channel.of(["chr21", "chr21"]) )

                input[0] = list_inputs
                input[1] = Channel.of([[id:"params"],[],"0 0.01 0.05 0.1 0.2 0.5",[],[]])
                input[2] = 0.9999
                input[3] = 8
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.errors_cal.collect{ file(it[1]).name },
                    process.out.errors_grp.collect{ file(it[1]).name },
                    process.out.errors_spl.collect{ file(it[1]).name },
                    process.out.rsquare_grp.collect{ file(it[1]).name },
                    process.out.rsquare_spl.collect{ file(it[1]).name },
                    process.out.versions
                ).match()
                }
            )
        }

    }

    test("test_r2_per_site") {
        config "./nextflow_R2.config"

        when {
            process {
                """
                allele_freq = Channel.of([
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/1000GP.chr21.noNA12878.s.sites.vcf.gz",checkIfExists:true),
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/1000GP.chr21.noNA12878.s.sites.vcf.gz.csi",checkIfExists:true)
                ])

                truth = Channel.of([
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/NA12878.chr21.s.bcf",checkIfExists:true),
                    file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/glimpse/NA12878.chr21.s.bcf.csi",checkIfExists:true)
                ])
                list_inputs = GLIMPSE2_PHASE.output.phased_variants
                        .join( BCFTOOLS_INDEX.out.csi )
                        .combine( truth )
                        .combine( allele_freq )
                        .combine( Channel.of([[]]) )
                        .combine( Channel.of(["chr21"]) )
                input[0] = list_inputs
                input[1] = Channel.of([[id:"params"],[],"0 0.01 0.05 0.1 0.2 0.5",[],[]])
                input[2] = 0.9999
                input[3] = 8
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.errors_cal.collect{ file(it[1]).name },
                    process.out.errors_grp.collect{ file(it[1]).name },
                    process.out.errors_spl.collect{ file(it[1]).name },
                    process.out.rsquare_grp.collect{ file(it[1]).name },
                    process.out.rsquare_spl.collect{ file(it[1]).name },
                    process.out.rsquare_per_site.collect{ file(it[1]).name },
                    process.out.versions
                ).match()
                }
            )
        }

    }

}
