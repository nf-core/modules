nextflow_process {

    name "Test Process GLIMPSE2_SPLITREFERENCE"
    script "../main.nf"
    config "./nextflow.config"

    process "GLIMPSE2_SPLITREFERENCE"

    tag "modules_nfcore"
    tag "modules"
    tag "glimpse2"
    tag "glimpse2/splitreference"

    test("Should run without map") {
        when {
            process {
                """
                input[0] = [
                    [ id:'ref1000GP', single_end:false ],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists:true),
                    "chr22:16600000-16800000",
                    "chr22:16600000-16800000"
                ]
                input[1]= [[ id:'map'],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                // File has a timestamp in it and is in binary format, so we can only check the name
                { assert snapshot(
                    file(process.out.bin_ref[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("Should run with map") {
        when {
            process {
                """
                input[0] = [
                    [ id:'ref1000GP', single_end:false ],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists:true),
                    "chr22:16600000-16800000",
                    "chr22:16600000-16800000"
                ]
                input[1]= [
                    [ id:'map'],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.GRCh38.glimpse.chr22.map.gz", checkIfExists:true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                // File has a timestamp in it and is in binary format, so we can only check the name
                { assert snapshot(
                    file(process.out.bin_ref[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("Should run without map -- stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'ref1000GP', single_end:false ],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists:true),
                    "chr22:16600000-16800000",
                    "chr22:16600000-16800000"
                ]
                input[1]= [[ id:'map'],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }

    }

}
