nextflow_process {

    name "Test Process PARAGRAPH_IDXDEPTH"

    script "../main.nf"
    process "PARAGRAPH_IDXDEPTH"

    tag "modules"
    tag "modules_nfcore"
    tag "paragraph"
    tag "paragraph/idxdepth"

    test("test_paragraph_idxdepth_bam") {

        when {
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai',checkIfExists:true)
                    ]
                input[1] = [
                    [id:'fasta'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta',checkIfExists:true)
                    ]
                input[2] = [
                    [id:'fasta_fai'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai',checkIfExists:true)
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_paragraph_idxdepth_cram") {

        when {
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test2.paired_end.sorted.cram',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test2.paired_end.sorted.cram.crai',checkIfExists:true)
                    ]
                input[1] = [
                    [id:'fasta'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta',checkIfExists:true)
                    ]
                input[2] = [
                    [id:'fasta_fai'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai',checkIfExists:true)
                    ]
                """
            }
        }
        then {
            if (process.success) {
                assert snapshot(process.out).match()
            } else {
                assert process.errorReport.contains("PARAGRAPH_IDXDEPTH module does not support Conda with CRAM input. Please use Docker / Singularity / Podman instead.")
            }
        }
    }

    test("test_paragraph_idxdepth_bam -- stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai',checkIfExists:true)
                    ]
                input[1] = [
                    [id:'fasta'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta',checkIfExists:true)
                    ]
                input[2] = [
                    [id:'fasta_fai'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai',checkIfExists:true)
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_paragraph_idxdepth_cram -- stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai',checkIfExists:true)
                    ]
                input[1] = [
                    [id:'fasta'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta',checkIfExists:true)
                    ]
                input[2] = [
                    [id:'fasta_fai'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai',checkIfExists:true)
                    ]
                """
            }
        }
        then {
            if (process.success) {
                assert snapshot(process.out).match()
            } else {
                assert process.errorReport.contains("PARAGRAPH_IDXDEPTH module does not support Conda with CRAM input. Please use Docker / Singularity / Podman instead.")
            }
        }
    }
}