
nextflow_process {

    name "Test Process PARAGRAPH_VCF2PARAGRAPH"
    script "../main.nf"
    process "PARAGRAPH_VCF2PARAGRAPH"

    tag "modules"
    tag "modules_nfcore"
    tag "paragraph"
    tag "paragraph/vcf2paragraph"

    test("test-paragraph-vcf2paragraph") {

        when {
            process {
                """
                input[0] = [
				    [ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test_haplotcaller.cnn.vcf.gz', checkIfExists: true)
				]
				input[1] = [ [], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.graph,
                    process.out.versions,
                    file(process.out.versions[0]).readLines().collect { it.trim() } // Trap to catch conda version mismatches
                    ).match()
                }
            )
        }
    }

    test("test-paragraph-vcf2paragraph-stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = [
				[ id:'test', single_end:false ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test_haplotcaller.cnn.vcf.gz', checkIfExists: true)
				]
				input[1] = [ [], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
