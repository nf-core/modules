// nf-core modules test souporcell
nextflow_process {

    name "Test Process SOUPORCELL"
    script "../main.nf"
    process "SOUPORCELL"

    tag "modules"
    tag "modules_nfcore"
    tag "souporcell"

    test("homo sapiens - bam and barcodes") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/demultiplexing/chr21.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/demultiplexing/barcodes.tsv', checkIfExists: true),
                ]

                input[1] = [
                    [:],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]

                input[2] = 2
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.tsv,
                    process.out.versions,
                    path(process.out.vcf[0][1]).vcf.sampleCount == 69
                ).match() }
            )
        }
    }

    test("homo sapience - bam and barcodes - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/demultiplexing/chr21.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/demultiplexing/barcodes.tsv', checkIfExists: true),
                ]

                input[1] = [
                    [:],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]

                input[2] = 2
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }
    }
}