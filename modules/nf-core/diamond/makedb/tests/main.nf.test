nextflow_process {

    name "Test Process DIAMOND_MAKEDB"
    script "../main.nf"
    process "DIAMOND_MAKEDB"
    tag "modules"
    tag "modules_nfcore"
    tag "diamond"
    tag "diamond/makedb"

    test("Should build a DIAMOND db file from a fasta file without taxonomic information") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [id:'test'], [ file(params.test_data['sarscov2']['genome']['proteome_fasta'], checkIfExists: true) ] ]
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.db).match("db") },
                { assert process.out.versions }
            )
        }

    }

    test("Should build a DIAMOND db file from a zipped fasta file without taxonomic information") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [id:'test'], [ file(params.test_data['sarscov2']['genome']['proteome_fasta_gz'], checkIfExists: true) ] ]
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.db).match("gz_db") },
                { assert process.out.versions }
            )
        }

    }

    test("Should build a DIAMOND db file from a fasta file with taxonomic information") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [id:'test'], [ file(params.test_data['sarscov2']['genome']['proteome_fasta'], checkIfExists: true)  ] ]
                input[1] = [ file(params.test_data['sarscov2']['metagenome']['prot_accession2taxid_gz'], checkIfExists: true) ]
                input[2] = [ file(params.test_data['sarscov2']['metagenome']['prot_nodes_dmp'], checkIfExists: true) ]
                input[3] = [ file(params.test_data['sarscov2']['metagenome']['prot_names_dmp'], checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.db).match("db_tax") },
                { assert process.out.versions }
            )
        }

    }

}
