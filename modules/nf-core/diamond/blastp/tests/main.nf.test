nextflow_process {

    name "Test Process DIAMOND_BLASTP"
    script "../main.nf"
    process "DIAMOND_BLASTP"
    tag "modules"
    tag "modules_nfcore"
    tag "diamond"
    tag "diamond/blastp"

    setup {
        run("DIAMOND_MAKEDB") {
            script "../../makedb/main.nf"
            process {
                """
                input[0] = [ [id:'test2'], [ file(params.test_data['sarscov2']['genome']['proteome_fasta'], checkIfExists: true) ] ]
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }
    }

    test("Should search for protein hits against a DIAMOND db and return a tab separated output file of hits") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [id:'test'], file(params.test_data['sarscov2']['genome']['proteome_fasta'], checkIfExists: true) ]
                input[1] = DIAMOND_MAKEDB.out.db
                input[2] = 'txt'
                input[3] = 'qseqid qlen'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.txt).match("txt") },
                { assert process.out.versions }
            )
        }

    }

    test("Should search for zipped protein hits against a DIAMOND db and return a tab separated output file of hits") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [id:'test'], file(params.test_data['sarscov2']['genome']['proteome_fasta_gz'], checkIfExists: true) ]
                input[1] = DIAMOND_MAKEDB.out.db
                input[2] = 'txt'
                input[3] = 'qseqid qlen'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.txt).match("gz_txt") },
                { assert process.out.versions }
            )
        }

    }

    test("Should search for protein hits against a DIAMOND db and return a daa format file of hits") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [id:'test'], file(params.test_data['sarscov2']['genome']['proteome_fasta'], checkIfExists: true) ]
                input[1] = DIAMOND_MAKEDB.out.db
                input[2] = 'daa'
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.daa },
                { assert process.out.versions }
            )
        }

    }

}
