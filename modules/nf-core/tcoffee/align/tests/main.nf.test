nextflow_process {

    name "Test Process TCOFFEE_ALIGN"
    script "../main.nf"
    process "TCOFFEE_ALIGN"

    tag "modules"
    tag "modules_nfcore"
    tag "tcoffee"
    tag "tcoffee/align"
    tag "famsa/guidetree"
    tag "untar"

    test("fasta - align_sequence") {

        config "./sequence.config"

        when {
            process {
                """
                input[0] = [ [ id:'test' ],
                             file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                           ]
                input[1] = [[:],[]]
                input[2] = [[:],[],[]]
                input[3] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.alignment).match("alignment")},
                { assert snapshot(process.out.versions).match("versions_uncomp") }
            )
        }
    }

    test("fasta - align_sequence - uncompressed") {

        config "./sequence.config"

        when {
            process {
                """
                input[0] = [ [ id:'test' ],
                             file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                           ]
                input[1] = [[:],[]]
                input[2] = [[:],[],[]]
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.alignment).match("alignment - uncompressed")},
                { assert snapshot(process.out.versions).match("versions_comp") }
            )
        }
    }

    test("sarscov2 - fasta - align_with_guide_tree") {

        config "./tree.config"

        setup {

            run("FAMSA_GUIDETREE") {
                script "../../../famsa/guidetree//main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                 file(params.test_data['sarscov2']['genome']['informative_sites_fas'], checkIfExists: true)
                               ]

                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [ [ id:'test' ],
                             file(params.test_data['sarscov2']['genome']['informative_sites_fas'], checkIfExists: true)
                           ]
                input[1] = FAMSA_GUIDETREE.out.tree.collect{ meta, tree -> tree }.map{ tree -> [[ id: 'test'], tree]}
                input[2] = [ [:], [], [] ]
                input[3] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.alignment).match("alignment_guidetree")},
                { assert snapshot(process.out.versions).match("versions_guidetree") }
            )
        }

    }

    test("fasta - align_with_structure") {

        config "./structure.config"

        setup {

            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                 file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/structures/seatoxin-ref.tar.gz", checkIfExists: true)
                               ]

                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [ [ id:'test' ],
                             file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                           ]
                input[1] = [ [:], [] ]
                input[2] = UNTAR.out.untar.map { meta,dir -> [[ id:'test' ], [] ,file(dir).listFiles().collect()]}
                input[3] = true
                """

            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.alignment.get(0).get(1)).getTextGzip().contains("1ahl") },
                { assert snapshot(process.out.versions).match("versions_structure") }
            )
        }

    }

    test("fasta - align_with_lib") {

        config "./lib.config"

        when {
            process {
                """
                input[0] = [ [ id:'test' ],
                             file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                           ]
                input[1] = [[:],[]]
                input[2] = [[:],[],[]]
                input[3] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.alignment).match("alignment - lib") },
                { assert path(process.out.lib.get(0).get(1)).getText().contains("1ahl") },
                { assert snapshot(process.out.versions).match("versions_lib") }
            )
        }
    }
}