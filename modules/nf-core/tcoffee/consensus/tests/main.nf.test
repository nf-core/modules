nextflow_process {

    name "Test Process TCOFFEE_CONSENSUS"
    script "../main.nf"
    process "TCOFFEE_CONSENSUS"

    tag "modules"
    tag "modules_nfcore"
    tag "tcoffee"
    tag "tcoffee/consensus"
    tag "magus/align"
    tag "pigz"
    tag "clustalo/guidetree"
    tag "famsa/align"

    setup {
        run("CLUSTALO_GUIDETREE") {
            script "../../../clustalo/guidetree/main.nf"
            process {
                """
                input[0] = [ [ id:'test' ],
                                file(params.modules_testdata_base_path + "../../multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                            ]
                """
            }
        }
        run("FAMSA_ALIGN") {
            script "../../../famsa/align/main.nf"
            process {
                """
                input[0] = [ [ id:'test' ],
                                file(params.modules_testdata_base_path + "../../multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                            ]
                input[1] = [[:],[]]
                input[2] = false

                """
            }
        }
        run("MAGUS_ALIGN") {
            script "../../../magus/align/main.nf"
            process {
                """
                input[0] = [ [ id:'test2' ],
                                file(params.modules_testdata_base_path + "../../multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                            ]
                input[1] = [[:],[]]
                input[2] = false

                """
            }
        }
    }

    test("consensus - no tree - uncompressed - seatoxin ") {
        config "./sequence.config"

        when {
            process {
                """
                msas = FAMSA_ALIGN.out.alignment.mix(MAGUS_ALIGN.out.alignment).groupTuple()
                input[0] = msas
                input[1] = [[:],[]]
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match()},
                { assert path(process.out.alignment.get(0).get(1)).getText().contains("1ahl") }
            )
        }
    }

    test("consensus_evaluation - no tree - uncompressed - seatoxin ") {
        config "./eval.config"

        when {
            process {
                """
                msas = FAMSA_ALIGN.out.alignment.mix(MAGUS_ALIGN.out.alignment).groupTuple()
                input[0] = msas
                input[1] = [[:],[]]
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match()},
                { assert path(process.out.alignment.get(0).get(1)).getText().contains("1ahl") }
            )
        }
    }

    test("consensus - tree - compressed- seatoxin") {
        config "./sequence.config"

        when {
            process {
                """
                msas = FAMSA_ALIGN.out.alignment.mix(MAGUS_ALIGN.out.alignment).groupTuple()
                input[0] = msas
                input[1] = CLUSTALO_GUIDETREE.out.tree.collect{ meta, tree -> tree }.map{ tree -> [[ id: 'test'], tree]}
                input[2] = true
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match()},
                { assert path(process.out.alignment.get(0).get(1)).getTextGzip().contains("1ahl") }
            )
        }
    }

     test("consensus - stub") {
        config "./sequence.config"

        options "-stub"

        when {
            process {
                """
                msas = FAMSA_ALIGN.out.alignment.mix(MAGUS_ALIGN.out.alignment).groupTuple()
                input[0] = msas
                input[1] = [[:],[]]
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()}
            )
        }
    }

}
