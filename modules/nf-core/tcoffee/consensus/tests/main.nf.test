nextflow_process {

    name "Test Process TCOFFEE_CONSENSUS"
    script "../main.nf"
    process "TCOFFEE_CONSENSUS"

    tag "modules"
    tag "modules_nfcore"
    tag "tcoffee"
    tag "tcoffee/consensus"
    tag "tcoffee/align"
    tag "pigz"
    tag "famsa/guidetree"
    tag "famsa/align"

     test("consensus - no tree - uncompressed") {

        config "./sequence.config"
        setup {
            run("FAMSA_ALIGN") {
                script "../../../famsa/align/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                 file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)                                 
                               ]
                    input[1] = [[:],[]]
                    input[2] = false

                    """
                }
            }
            run("TCOFFEE_ALIGN") {
                script "../../../tcoffee/align/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                 file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)                                 
                               ]
                    input[1] = [[:],[]]
                    input[2] = [[:],[],[]]
                    input[3] = false

                    """
                }
            }          
        }
        when {
            process {
                """
                msas = FAMSA_ALIGN.out.alignment.mix(TCOFFEE_ALIGN.out.alignment).groupTuple()
                input[0] = msas
                input[1] = [[:],[]]
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.alignment).match("alignment")},
                { assert snapshot(process.out.versions).match("versions_uncomp") }
            )
        }
    }

     test("consensus - tree - compressed") {

        config "./sequence.config"
        setup {
            run("FAMSA_GUIDETREE") {
                script "../../../famsa/guidetree/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                 file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)                                 
                               ]
                    """
                }
            }
            run("FAMSA_ALIGN") {
                script "../../../famsa/align/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                 file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)                                 
                               ]
                    input[1] = [[:],[]]
                    input[2] = false

                    """
                }
            }
            run("TCOFFEE_ALIGN") {
                script "../../../tcoffee/align/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                 file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)                                 
                               ]
                    input[1] = [[:],[]]
                    input[2] = [[:],[],[]]
                    input[3] = false

                    """
                }
            }          
        }
        when {
            process {
                """
                msas = FAMSA_ALIGN.out.alignment.mix(TCOFFEE_ALIGN.out.alignment).groupTuple()
                input[0] = msas
                input[1] = FAMSA_GUIDETREE.out.tree.collect{ meta, tree -> tree }.map{ tree -> [[ id: 'test'], tree]}
                input[2] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.alignment).match("alignment_gt")},
                { assert snapshot(process.out.versions).match("versions_comp") }
            )
        }
    }


     test("consensus - stub") {

        options "-stub"
        config "./sequence.config"
        setup {
            run("FAMSA_ALIGN") {
                script "../../../famsa/align/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                 file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)                                 
                               ]
                    input[1] = [[:],[]]
                    input[2] = false

                    """
                }
            }
            run("TCOFFEE_ALIGN") {
                script "../../../tcoffee/align/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                 file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)                                 
                               ]
                    input[1] = [[:],[]]
                    input[2] = [[:],[],[]]
                    input[3] = false

                    """
                }
            }          
        }
        when {
            process {
                """
                msas = FAMSA_ALIGN.out.alignment.mix(TCOFFEE_ALIGN.out.alignment).groupTuple()
                input[0] = msas
                input[1] = [[:],[]]
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.alignment).match("alignment_stub")},
                { assert snapshot( file( process.out.versions.get(0) ).readLines() ).match("versions_uncomp") }
            )
        }
    }
  
}
