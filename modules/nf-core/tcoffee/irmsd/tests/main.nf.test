nextflow_process {

    name "Test Process TCOFFEE_IRMSD"
    script "../main.nf"
    process "TCOFFEE_IRMSD"
    tag "modules"
    tag "modules_nfcore"
    tag "tcoffee"
    tag "tcoffee/irmsd"
    tag "untar"
    tag "pigz/compress"

    test("seatoxin") {

        setup {

            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                 file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/structures/seatoxin-ref.tar.gz", checkIfExists: true)
                               ]

                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                                [ id:'test' ], // meta map
                                file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin.ref", checkIfExists: true)
                            ]
                input[1] = UNTAR.out.untar.map { meta,dir -> [[ id:'test' ], file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/templates/seatoxin-ref_template.txt", checkIfExists: true) ,file(dir).listFiles().collect()]}
                """
            }

        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.irmsd.get(0).get(1)).getText().contains("1ahl") }
            )
        }

    }

    test("seatoxin - compressed") {

        setup {

            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                 file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/structures/seatoxin-ref.tar.gz", checkIfExists: true)
                               ]

                    """
                }
            }

            run("PIGZ_COMPRESS") {
                script "../../../pigz/compress/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin.ref", checkIfExists: true)
                               ]

                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = PIGZ_COMPRESS.out.archive
                input[1] = UNTAR.out.untar.map { meta,dir -> [[ id:'test' ], file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/templates/seatoxin-ref_template.txt", checkIfExists: true) ,file(dir).listFiles().collect()]}
                """
            }

        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.irmsd.get(0).get(1)).getText().contains("1ahl") }
            )
        }

    }
}