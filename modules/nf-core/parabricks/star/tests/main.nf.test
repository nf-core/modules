nextflow_process {

    name "Test Process PARABRICKS_STAR"
    script "../main.nf"
    process "PARABRICKS_STAR"

    tag "bwa/index"
    tag "modules"
    tag "parabricks/star"
    tag "modules_nfcore"
    tag "parabricks"
    tag "gpu"

    config './nextflow.config'

    test("homo_sapiens - single_end") {
        config "./nextflow.config"

        setup {
            run("STAR_GENOMEGENERATE") {
                script "../../../star/genomegenerate/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test_fasta' ],
                        [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                    ])
                    input[1] = Channel.of([
                        [ id:'test_gtf' ],
                        [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                    ])
                    """
                }
            }
        }

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test_fasta' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ])
                input[2] = STAR_GENOMEGENERATE.out.index
                input[3] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success }
            )
        }
    }

    setup {
        run("BWA_INDEX") {
            script "../../../bwa/index/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                """
            }
        }
    }
}