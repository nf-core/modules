nextflow_process {

    name "Test Process PARABRICKS_MINIMAP2"
    script "../main.nf"
    process "PARABRICKS_MINIMAP2"

    tag "modules"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/minimap2"
    tag "gpu"

    test("homo_sapiens - fastq - bam") {

        config './nextflow.config'

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = 'bam'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    file(process.out.bai[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - fastq - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = 'bam'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match()
                }
            )
        }
    }

    test("homo_sapiens - bam - bam") {

        config './nextflow.config'

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test3.single_end.markduplicates.sorted.bam', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = 'bam'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    file(process.out.bai[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - bam - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test3.single_end.markduplicates.sorted.bam', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = 'bam'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match()
                }
            )
        }
    }

    test("homo_sapiens - fastq - cram") {

        config './nextflow.config'

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = 'cram'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    cram(process.out.cram[0][1]).getReadsMD5(),
                    file(process.out.crai[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - fastq - cram - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = 'cram'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match()
                }
            )
        }
    }

    test("homo_sapiens - bam - cram") {

        config './nextflow.config'

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test3.single_end.markduplicates.sorted.bam', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = 'cram'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    cram(process.out.cram[0][1]).getReadsMD5(),
                    file(process.out.crai[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - bam - cram - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test3.single_end.markduplicates.sorted.bam', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [ [], [] ]
                input[3] = [ [], [] ]
                input[4] = 'cram'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match()
                }
            )
        }
    }

}