nextflow_process {

    name "Test Process PARABRICKS_RNAFQ2BAM"
    script "../main.nf"
    process "PARABRICKS_RNAFQ2BAM"

    tag "gpu"
    tag "modules"
    tag "modules_nfcore"
    tag "bwa/index"
    tag "parabricks"
    tag "parabricks/rnafq2bam"
    tag "parabricks/stargenomegenerate"

    setup {

        run("PARABRICKS_STARGENOMEGENERATE") {
            script "../../stargenomegenerate/main.nf"
            process {
                """
                input[0] = [
                    [ id:'minigenome_fasta' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.fa')
                ]
                input[1] = [
                    [ id:'minigenome_gtf' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.gtf')
                ]
                """
            }
        }

        run("BWA_INDEX") {
            script "../../../bwa/index/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                """
            }
        }
    }

    test("homo_sapiens") {

        config "./nextflow.config"

        when {
            params {
                module_args = '--low-memory --read-files-command zcat --x3'
                // Ref: https://forums.developer.nvidia.com/t/problem-with-gpu/256825/6
                // Parabricks’s rnafq2bam requires 24GB of memory.
                // Using --low-memory for testing
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.gtf', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = PARABRICKS_STARGENOMEGENERATE.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    file(process.out.bai[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - stub") {

        config "./nextflow.config"
        options "-stub"

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.gtf', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = PARABRICKS_STARGENOMEGENERATE.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens_chimeric") {

        config "./nextflow.config"

        when {
            params {
                module_args = '--low-memory --read-files-command zcat --out-chim-type Junctions --min-chim-segment 15 --x3'
                // Ref: https://forums.developer.nvidia.com/t/problem-with-gpu/256825/6
                // Parabricks’s rnafq2bam requires 24GB of memory.
                // Using --low-memory for testing
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.gtf', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = PARABRICKS_STARGENOMEGENERATE.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    file(process.out.bai[0][1]).name,
                    file(process.out.junction[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens_chimeric - stub") {

        config "./nextflow.config"
        options "-stub"

        when {
            params {
                module_args = '--out-chim-type Junctions'
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.gtf', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = PARABRICKS_STARGENOMEGENERATE.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

}
