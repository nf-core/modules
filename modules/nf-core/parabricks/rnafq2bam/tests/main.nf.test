nextflow_process {

    name "Test Process PARABRICKS_RNAFQ2BAM"
    script "../main.nf"
    process "PARABRICKS_RNAFQ2BAM"

    tag "gpu"
    tag "modules"
    tag "modules_nfcore"
    tag "bwa/index"
    tag "parabricks"
    tag "parabricks/rnafq2bam"
    tag "parabricks/stargenomegenerate"

    setup {

        run("STARGENOMEGENERATE") {
            script "../../stargenomegenerate/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test_fasta' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                """
            }
        }

        run("BWA_INDEX") {
            script "../../../bwa/index/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                """
            }
        }
    }

    test("homo_sapiens") {

        config "./nextflow.config"

        when {
            params {
                module_args = '--low-memory --read-files-command zcat'
                // Ref: https://forums.developer.nvidia.com/t/problem-with-gpu/256825/6
                // Parabricks’s fq2bam requires 24GB of memory.
                // Using --low-memory for testing
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = STARGENOMEGENERATE.out.index
                """
            }
        }

       then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match()},
                {
                    def (meta, bam_file) = process.out.bam.get(0)
                    assert file(bam_file).exists()
                },
                {
                    def (meta, bai_file) = process.out.bai.get(0)
                    assert file(bai_file).exists()
                }
            )
        }
    }

    test("homo_sapiens - stub") {

        config "./nextflow.config"
        options "-stub"

        when {
            params {
                module_args = '--low-memory --read-files-command zcat'
                // Ref: https://forums.developer.nvidia.com/t/problem-with-gpu/256825/6
                // Parabricks’s fq2bam requires 24GB of memory.
                // Using --low-memory for testing
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = STARGENOMEGENERATE.out.index
                """
            }
        }

       then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match()},
                {
                    def (meta, bam_file) = process.out.bam.get(0)
                    assert file(bam_file).exists()
                },
                {
                    def (meta, bai_file) = process.out.bai.get(0)
                    assert file(bai_file).exists()
                }
            )
        }
    }

}
