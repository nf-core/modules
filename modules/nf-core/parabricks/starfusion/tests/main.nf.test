nextflow_process {

    name "Test Process PARABRICKS_STARFUSION"
    script "../main.nf"
    process "PARABRICKS_STARFUSION"

    tag "gpu"
    tag "modules"
    tag "modules_nfcore"
    tag "bwa/index"
    tag "parabricks"
    tag "parabricks/rnafq2bam"
    tag "parabricks/starfusion"
    tag "parabricks/starfusion_build"
    tag "parabricks/stargenomegenerate"

    setup {

        run("BWA_INDEX") {
            script "../../../bwa/index/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                """
            }
        }

        run("PARABRICKS_STARGENOMEGENERATE") {
            script "../../stargenomegenerate/main.nf"
            process {
                """
                input[0] = [
                    [ id:'minigenome_fasta' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.fa')
                ]
                input[1] = [
                    [ id:'minigenome_gtf' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.gtf')
                ]
                """
            }
        }

        run("PARABRICKS_RNAFQ2BAM") {
            script "../../rnafq2bam/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.gtf', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = PARABRICKS_STARGENOMEGENERATE.out.index
                """
            }
        }

        run("PARABRICKS_STARFUSION_BUILD"){
            script "../../starfusion_build/main.nf"
            process {
                """
                input[0] = [
                    [ id:'minigenome_fasta' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.fa')
                ]
                input[1] = [
                    [ id:'minigenome_gtf' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.gtf')
                ]
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/CTAT_HumanFusionLib.mini.dat.gz')
                input[3] = "homo_sapiens"
                input[4] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/Pfam-A.hmm.gz')
                input[5] = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_dfam.hmm'),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_dfam.hmm.h3f'),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_dfam.hmm.h3i'),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_dfam.hmm.h3m'),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_dfam.hmm.h3p')
                ]
                input[6] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/rnaseq/test_starfusion.annotfilterrule.pm')
                """
            }
        }
    }

    test("homo_sapiens - single end") {

        config "./nextflow.config"

        when {
            params {
                module_args = '--x3'
                rnafq2bam_args = '--low-memory --read-files-command zcat --out-chim-type Junctions --min-chim-segment 15 --x3'
            }
            process {
                """
                input[0] = PARABRICKS_RNAFQ2BAM.out.junction
				input[1] = PARABRICKS_STARFUSION_BUILD.out.reference
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out, 
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - stub") {

        config "./nextflow.config"
        options "-stub"

        when {
            params {
                module_args = ''
                rnafq2bam_args = '--out-chim-type Junctions'
            }
            process {
                """
                input[0] = PARABRICKS_RNAFQ2BAM.out.junction
				input[1] = PARABRICKS_STARFUSION_BUILD.out.reference
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
}
