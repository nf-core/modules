nextflow_process {

    name "Test Process PARABRICKS_APPLYBQSR"
    script "../main.nf"
    process "PARABRICKS_APPLYBQSR"

    tag "modules"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/applybqsr"

    test("parabricks_applybqsr") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.test_data_base + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true),
                    [], // index not needed unless using intervals
                    file(params.test_data_base + "genomics/sarscov2/illumina/gatk/test.baserecalibrator.table", checkIfExists: true),
                    []
                ]
                input[1] = [
                    [ id:'reference'],
                    file(params.test_data_base + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("parabricks_applybqsr_intervals") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.test_data_base + "genomics/sarscov2/illumina/bam/test.single_end.sorted.bam", checkIfExists: true),
                    file(params.test_data_base + "genomics/sarscov2/illumina/bam/test.single_end.sorted.bam.bai", checkIfExists: true),
                    file(params.test_data_base + "genomics/sarscov2/illumina/gatk/test.baserecalibrator.table", checkIfExists: true),
                    file(params.test_data_base + "genomics/sarscov2/genome/bed/test.bed", checkIfExists: true)
                ]
                input[1] = [
                    [ id:'reference'],
                    file(params.test_data_base + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("parabricks_applybqsr_intervals_stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.test_data_base + "genomics/sarscov2/illumina/bam/test.single_end.sorted.bam", checkIfExists: true),
                    file(params.test_data_base + "genomics/sarscov2/illumina/bam/test.single_end.sorted.bam.bai", checkIfExists: true),
                    file(params.test_data_base + "genomics/sarscov2/illumina/gatk/test.baserecalibrator.table", checkIfExists: true),
                    file(params.test_data_base + "genomics/sarscov2/genome/bed/test.bed", checkIfExists: true)
                ]
                input[1] = [
                    [ id:'reference'],
                    file(params.test_data_base + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
