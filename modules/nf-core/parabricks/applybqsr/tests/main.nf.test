nextflow_process {

    name "Test Process PARABRICKS_APPLYBQSR"
    script "../main.nf"
    process "PARABRICKS_APPLYBQSR"

    tag "modules"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/applybqsr"

    test("parabricks_applybqsr") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    [], // index not needed unless using intervals
                    file(params.test_data['sarscov2']['illumina']['test_baserecalibrator_table'], checkIfExists: true),
                    []
                ]
                input[1] = [
                    [ id:'reference'],
                    file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("parabricks_applybqsr_intervals") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_baserecalibrator_table'], checkIfExists: true),
                    file(params.test_data['sarscov2']['genome']['test_bed'], checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test'],
                    file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("parabricks_applybqsr_intervals_stub") {

            options "-stub"

            when {
                process {
                    """
                    input[0] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_baserecalibrator_table'], checkIfExists: true),
                        file(params.test_data['sarscov2']['genome']['test_bed'], checkIfExists: true)
                    ]
                    input[1] = [
                        [ id:'test'],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                        ]
                    """
                }
            }

            then {
                assertAll(
                    { assert process.success },
                    { assert snapshot(process.out).match() }
                )
            }

        }

}
