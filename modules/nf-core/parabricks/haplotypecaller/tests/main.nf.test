nextflow_process {

    name "Test Process PARABRICKS_HAPLOTYPECALLER"
    script "../main.nf"
    process "PARABRICKS_HAPLOTYPECALLER"

    tag "modules"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/haplotypecaller"
    tag "gpu"

    test("human - bam") {

        when {
            process {
                """
                input[0] = [
                        [ id:'test'],
                        file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                        [],
                        []
                    ],
                input[1] = [
                    [ id:'reference'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    process.out.versions,
                    ).match() 
                }
            )
        }

    }

    test("human - bam - intervals") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)      
                    ],
                input[1] = [
                    [ id:'reference'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    process.out.versions,
                    ).match() 
                }
            )
        }

    }

    test("human - bam - intervals - gvcf") {

        config './nextflow.config'

        when {
            params {
                 module_args = '--gvcf'
            }
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)
                    ],
                input[1] = [
                    [ id:'reference'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).gvcf.variantsMD5,
                    process.out.versions,
                    ).match() 
                }
            )
        }

    }

    test("human - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                        [ id:'test'],
                        file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                        [],
                        []
                    ],
                input[1] = [
                    [ id:'reference'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() 
                }
            )
        }

    }

    test("human - bam - intervals - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)      
                    ],
                input[1] = [
                    [ id:'reference'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() 
                }
            )
        }

    }

    test("human - bam - intervals - gvcf - stub") {

        options "-stub"

        config './nextflow.config'

        when {
            params {
                 module_args = '--gvcf'
            }
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)
                    ],
                input[1] = [
                    [ id:'reference'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() 
                }
            )
        }

    }

}
