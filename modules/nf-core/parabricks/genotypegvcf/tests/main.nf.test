nextflow_process {

    name "Test Process PARABRICKS_GENOTYPEGVCF"
    script "../main.nf"
    process "PARABRICKS_GENOTYPEGVCF"

    tag "modules"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/genotypegvcf"
    tag "gpu"

    test("human - gvcf") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.g.vcf', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'reference'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("human - gvf - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.g.vcf', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'reference'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
