nextflow_process {

    name "Test Process PARABRICKS_MUTECTCALLER"
    script "../main.nf"
    process "PARABRICKS_MUTECTCALLER"

    tag "modules"
    tag "parabricks/mutectcaller"
    tag "modules_nfcore"
    tag "parabricks"
    tag "gpu"

    test("human - bam") {

        config "./nextflow.config"

        when {
            params {
                module_args = "--mutect-low-memory"
            }
            process {
                """
                input[0] = [
                    [ id:'test',  tumor_id:'tumour' ],
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    [], // index only needed if using intervals or tumor-normal calling
                    [],
                    [],
                    []
                ]
                input[1] = [ // fasta
                    [ id: 'reference' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                    ]
                input[2] = [] // pon
                input[3] = [] // pon index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    process.out.stats,
                    process.out.versions
                    ).match() }
            )
        }

    }

    // test("human - bam - tn") {
    // // tumor-normal calling not passing because of issue with readgroups in the test files
    // // [PB Error][src/readers.cpp:1314] ID simulation01 maps to tm_simulation01, but PU is nm_simulation01 (different platform), exiting.

    //     config "./nextflow.config"

    //     when {
    //         params {
    //             module_args = "--in-normal-bam $normal_bam --normal-name $meta.normal_id --mutect-low-memory"
    //         }
    //         process {
    //             """
    //             input[0] = [
    //                 [ id:'test',  tumor_id:'tumour', normal_id:'normal' ],
    //                 file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
    //                 file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
    //                 file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
    //                 file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
    //                 []
    //             ]
    //             input[1] = [ // fasta
    //                 [ id: 'reference' ], //genomics/homo_sapiens/genome/chr21/sequence/genome.fasta
    //                 // file()
    //                 file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
    //                 ]
    //             input[2] = [] // pon
    //             input[3] = [] // pon index
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(
    //                 path(process.out.vcf[0][1]).vcf.variantsMD5,
    //                 process.out.stats,
    //                 process.out.versions
    //                 ).match() }
    //         )
    //     }

    // }

    // test("human - bam - intervals") {

    //     config "./nextflow.config"

    //     when {
    //         params {
    //             module_args = "--mutect-low-memory"
    //         }
    //         process {
    //             """
    //             input[0] = [
    //                 [ id:'test',  tumor_id:'tumor' ],
    //                 file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
    //                 file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
    //                 [],
    //                 [],
    //                 file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)
    //             ]
    //             input[1] = [ // fasta
    //                 [ id: 'reference' ],
    //                 file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
    //                 ]
    //             input[2] = [] // pon
    //             input[3] = [] // pon index
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(
    //                 path(process.out.vcf[0][1]).vcf.variantsMD5,
    //                 process.out.stats,
    //                 process.out.versions
    //                 ).match() }
    //         )
    //     }

    // }

    // test("human - bam - tn - intervals") {
    // // tumor-normal calling not passing because of issue with readgroups in the test files
    // // [PB Error][src/readers.cpp:1314] ID simulation01 maps to tm_simulation01, but PU is nm_simulation01 (different platform), exiting.

    //     config "./nextflow.config"

    //     when {
    //         params {
    //             module_args = "--in-normal-bam $normal_bam --normal-name $meta.normal_id --mutect-low-memory"
    //         }
    //         process {
    //             """
    //             input[0] = [
    //                 [ id:'test',  tumor_id:'tumor', normal_id:'normal'],
    //                 file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
    //                 file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
    //                 file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
    //                 file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
    //                 file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)
    //             ]
    //             input[1] = [ // fasta
    //                 [ id: 'reference' ],
    //                 file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
    //                 ]
    //             input[2] = [] // pon
    //             input[3] = [] // pon index
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(
    //                 path(process.out.vcf[0][1]).vcf.variantsMD5,
    //                 process.out.stats,
    //                 process.out.versions
    //                 ).match() }
    //         )
    //     }

    // }

    // test("human - bam - pon") {
    // // PON test not passing because the tool expects all chromosomes in the PON file to
    // // be present in the reference genome.

    //     config "./nextflow.config"

    //     when {
    //         params {
    //             module_args = "--pon $panel_of_normals --mutect-low-memory"
    //         }
    //         process {
    //             """
    //             input[0] = [
    //                 [ id:'test',  tumor_id:'tumour' ],
    //                 file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
    //                 file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
    //                 [],
    //                 [],
    //                 file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)
    //             ]
    //             input[1] = [ // fasta
    //                 [ id: 'reference' ],
    //                 file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
    //                 ]
    //             input[2] = file(params.test_data['homo_sapiens']['genome']['mills_and_1000g_indels_21_vcf_gz'], checkIfExists: true)
    //             input[3] = file(params.test_data['homo_sapiens']['genome']['mills_and_1000g_indels_21_vcf_gz_tbi'], checkIfExists: true)
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(
    //                 path(process.out.vcf[0][1]).vcf.variantsMD5,
    //                 process.out.stats,
    //                 process.out.versions
    //                 ).match() }
    //         )
    //     }

    // }

    test("human - bam - stub") {

        options '-stub'

        when {
            process {
                """
                input[0] = [
                    [ id:'test',  tumor_id:'tumour' ],
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    [], // index only neeeded if using intervals or tumor-normal calling
                    [],
                    [],
                    []
                ]
                input[1] = [ // fasta
                    [ id: 'reference' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                    ]
                input[2] = [] // pon
                input[3] = [] // pon index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot( process.out ).match() }
            )
        }

    }

    test("human - bam - pon - stub") {

        config "./nextflow.config"
        options '-stub'

        when {
            params {
                module_args = "--pon $panel_of_normals --mutect-low-memory"
            }
            process {
                """
                input[0] = [
                    [ id:'test',  tumor_id:'tumour' ],
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    [],
                    [],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)
                ]
                input[1] = [ // fasta
                    [ id: 'reference' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                    ]
                input[2] = file(params.test_data['homo_sapiens']['genome']['mills_and_1000g_indels_21_vcf_gz'], checkIfExists: true)
                input[3] = file(params.test_data['homo_sapiens']['genome']['mills_and_1000g_indels_21_vcf_gz_tbi'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot( process.out ).match() }
            )
        }

    }

}
