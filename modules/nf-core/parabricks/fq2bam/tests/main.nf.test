nextflow_process {

    name "Test Process PARABRICKS_FQ2BAM"
    script "../main.nf"
    process "PARABRICKS_FQ2BAM"

    tag "modules"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/fq2bam"

    test("parabricks_fq2bam_pe_default") {

        when {
            process {
                """
                input[0] = [
                   [ id:'test', single_end:false],
                   [
                       file(params.test_data_base + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
                       file(params.test_data_base + "genomics/sarscov2/illumina/fastq/test_2.fastq.gz", checkIfExists: true)
                   ],
                   []
               ]
               input[1] = [
                   [id: 'reference'],
                   file(params.test_data_base + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
               ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("parabricks_fq2bam_se_default") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true],
                    [file(params.test_data_base + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true)],
                    []
                ]

                input[1] = [
                    [id: 'reference'],
                    file(params.test_data_base + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
                ]
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("parabricks_fq2bam_se_default_stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true],
                    [file(params.test_data_base + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true)],
                    []
                ]

                input[1] = [
                    [id: 'reference'],
                    file(params.test_data_base + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
                ]
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
