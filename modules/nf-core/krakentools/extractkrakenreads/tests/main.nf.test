nextflow_process {

    name "Test Process KRAKENTOOLS_EXTRACTKRAKENREADS"
    script "../main.nf"
    process "KRAKENTOOLS_EXTRACTKRAKENREADS"

    tag "modules"
    tag "modules_nfcore"
    tag "kraken2/kraken2"
    tag "krakentools"
    tag "krakentools/extractkrakenreads"
    tag "untar"

    test ("sarscov2 illumina single end [fastq]") {
        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/kraken2.tar.gz', checkIfExists: true)]
                    """
                }
            }
            run("KRAKEN2_KRAKEN2") {
                script "../../../kraken2/kraken2/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test', single_end: true], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ]
                    input[1] = UNTAR.out.untar.map{ it[1] }
                    input[2] = true
                    input[3] = true
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = 2697049
                input[1] = KRAKEN2_KRAKEN2.out.classified_reads_assignment
                input[2] = KRAKEN2_KRAKEN2.out.classified_reads_fastq
                input[3] = KRAKEN2_KRAKEN2.out.report
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot ( process.out ).match() }
            )
        }
    }

    test ("sarscov2 illumina paired end [fastq]") {
        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/kraken2.tar.gz', checkIfExists: true)]
                    """
                }
            }
            run("KRAKEN2_KRAKEN2") {
                script "../../../kraken2/kraken2/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test', single_end: false],
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                        ]
                    ]
                    input[1] = UNTAR.out.untar.map{ it[1] }
                    input[2] = true
                    input[3] = true
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = 2697049
                input[1] = KRAKEN2_KRAKEN2.out.classified_reads_assignment
                input[2] = KRAKEN2_KRAKEN2.out.classified_reads_fastq
                input[3] = KRAKEN2_KRAKEN2.out.report
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot ( process.out ).match() }
            )
        }
    }
    test ("sarscov2 illumina paired end with parents [fastq]") {
        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/kraken2.tar.gz', checkIfExists: true)]
                    """
                }
            }
            run("KRAKEN2_KRAKEN2") {
                script "../../../kraken2/kraken2/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test', single_end: false],
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                        ]
                    ]
                    input[1] = UNTAR.out.untar.map{ it[1] }
                    input[2] = true
                    input[3] = true
                    """
                }
            }
        }

        options "--include-parents"
        when {
            process {
                """
                input[0] = '2697049  694009'
                input[1] = KRAKEN2_KRAKEN2.out.classified_reads_assignment
                input[2] = KRAKEN2_KRAKEN2.out.classified_reads_fastq
                input[3] = KRAKEN2_KRAKEN2.out.report
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot ( process.out ).match() }
            )
        }
    }


    test ("stub sarscov2 illumina single end [fastq]") {

        options '-stub'

        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/kraken2.tar.gz', checkIfExists: true)]
                    """
                }
            }
            run("KRAKEN2_KRAKEN2") {
                script "../../../kraken2/kraken2/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test', single_end: true], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ]
                    input[1] = UNTAR.out.untar.map{ it[1] }
                    input[2] = true
                    input[3] = true
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = 2697049
                input[1] = KRAKEN2_KRAKEN2.out.classified_reads_assignment
                input[2] = KRAKEN2_KRAKEN2.out.classified_reads_fastq
                input[3] = KRAKEN2_KRAKEN2.out.report
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot ( process.out ).match() }
            )
        }
    }

    test ("stub sarscov2 illumina paired end [fastq]") {

        options '-stub'

        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/kraken2.tar.gz', checkIfExists: true)]
                    """
                }
            }
            run("KRAKEN2_KRAKEN2") {
                script "../../../kraken2/kraken2/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test', single_end: false],
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                        ]
                    ]
                    input[1] = UNTAR.out.untar.map{ it[1] }
                    input[2] = true
                    input[3] = true
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = 2697049
                input[1] = KRAKEN2_KRAKEN2.out.classified_reads_assignment
                input[2] = KRAKEN2_KRAKEN2.out.classified_reads_fastq
                input[3] = KRAKEN2_KRAKEN2.out.report
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot ( process.out ).match() }
            )
        }
    }
    test ("stub sarscov2 illumina paired end with parents [fastq]") {

        options '-stub'
        
        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/kraken2.tar.gz', checkIfExists: true)]
                    """
                }
            }
            run("KRAKEN2_KRAKEN2") {
                script "../../../kraken2/kraken2/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test', single_end: false],
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                        ]
                    ]
                    input[1] = UNTAR.out.untar.map{ it[1] }
                    input[2] = true
                    input[3] = true
                    """
                }
            }
        }

        options "--include-parents"
        when {
            process {
                """
                input[0] = '2697049  694009'
                input[1] = KRAKEN2_KRAKEN2.out.classified_reads_assignment
                input[2] = KRAKEN2_KRAKEN2.out.classified_reads_fastq
                input[3] = KRAKEN2_KRAKEN2.out.report
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot ( process.out ).match() }
            )
        }
    }    
}
