nextflow_process {

    name "Test Process KRAKENTOOLS_KREPORT2KRONA"
    script "modules/nf-core/krakentools/kreport2krona/main.nf"
    process "KRAKENTOOLS_KREPORT2KRONA"
    tag "modules"
    tag "modules_nfcore"
    tag "untar"
    tag "kraken2"
    tag "kraken2/kraken2"
    tag "krakentools"
    tag "krakentools/kreport2krona"

    setup {
        run("UNTAR") {
            script "modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [],
                    file(
                        params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/kraken2.tar.gz',
                        checkIfExists: true
                    )
                ])
                """
            }
        }
        run("KRAKEN2_KRAKEN2") {
            script "modules/nf-core/kraken2/kraken2/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    file(
                        params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz',
                        checkIfExists: true
                    )
                ])
                input[1] = UNTAR.out.untar.map{ it[1] }
                input[2] = false
                input[3] = false
                """
            }
        }
    }

    test("sarscov2 illumina single end [fastq]") {

        when {
            process {
                """
                input[0] = KRAKEN2_KRAKEN2.out.report
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("sarscov2 illumina single end [fastq] - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = KRAKEN2_KRAKEN2.out.report
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}