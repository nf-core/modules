// nf-core modules test bamixchecker
nextflow_process {

    name "Test Process BAMIXCHECKER"
    script "../main.nf"
    process "BAMIXCHECKER"

    tag "modules"
    tag "modules_nfcore"
    tag "bamixchecker"

    test("homo_sapiens - bam") {

        when {
            process {
                """
                input[0] = [ [ id:'bams' ],
                            [
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_sorted_bam'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_sorted_bam_bai'], checkIfExists: true)
                            ]
                        ]
                input[1] = [ [ id:'fasta' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)]
                input[2] = [ [ id:'fai' ], file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)]
                input[3] = [ [ id:'dict' ], file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true)]
                input[4] = [ [ id:'target_bed' ], file(params.test_data['homo_sapiens']['genome']['genome_bed'], checkIfExists: true)]
                input[5] = [ [ id:'nhSNP' ], file('${baseDir}/modules/nf-core/bamixchecker/tests/genome.SNP.bed', checkIfExists: true)]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id:'empty bams' ],[] ]
                input[1] = [ [ id:'empty fasta' ],[] ]
                input[2] = [ [ id:'empty fai' ],[] ]
                input[3] = [ [ id:'empty dict'],[] ]
                input[4] = [ [ id:'empty target_bed' ],[] ]
                input[5] = [ [ id:'empty nhSNP' ],[] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}


