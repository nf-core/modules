nextflow_process {

    name "Test Process RESEQ_ILLUMINAPE"
    script "../main.nf"
    process "RESEQ_ILLUMINAPE"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "reseq"
    tag "reseq/illuminape"

    test("homo sapiens - fasta + bam") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test_bam', single_end:false ],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true)
                    ]
                input[1] = [
                    [ id:'sarscov2' ],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists: true),
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //{ assert file(process.out.simulated_fastqgz.get(0).get(1).find { file(it).name == "test_bam.1.fastq.gz" }).exists() },
                //{ assert file(process.out.simulated_fastqgz.get(0).get(1).find { file(it).name == "test_bam.2.fastq.gz" }).exists() }
            )
        }

    }

    test("homo sapiens - fasta + bam - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test_bam', single_end:false ],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true)
                    ]
                input[1] = [
                    [ id:'sarscov2' ],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true),
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
