
nextflow_process {

    name "Test Process GATK_INDELREALIGNER"
    script "../main.nf"
    process "GATK_INDELREALIGNER"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk"
    tag "gatk/indelrealigner"
    tag "gatk/realignertargetcreator"

    test("test.bam -> test.realigned.bam") {

        setup {
            run("GATK_REALIGNERTARGETCREATOR") {
                script "../../realignertargetcreator/main.nf"

                process {
                    """
                    input[0] = [
                        [ id:'test' ],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    ]
                    input[1] = [
                        [id: 'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    input[2] = [
                        [id: 'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                    ]
                    input[3] = [
                        [id: 'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict', checkIfExists: true)
                    ]
                    input[4] = [[],[]]
                    """
                }
            }
        }

        when {
            config "./nextflow.config"
            process {
                """
                bams_indelrealigner = Channel.of([
                    [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                ])
                input[0] = bams_indelrealigner.mix(GATK_REALIGNERTARGETCREATOR.out.intervals).groupTuple(by: 0).map{ [it[0], it[1][0], it[2], it[1][1] ] }
                input[1] = [
                    [id: 'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [id: 'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [
                    [id: 'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict', checkIfExists: true)
                ]
                input[4] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test.bam -> test.realigned.bam - stub") {

        options "-stub"

        when {
            config "./nextflow.config"
            process {
                """
                bams_indelrealigner = Channel.of([
                    [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                ])
                intervals = Channel.of([
                    [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/ngscheckmate/ngscheckmate.bed', checkIfExists: true)
                ])
                input[0] = bams_indelrealigner.mix(intervals).groupTuple(by: 0).map{ [it[0], it[1][0], it[2], it[1][1] ] }
                input[1] = [
                    [id: 'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [id: 'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [
                    [id: 'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict', checkIfExists: true)
                ]
                input[4] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
