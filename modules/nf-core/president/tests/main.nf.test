import java.text.SimpleDateFormat

nextflow_process {

    name "Test Process PRESIDENT"
    script "../main.nf"
    process "PRESIDENT"

    tag "modules"
    tag "modules_nfcore"
    tag "president"

    test("president - nocompress") {

        when {
            process {
                """             
                input[0] = [[],file(params.test_data['sarscov2']['genome']['all_sites_fas'], checkIfExists: true)]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                input[2] = []
                """

            }
        }

        then {
            def firstReportEntry = path(process.out.report.get(0).get(1)).readLines()[1].tokenize("\t")
            def firstReportAssert = ['sample1', 'all_sites.fas', 'genome.fasta', 'False', 'False', 'False', 'False', 'False', 'True', 'True', 'False', '27627', '2276', '0', '2276', '29903', '29829', '473', '0']
            def date = new Date()
            def sdf = new SimpleDateFormat("yyyy-MM-dd")
            firstReportAssert.add(sdf.format(date))

            assertAll(
                {assert process.success},
                {assert process.out.log != null},
                {assert process.out.log.size() == 1},
                {assert process.out.log.get(0).get(1) ==~ ".*/president_logger.log"},
                {assert process.out.report != null},
                {assert process.out.report.size() == 1},
                {assert process.out.report.get(0).get(1) ==~ ".*/report.tsv"},
                {assert firstReportEntry == firstReportAssert},
                {assert process.out.fasta != null},
                {assert process.out.fasta.size() == 1},
                {assert process.out.fasta.get(0).get(1).size() == 2},
                {assert process.out.fasta.get(0).get(1).get(0) ==~ ".*/invalid.fasta"},
                {assert path(process.out.fasta.get(0).get(1).get(0)).readLines().size() == 2},
                {assert path(process.out.fasta.get(0).get(1).get(0)).md5 == "5e16f45d529bac4c6d757a84802ac772"},
                {assert process.out.fasta.get(0).get(1).get(1) ==~ ".*/valid.fasta"},
                {assert path(process.out.fasta.get(0).get(1).get(1)).readLines().size() == 6},
                {assert path(process.out.fasta.get(0).get(1).get(1)).md5 == "16031b5d95fff7ff01b60615728df4ab"}
            )
        }
    }

    test("president - compress") {

        when {
            process {
                """             
                input[0] = [[],file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/alignment/all_sites.fas', checkIfExists: true)]
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                input[2] = "true"
                """
            }
        }

        then {

            def firstReportEntry = path(process.out.report.get(0).get(1)).readLines()[2].tokenize("\t")
            def firstReportAssert = ['sample2', 'MT192765.1 Severe acute respiratory syndrome coronavirus 2 isolate SARS-CoV-2/human/USA/PC00101P/2020, complete genome', 'all_sites.fas', 'genome.fasta', '0.9767', '0.9984', '0.999', 'True', 'False', 'True', 'True', 'True', 'True', 'True', 'True', '29234', '669', '0', '650', '29903', '29829', '265', '29206.0', '28.0', '1']
            def date = new Date()
            def sdf = new SimpleDateFormat("yyyy-MM-dd")
            firstReportAssert.add(sdf.format(date))
            assertAll(
                {assert process.success},

                {assert process.out.log != null},
                {assert process.out.log.size() == 1},
                {assert process.out.log.get(0).get(1) ==~ ".*/president_logger.log"},

                {assert process.out.report != null},
                {assert process.out.report.size() == 1},
                {assert process.out.report.get(0).get(1) ==~ ".*/report.tsv"},

                {assert firstReportEntry == firstReportAssert},

                {assert process.out.fasta != null},
                {assert process.out.fasta.size() == 1},
                {assert process.out.fasta.get(0).get(1).size() == 2},
                {assert process.out.fasta.get(0).get(1).get(0) ==~ ".*/invalid.fasta.gz"},
                {assert path(process.out.fasta.get(0).get(1).get(0)).linesGzip.size() == 2},
                {assert path(process.out.fasta.get(0).get(1).get(0)).md5 == "5e16f45d529bac4c6d757a84802ac772"},

                {assert process.out.fasta.get(0).get(1).get(1) ==~ ".*/valid.fasta.gz"},
                {assert path(process.out.fasta.get(0).get(1).get(1)).linesGzip.size() == 6},
                {assert path(process.out.fasta.get(0).get(1).get(1)).md5 == "16031b5d95fff7ff01b60615728df4ab"}
            )
        }
    }
}
