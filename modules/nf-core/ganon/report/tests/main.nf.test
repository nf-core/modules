nextflow_process {

    name "Test Process GANON_REPORT"
    script "../main.nf"
    process "GANON_REPORT"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "ganon"
    tag "ganon/buildcustom"
    tag "ganon/classify"
    tag "ganon/report"

    setup {
        run("GANON_BUILDCUSTOM") {
            script "../../buildcustom/main.nf"
                process {
                    """
                    input[0] = [
                                [ id:'test' ], // meta map
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                            ]
                    input[1] = []
                    input[2] = []
                    """
                }
            }
            run("GANON_CLASSIFY") {
                script "../../classify/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:true ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        ]
                    ]
                    input[1] = GANON_BUILDCUSTOM.out.db.map{it[1]}
                    """
                }
        }
    }

    test("sarscov2 single-end [fastq]") {

        when {
            process {
                """
                input[0] = GANON_CLASSIFY.out.report
                input[1] = GANON_BUILDCUSTOM.out.db.map{it[1]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 single-end [fastq] stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = GANON_CLASSIFY.out.report
                input[1] = GANON_BUILDCUSTOM.out.db.map{it[1]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
