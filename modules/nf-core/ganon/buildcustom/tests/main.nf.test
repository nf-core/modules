nextflow_process {

    name "Test Process GANON_BUILDCUSTOM"
    script "../main.nf"
    process "GANON_BUILDCUSTOM"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "ganon"
    tag "ganon/buildcustom"

    test("sarscov2 - genome - fasta") {

        when {
            params {
                module_args = '--input-target sequence'
            }
            process {
                """
                input[0] =  [
                                [ id:'test' ], // meta map
                                file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true),
                            ]
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.db.get(0).get(1).findAll { file(it).name != "test.tax" },
                        process.out.versions,
                        file(process.out.db.get(0).get(1).find { file(it).name == "test.tax" }).text.contains("MT192765.1")
                    ).match()
                },
            )
        }
    }

test("sarscov2 - genome - tsv") {

        when {
            params {
                module_args = '--input-target file'
            }
            process {
                """
                input[0] =  [
                                [ id:'test' ], // meta map
                                file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true),
                            ]
                input[1] = ch_ganon_input_tsv = Channel.of(["genome.fasta", "Severe_acute_respiratory_syndrome_coronavirus_2", "2697049"]).
                                map { it.join("\t") }
                                .collectFile (
                                    name: "ganon_fasta_input.tsv",
                                    newLine: true
                                )
                input[2] = [
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/metagenome/prot_nodes.dmp', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/metagenome/prot_names.dmp', checkIfExists: true)
                            ]
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.db.get(0).get(1),
                        process.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 - genome fasta - stub") {

        options "-stub"

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] =  [
                                [ id:'test' ], // meta map
                                file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true),
                            ]
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
