// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test ganon/classify
nextflow_process {

    name "Test Process GANON_CLASSIFY"
    script "../main.nf"
    process "GANON_CLASSIFY"

    tag "modules"
    tag "modules_nfcore"
    tag "ganon"
    tag "ganon/classify"

    test("sarscov2 - fastq - single end") {

        setup {
            run("GANON_BUILDCUSTOM") {
                script "../../buildcustom/main.nf"
                process {
                    """
                    input[0] = [
                                [ id:'test' ], // meta map
                                file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true),
                            ]
                    input[1] = []
                    input[2] = []
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                    ]
                ]
                input[1] = GANON_BUILDCUSTOM.out.db.map{it[1]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.rep,
                        process.out.tre
                    ).match()
                }
                {
                with(process.out.log) {
                    with(get(0)) {
                        assert path(get(1)).readLines().last().contains("Total elapsed time:")
                        }
                    }
                }
            )
        }

    }

    test("sarscov2 - fastq - paired end") {

        setup {
            run("GANON_BUILDCUSTOM") {
                script "../../buildcustom/main.nf"
                process {
                    """
                    input[0] = [
                                [ id:'test' ], // meta map
                                file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                            ]
                    input[1] = []
                    input[2] = []
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = GANON_BUILDCUSTOM.out.db.map{it[1]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.rep,
                        process.out.tre
                    ).match()
                }
                //{ assert path(process.out.log.get(1)).readLines().last().contains('Total elapsed time:') }
            )
        }

    }

    test("sarscov2 - fastq - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                    ]
                ]
                input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
