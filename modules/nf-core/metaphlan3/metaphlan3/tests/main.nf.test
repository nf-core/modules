nextflow_process {

    name "Test Process METAPHLAN3_METAPHLAN3"
    script "../main.nf"
    process "METAPHLAN3_METAPHLAN3"

    tag "modules"
    tag "modules_nfcore"
    tag "metaphlan"
    tag "untar"

    test("metaphlan3 single-end") {

        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                """
                input[0] = [
                            [ id:'test' ],
                            file(params.modules_testdata_base_path + 'delete_me/metaphlan_database.tar.gz', checkIfExists: true)
                ]
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ],
                    [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true) ]
                ]
                input[1] = UNTAR.out.untar.map{it[1]}
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert path(process.out.biom[0][1]).text.contains('"format": "Biological Observation Matrix 1.0.0","format_url": "http://biom-format.org","generated_by"') },
                { assert snapshot(
                    process.out.bt2out,
                    process.out.profile
                    ).match()}
            )
        }
    }

    test("metaphlan3 paired end") {

        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                """
                input[0] = [
                            [ id:'test' ],
                            file(params.modules_testdata_base_path + 'delete_me/metaphlan_database.tar.gz', checkIfExists: true)
                ]
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                      file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)]
                ]
                input[1] = UNTAR.out.untar.map{it[1]}
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert path(process.out.biom[0][1]).text.contains('"format": "Biological Observation Matrix 1.0.0","format_url": "http://biom-format.org","generated_by"') },
                { assert snapshot(
                    process.out.bt2out,
                    process.out.profile
                    ).match()}
            )
        }
    }

    test("metaphlan3 sam") {

        config "./nextflow.config"

        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                """
                input[0] = [
                            [ id:'test' ],
                            file(params.modules_testdata_base_path + 'delete_me/metaphlan_database.tar.gz', checkIfExists: true)
                ]
                """
                }
            }

            run("SAMTOOLS_VIEW"){
                script "../../../samtools/view/main.nf"
                process {
                """

                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_single_end_bam'], checkIfExists: true),
                    []
                ])
                input[1] = [[],[]]
                input[2] = []
                input[3] = []
                """
                }
            }

        }

        when {
            process {
                """
                input[0] = SAMTOOLS_VIEW.out.sam
                input[1] = UNTAR.out.untar.map{it[1]}
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert path(process.out.biom[0][1]).text.contains('"format": "Biological Observation Matrix 1.0.0","format_url": "http://biom-format.org","generated_by"') },
                { assert snapshot(
                    process.out.bt2out,
                    process.out.profile
                    ).match()}
            )
        }
    }


    test("metaphlan3 fasta") {

        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                """
                input[0] = [
                            [ id:'test' ],
                            file(params.modules_testdata_base_path + 'delete_me/metaphlan_database.tar.gz', checkIfExists: true)
                ]
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ],
                    [ file(params.test_data['sarscov2']['genome']['transcriptome_fasta'], checkIfExists: true) ]
                ]
                input[1] = UNTAR.out.untar.map{it[1]}
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert path(process.out.biom[0][1]).text.contains('"format": "Biological Observation Matrix 1.0.0","format_url": "http://biom-format.org","generated_by"') },
                { assert snapshot(
                    process.out.bt2out,
                    process.out.profile
                    ).match()}
            )
        }
    }

}