nextflow_process {

    name "Test Process BISMARK_COVERAGE2CYTOSINE"
    script "../main.nf"
    process "BISMARK_COVERAGE2CYTOSINE"

    tag "modules"
    tag "modules_nfcore"
    tag "bismark"
    tag "bismark/coverage2cytosine"
    tag "bismark/methylationextractor"
    tag "bismark/genomepreparation"

    test("sarscov2 genome [fasta] | sarscov2 paired-end methylated [bam]") {

        setup {
            run("BISMARK_GENOMEPREPARATION") {
                script "../../genomepreparation/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ])
                    """
                }
            }

            run("BISMARK_METHYLATIONEXTRACTOR") {
                script "../../methylationextractor/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                                [ id:'test', single_end:false ],
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.methylated.bam', checkIfExists: true)
                    ])
                    input[1] = BISMARK_GENOMEPREPARATION.out.index
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = BISMARK_METHYLATIONEXTRACTOR.out.coverage
                input[1] = input[1] = Channel.of([ [ id:'sarscov2'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ])
                input[2] = BISMARK_GENOMEPREPARATION.out.index
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            { assert snapshot(process.out).match() }
            )
        }

    }

}
