nextflow_process {

    name "Test Process BISMARK_ALIGN"
    script "../main.nf"
    process "BISMARK_ALIGN"
    tag "modules"
    tag "modules_nfcore"
    tag "bismark"
    tag "bismark/align"
    tag "bismark/genomepreparation"

    test("Should run bismark/align (bowtie2 single end) without failures") {
        config './nextflow_bowtie2.config'

        setup {
            run("BISMARK_GENOMEPREPARATION") {
                script "../../genomepreparation/main.nf"
                process {
                    """
                    input[0] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                            [ id:'test', single_end:true ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz', checkIfExists: true)
                           ]
                input[1] = BISMARK_GENOMEPREPARATION.out.index
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            {
                with(process.out.report) {
                    with(get(0)) {
                        assert get(1).endsWith("bt2_SE_report.txt")
                        assert path(get(1)).readLines().last().contains("Bismark completed in")
                    }
                }
            },
            { assert snapshot(
                process.out.bam.collect { bam(it[1]).getReadsMD5() },
                process.out.unmapped,
                process.out.versions
                ).match()
            }
            )
        }
    }

    test("Should run bismark/align (bowtie2 paired end) without failures") {
        config './nextflow_bowtie2.config'

        setup {
            run("BISMARK_GENOMEPREPARATION") {
                script "../../genomepreparation/main.nf"
                process {
                    """
                    input[0] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    """
                }
            }
        }
        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ],
                            [
                             file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz', checkIfExists: true),
                             file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_2.fastq.gz', checkIfExists: true)
                            ]
                           ]
                input[1] = BISMARK_GENOMEPREPARATION.out.index
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            {
                with(process.out.report) {
                    with(get(0)) {
                        assert get(1).endsWith("_bt2_PE_report.txt")
                        assert path(get(1)).readLines().last().contains("Bismark completed in")
                    }
                }
            },
            { assert snapshot(
                process.out.bam.collect { bam(it[1]).getReadsMD5() },
                process.out.unmapped,
                process.out.versions
                ).match()
            }
            )
        }
    }

    test("Should run bismark/align (hisat2 single end) without failures") {
        config './nextflow_hisat2.config'

        setup {
            run("BISMARK_GENOMEPREPARATION") {
                script "../../genomepreparation/main.nf"
                process {
                    """
                    input[0] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                            [ id:'test', single_end:true ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz', checkIfExists: true)
                           ]
                input[1] = BISMARK_GENOMEPREPARATION.out.index
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            {
                with(process.out.report) {
                    with(get(0)) {
                        assert get(1).endsWith("hisat2_SE_report.txt")
                        assert path(get(1)).readLines().last().contains("Bismark completed in")
                    }
                }
            },
            { assert snapshot(
                process.out.bam.collect { bam(it[1]).getReadsMD5() },
                process.out.unmapped,
                process.out.versions
                ).match()
            }
            )
        }
    }

    test("Should run bismark/align (hisat2 paired end) without failures") {
        config './nextflow_hisat2.config'

        setup {
            run("BISMARK_GENOMEPREPARATION") {
                script "../../genomepreparation/main.nf"
                process {
                    """
                    input[0] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ],
                            [
                             file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz', checkIfExists: true),
                             file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_2.fastq.gz', checkIfExists: true)
                            ]
                           ]
                input[1] = BISMARK_GENOMEPREPARATION.out.index
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            {
                with(process.out.report) {
                    with(get(0)) {
                        assert get(1).endsWith("hisat2_PE_report.txt")
                        assert path(get(1)).readLines().last().contains("Bismark completed in")
                    }
                }
            },
            { assert snapshot(
                process.out.bam.collect { bam(it[1]).getReadsMD5() },
                process.out.unmapped,
                process.out.versions
                ).match()
            }
            )
        }
    }

    test("Should run bismark/align (minimap2 single end) without failures") {
        config './nextflow_minimap2.config'

        setup {
            run("BISMARK_GENOMEPREPARATION") {
                script "../../genomepreparation/main.nf"
                process {
                    """
                    input[0] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                            [ id:'test', single_end:true ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz', checkIfExists: true)
                           ]
                input[1] = BISMARK_GENOMEPREPARATION.out.index
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            {
                with(process.out.report) {
                    with(get(0)) {
                        assert get(1).endsWith("mm2_SE_report.txt")
                        assert path(get(1)).readLines().last().contains("Bismark completed in")
                    }
                }
            },
            { assert snapshot(
                process.out.bam.collect { bam(it[1]).getReadsMD5() },
                process.out.unmapped,
                process.out.versions
                ).match()
            }
            )
        }
    }
}
