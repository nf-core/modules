nextflow_process {

    name "Test Process BISMARK_ALIGN"
    script "../main.nf"
    process "BISMARK_ALIGN"

    tag "modules"
    tag "modules_nfcore"
    tag "bismark"
    tag "bismark/align"
    tag "bismark/genomepreparation"

    setup {
        run("BISMARK_GENOMEPREPARATION") {
            script "../../genomepreparation/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                """
            }
        }
    }

    test("bowtie2 single-end / sarscov2 genome [fasta]") {
        config './nextflow_bowtie2.config'

        when {
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz', checkIfExists: true)
                           ])
                input[1] = Channel.of([ [ id:'sarscov2'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ])
                input[2] = BISMARK_GENOMEPREPARATION.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { bam(it[1]).getReadsMD5() },
                    file(process.out.report[0][1]).readLines().contains("Number of alignments with a unique best hit from the different alignments:\t5009"),
                    process.out.unmapped,
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("bowtie2 paired-end / sarscov2 genome [fasta]") {
        config './nextflow_bowtie2.config'

        when {
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            [
                             file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz', checkIfExists: true),
                             file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_2.fastq.gz', checkIfExists: true)
                            ]
                           ])
                input[1] = Channel.of([ [ id:'sarscov2'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ])
                input[2] = BISMARK_GENOMEPREPARATION.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { bam(it[1][0]).getReadsMD5() },
                    file(process.out.report[0][1][0]).readLines().contains("Number of alignments with a unique best hit from the different alignments:\t5009"),
                    process.out.unmapped,
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("hisat2 single-end / sarscov2 genome [fasta]") {
        config './nextflow_hisat2.config'

        when {
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz', checkIfExists: true)
                           ])
                input[1] = Channel.of([ [ id:'sarscov2'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ])
                input[2] = BISMARK_GENOMEPREPARATION.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { bam(it[1]).getReadsMD5() },
                    file(process.out.report[0][1]).readLines().contains("Number of alignments with a unique best hit from the different alignments:\t5009"),
                    process.out.unmapped,
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("hisat2 paired-end / sarscov2 genome [fasta]") {
        config './nextflow_hisat2.config'

        when {
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            [
                             file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz', checkIfExists: true),
                             file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_2.fastq.gz', checkIfExists: true)
                            ]
                           ])
                input[1] = Channel.of([ [ id:'sarscov2'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ])
                input[2] = BISMARK_GENOMEPREPARATION.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { bam(it[1][0]).getReadsMD5() },
                    file(process.out.report[0][1][0]).readLines().contains("Number of alignments with a unique best hit from the different alignments:\t5009"),
                    process.out.unmapped,
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("minimap2 single-end / sarscov2 genome [fasta]") {
        config './nextflow_minimap2.config'

        when {
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz', checkIfExists: true)
                           ])
                input[1] = Channel.of([ [ id:'sarscov2'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ])
                input[2] = BISMARK_GENOMEPREPARATION.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { bam(it[1]).getReadsMD5() },
                    file(process.out.report[0][1]).readLines().contains("Number of alignments with a unique best hit from the different alignments:\t5047"),
                    process.out.unmapped,
                    process.out.versions
                    ).match()
                }
            )
        }
    }

}
