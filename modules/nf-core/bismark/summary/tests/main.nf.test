nextflow_process {

    name "Test Process BISMARK_SUMMARY"
    script "../main.nf"
    process "BISMARK_SUMMARY"

    tag "modules"
    tag "modules_nfcore"
    tag "bismark"
    tag "bismark/summary"
    tag "bismark/align"
    tag "bismark/deduplicate"
    tag "bismark/genomepreparation"
    tag "bismark/methylationextractor"

    test("sarscov2 genome [fasta] | sarscov2 single-end methylated [fastq]") {

        setup {
            run("BISMARK_GENOMEPREPARATION") {
                script "../../genomepreparation/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ])
                    """
                }
            }

            run("BISMARK_ALIGN") {
                script "../../align/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                                [ id:'test', single_end:true ],
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test.methylated_1.fastq.gz', checkIfExists: true)
                    ])
                    input[1] = Channel.of([ [ id:'sarscov2'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ])
                    input[2] = BISMARK_GENOMEPREPARATION.out.index
                    """
                }
            }

            run("BISMARK_DEDUPLICATE") {
                script "../../deduplicate/main.nf"
                process {
                    """
                    input[0] = BISMARK_ALIGN.out.bam
                    """
                }
            }

            run("BISMARK_METHYLATIONEXTRACTOR") {
                script "../../methylationextractor/main.nf"
                process {
                    """
                    input[0] = BISMARK_ALIGN.out.bam
                    input[1] = BISMARK_GENOMEPREPARATION.out.index
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = BISMARK_ALIGN.out.bam.collect { meta, bam -> bam }
                input[1] = BISMARK_ALIGN.out.report.collect { meta, report -> report }
                input[2] = BISMARK_DEDUPLICATE.out.report.collect { meta, report -> report }
                input[3] = BISMARK_METHYLATIONEXTRACTOR.out.report.collect { meta, report -> report }
                input[4] = BISMARK_METHYLATIONEXTRACTOR.out.mbias.collect { meta, txt -> txt }
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            { assert snapshot(process.out.versions).match("versions") },
            {
                with(process.out.summary) {
                    assert get(0).size() == 2
                    assert get(0).every { it.contains('bismark_summary_report') }
                    assert path(get(0).get(1)).readLines().first().contains('CpGs')
                    assert path(get(0).get(0)).readLines().last().contains('</html>')
                }
            }
            )
        }

    }

}
