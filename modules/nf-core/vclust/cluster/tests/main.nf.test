nextflow_process {

    name "Test Process VCLUST_CLUSTER"
    script "../main.nf"
    process "VCLUST_CLUSTER"

    tag "modules"
    tag "modules_nfcore"
    tag "vclust"
    tag "vclust/cluster"
    tag "vclust/align"

    setup {
        run("VCLUST_ALIGN") {
            script "../../align/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true),
                ]
                input[1] = [[:], []]
                input[2] = false
                """
            }
        }
    }

    test("sarscov2 - tsv - ani") {

        when {
            process {
                """
                input[0] = VCLUST_ALIGN.out.tsv
                input[1] = VCLUST_ALIGN.out.ids
                input[2] = 'ani'
                input[3] = []
                input[4] = []
                input[5] = '0.7'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.log.get(0).get(1)).getText().contains("ani 0.7")},
                { assert snapshot(
                    process.out.clusters,
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("sarscov2 - tsv - tani") {

        when {
            process {
                """
                input[0] = VCLUST_ALIGN.out.tsv
                input[1] = VCLUST_ALIGN.out.ids
                input[2] = 'tani'
                input[3] = 0.89
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.log.get(0).get(1)).getText().contains("tani 0.89")},
                { assert snapshot(
                    process.out.clusters,
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("sarscov2 - tsv - gani") {

        when {
            process {
                """
                input[0] = VCLUST_ALIGN.out.tsv
                input[1] = VCLUST_ALIGN.out.ids
                input[2] = 'gani'
                input[3] = []
                input[4] = 0.78
                input[5] = 0.85
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.log.get(0).get(1)).getText().contains("gani 0.78")},
                { assert snapshot(
                    process.out.clusters,
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("sarscov2 - tsv - fail metric") {

        when {
            process {
                """
                input[0] = VCLUST_ALIGN.out.tsv
                input[1] = VCLUST_ALIGN.out.ids
                input[2] = []
                input[3] = []
                input[4] = 0.78
                input[5] = 0.85
                """
            }
        }

        then {
            assertAll(
                { assert process.failed },
                { assert process.errorReport.contains("ERROR: The metric must be specified.")}
            )
        }

    }

    test("sarscov2 - tsv - fail threshold") {

        when {
            process {
                """
                input[0] = VCLUST_ALIGN.out.tsv
                input[1] = VCLUST_ALIGN.out.ids
                input[2] = 'ani'
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.failed },
                { assert process.errorReport.contains("ERROR: At least one of the ani thresholds must be specified: --tani, --gani, --ani.")}
            )
        }

    }

    test("sarscov2 - tsv - fail associated metric") {

        when {
            process {
                """
                input[0] = VCLUST_ALIGN.out.tsv
                input[1] = VCLUST_ALIGN.out.ids
                input[2] = 'ani'
                input[3] = 0.70
                input[4] = []
                input[5] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.failed },
                { assert process.errorReport.contains("ERROR: The metric 'ani' must have an associated threshold.")}
            )
        }
    }

    test("sarscov2 - tsv - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = VCLUST_ALIGN.out.tsv
                input[1] = VCLUST_ALIGN.out.ids
                input[2] = 'ani'
                input[3] = []
                input[4] = []
                input[5] = 0.7
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
