nextflow_process {

    name "Test Process TXIMETA_TXIMPORT"
    script "../main.nf"
    process "TXIMETA_TXIMPORT"

    tag "modules"
    tag "modules_nfcore"
    tag "custom/tx2gene"
    tag "tximeta"
    tag "tximeta/tximport"
    tag "untar"

    test("saccharomyces_cerevisiae - kallisto - gtf") {

        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test'], // meta map
                        file(params.modules_testdata_base_path + 'genomics/eukaryotes/saccharomyces_cerevisiae/kallisto_results.tar.gz', checkIfExists: true)
                    ])
                    """
                }
            }
            run("CUSTOM_TX2GENE") {
                script "../../../custom/tx2gene/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test'], // meta map
                        file(params.modules_testdata_base_path + 'genomics/eukaryotes/saccharomyces_cerevisiae/genome_gfp.gtf', checkIfExists: true)
                    ])
                    input[1] = UNTAR.out.untar.map { meta, dir -> [ meta, dir.listFiles().collect() ] }
                    input[2] = 'kallisto'
                    input[3] = 'gene_id'
                    input[4] = 'gene_name'
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = UNTAR.out.untar.map { meta, dir -> [ meta, dir.listFiles().collect() ] }
                input[1] = CUSTOM_TX2GENE.out.tx2gene
                input[2] = 'kallisto'
                """
            }
        }


        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.counts_gene,
                    process.out.counts_gene_length_scaled,
                    process.out.counts_gene_scaled,
                    process.out.counts_transcript,
                    process.out.lengths_gene,
                    process.out.lengths_transcript,
                    process.out.tpm_gene,
                    process.out.tpm_transcript,
                    process.out.versions).match()
                }
            )
        }
    }

    test("saccharomyces_cerevisiae - kallisto - gtf - stub") {

        options "-stub"

        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test'], // meta map
                        file(params.modules_testdata_base_path + 'genomics/eukaryotes/saccharomyces_cerevisiae/kallisto_results.tar.gz', checkIfExists: true)
                    ])
                    """
                }
            }
            run("CUSTOM_TX2GENE") {
                script "../../../custom/tx2gene/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test'], // meta map
                        file(params.modules_testdata_base_path + 'genomics/eukaryotes/saccharomyces_cerevisiae/genome_gfp.gtf', checkIfExists: true)
                    ])
                    input[1] = UNTAR.out.untar.map { meta, dir -> [ meta, dir.listFiles().collect() ] }
                    input[2] = 'kallisto'
                    input[3] = 'gene_id'
                    input[4] = 'gene_name'
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel.of([ [], [] ])
                input[1] = Channel.of([ [], [] ])
                input[2] = 'kallisto'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()
                }
            )
        }

    }
    test("saccharomyces_cerevisiae - salmon - gtf") {

        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test'], // meta map
                        file(params.modules_testdata_base_path + 'genomics/eukaryotes/saccharomyces_cerevisiae/salmon_results.tar.gz', checkIfExists: true)
                    ])
                    """
                }
            }
            run("CUSTOM_TX2GENE") {
                script "../../../custom/tx2gene/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test'], // meta map
                        file(params.modules_testdata_base_path + 'genomics/eukaryotes/saccharomyces_cerevisiae/genome_gfp.gtf', checkIfExists: true)
                    ])
                    input[1] = UNTAR.out.untar.map { meta, dir -> [ meta, dir.listFiles().collect() ] }
                    input[2] = 'salmon'
                    input[3] = 'gene_id'
                    input[4] = 'gene_name'
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = UNTAR.out.untar.map { meta, dir -> [ meta, dir.listFiles().collect() ] }
                input[1] = CUSTOM_TX2GENE.out.tx2gene
                input[2] = 'salmon'
                """
            }
        }


        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.counts_gene,
                    process.out.counts_gene_length_scaled,
                    process.out.counts_gene_scaled,
                    process.out.counts_transcript,
                    process.out.lengths_gene,
                    process.out.lengths_transcript,
                    process.out.tpm_gene,
                    process.out.tpm_transcript,
                    process.out.versions).match()
                }
            )
        }

    }

    test("saccharomyces_cerevisiae - salmon - gtf - stub") {

        options "-stub"

        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test'], // meta map
                        file(params.modules_testdata_base_path + 'genomics/eukaryotes/saccharomyces_cerevisiae/salmon_results.tar.gz', checkIfExists: true)
                    ])
                    """
                }
            }
            run("CUSTOM_TX2GENE") {
                script "../../../custom/tx2gene/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test'], // meta map
                        file(params.modules_testdata_base_path + 'genomics/eukaryotes/saccharomyces_cerevisiae/genome_gfp.gtf', checkIfExists: true)
                    ])
                    input[1] = UNTAR.out.untar.map { meta, dir -> [ meta, dir.listFiles().collect() ] }
                    input[2] = 'salmon'
                    input[3] = 'gene_id'
                    input[4] = 'gene_name'
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel.of([ [], [] ])
                input[1] = Channel.of([ [], [] ])
                input[2] = 'salmon'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()}
            )
        }
    }
}

