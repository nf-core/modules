nextflow_process {

    name "Test Process MELON"
    script "../main.nf"
    process "MELON"

    tag "modules"
    tag "modules_nfcore"
    tag "untar"
    tag "melon"

    setup {
        run("UNTAR") {
            script "modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [],
                    file(
                        params.modules_testdata_base_path + 'delete_me/melon_db.tar.gz',
                        checkIfExists: true
                    )
                ])
                """
            }
        }
    }

    test("bacteroides_fragilis - nanopore fastq") {

        when {
            process {
                """                
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/nanopore/fastq/test.fastq.gz', checkIfExists: true)
                ]

                input[1] =  UNTAR.out.untar.map{ it[1] }
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.tsv_output,
                                process.out.json_output,
                                process.out.versions).match() },
                { assert path(process.out.log[0][1]).exists() }
            )
        }

    }

    test("bacteroides_fragilis - nanopore fastq - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/nanopore/fastq/test.fastq.gz', checkIfExists: true)
                ]

                input[1] =  UNTAR.out.untar.map{ it[1] }
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.tsv_output,
                                process.out.json_output,
                                process.out.versions).match() },
                { assert path(process.out.log[0][1]).exists() }
            )
        }

    }
}
