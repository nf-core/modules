nextflow_process {

    name "Test Process DEEPTOOLS_PLOTCORRELATION"
    script "../main.nf"
    process "DEEPTOOLS_PLOTCORRELATION"

    tag "modules"
    tag "modules_nfcore"
    tag "deeptools"
    tag "deeptools/plotcorrelation"
    tag "deeptools/multibamsummary"

    test("homo_sampiens - bam") {

        setup {
            run("DEEPTOOLS_MULTIBAMSUMMARY") {
                script "../../multibamsummary/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true)
                        ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true)
                        ],
                        [ "test_bam1", "test_bam2" ]
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = DEEPTOOLS_MULTIBAMSUMMARY.out.matrix.collect{ meta, matrix -> matrix }.map{ matrix -> [[ id: 'test' ], matrix] }
                input[1] = 'spearman'
                input[2] = 'heatmap'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.pdf.get(0).get(1)).name,
                                  process.out.matrix,
                                  process.out.versions)
                                  .match()
                }
            )
        }
    }

    test("homo_sampiens - bam - no_method") {

        setup {
            run("DEEPTOOLS_MULTIBAMSUMMARY") {
                script "../../multibamsummary/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true)
                        ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true)
                        ],
                        [ "test_bam1", "test_bam2" ]
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = DEEPTOOLS_MULTIBAMSUMMARY.out.matrix.collect{ meta, matrix -> matrix }.map{ matrix -> [[ id: 'test' ], matrix] }
                input[1] = ''
                input[2] = 'heatmap'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.pdf.get(0).get(1)).name,
                                  process.out.matrix,
                                  process.out.versions)
                                  .match()
                }
            )
        }
    }

    test("homo_sampiens - bam - no_plot_type") {

        setup {
            run("DEEPTOOLS_MULTIBAMSUMMARY") {
                script "../../multibamsummary/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true)
                        ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true)
                        ],
                        [ "test_bam1", "test_bam2" ]
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = DEEPTOOLS_MULTIBAMSUMMARY.out.matrix.collect{ meta, matrix -> matrix }.map{ matrix -> [[ id: 'test' ], matrix] }
                input[1] = 'spearman'
                input[2] = ''
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.pdf.get(0).get(1)).name,
                                  process.out.matrix,
                                  process.out.versions)
                                  .match()
                }
            )
        }
    }

    test("homo_sampiens - bam - stub") {

        options "-stub"
        
        setup {
            run("DEEPTOOLS_MULTIBAMSUMMARY") {
                script "../../multibamsummary/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true)
                        ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true)
                        ],
                        [ "test_bam1", "test_bam2" ]
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = DEEPTOOLS_MULTIBAMSUMMARY.out.matrix.collect{ meta, matrix -> matrix }.map{ matrix -> [[ id: 'test' ], matrix] }
                input[1] = 'spearman'
                input[2] = 'heatmap'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
