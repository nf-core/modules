nextflow_process {

    name "Test Process SEGEMEHL_ALIGN"
    script "../main.nf"
    process "SEGEMEHL_ALIGN"
    tag "modules"
    tag "modules_nfcore"
    tag "segemehl"
    tag "segemehl/align"
    tag "segemehl/index"

    setup {
        run("SEGEMEHL_INDEX") {
            script "../../../segemehl/index/main.nf"
            process {
                """
                input[0] = Channel.of([
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                """
            }
        }
    }

    test("homo_sapiens - single_end") {
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = SEGEMEHL_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.alignment[0][1]).exists() },
                { assert snapshot(process.out.versions).match("homo_sapiens - single_end - versions") }
            )
        }
    }

    test("homo_sapiens - paired_end") {
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = Channel.of([
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = SEGEMEHL_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.alignment[0][1]).exists() },
                { assert snapshot(process.out.versions).match("homo_sapiens - paired_end - versions") }
            )
        }
    }

    test("homo_sapiens - split - single_end") {
        config "./split.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = SEGEMEHL_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.alignment[0][1]).exists() },
                { assert path(process.out.trans_alignments[0][1]).exists() },
                { assert path(process.out.multi_bed[0][1]).exists() },
                { assert path(process.out.single_bed[0][1]).exists() },
                { assert snapshot(process.out.versions).match("homo_sapiens - split - single_end - versions") }
            )
        }
    }

    test("homo_sapiens - split - paired_end") {
        config "./split.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = Channel.of([
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = SEGEMEHL_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.alignment[0][1]).exists() },
                { assert path(process.out.trans_alignments[0][1]).exists() },
                { assert path(process.out.multi_bed[0][1]).exists() },
                { assert path(process.out.single_bed[0][1]).exists() },
                { assert snapshot(process.out.versions).match("homo_sapiens - split - paired_end - versions") }
            )
        }
    }
}