---
# yaml-language-server: $schema=https://raw.githubusercontent.com/nf-core/modules/master/modules/meta-schema.json
name: "quilt2"
description: |
  QUILT2 is an R and C++ program for fast genotype imputation from low-coverage sequence using a large reference panel.
  QUILT2 is accurate and versatile, able to handle imputation from short read, long read, ancient DNA and cell-free DNA from NIPT.
keywords:
  - imputation
  - low-coverage
  - long-read
  - genotype
  - genomics
  - vcf
tools:
  - "quilt2":
      description: "Rapid and accurate genotype imputation from low coverage short read, long read, and cell free DNA sequence."
      homepage: "https://github.com/rwdavies/quilt"
      documentation: "https://github.com/rwdavies/quilt"
      tool_dev_url: "https://github.com/rwdavies/quilt"
      doi: ""
      licence: ['GPL v3']
      identifier: ""

input:
  - - meta:
        type: map
        description: |
          Groovy Map containing sample information
          e.g. [ id:'test', single_end:false ]
    - bams:
        type: file
        description: (Mandatory) BAM/CRAM files
        pattern: "*.{bam,cram,sam}"
    - bais:
        type: file
        description: (Mandatory) BAM/CRAM index files
        pattern: "*.{bai}"
    - bamlist:
        type: file
        description: (Optional) File with list of BAM/CRAM files to impute.
          One file per line.
        pattern: "*.{txt}"
    - samplename:
        type: file
        description: (Optional) File with list of samples names in the same order as in bamlist to impute.
          One file per line.
        pattern: "*.{txt}"
    - reference_vcf_file:
        type: file
        description: (Mandatory) Reference VCF phased panel file.
        pattern: "*.{vcf.gz}"
    - reference_vcf_index:
        type: file
        description: (Mandatory) Reference VCF phased panel file index.
        pattern: "*.{vcf.gz.tbi}"
    - posfile:
        type: file
        description: (Optional) File with positions of where to impute, lining up one-to-one
          with genfile. File is tab separated with no header, one row per SNP, with
          col 1 = chromosome, col 2 = physical position (sorted from smallest to largest),
          col 3 = reference base, col 4 = alternate base. Bases are capitalized.
        pattern: "*.{txt}"
    - phasefile:
        type: file
        description: (Optional) File with truth phasing results. Supersedes genfile
          if both options given. File has a header row with a name for each sample,
          matching what is found in the bam file. Each subject is then a tab separated
          column, with 0 = ref and 1 = alt, separated by a vertical bar |, e.g. 0|0
          or 0|1. Note therefore this file has one more row than posfile which has no
          header.
        pattern: "*.{txt}"
    - genfile:
        type: file
        description: (Optional) Path to gen file with high coverage results.
          Empty for no genfile. If both genfile and phasefile are given, only phasefile
          is used, as genfile (unphased genotypes) is derivative to phasefile
          (phased genotypes). File has a header row with a name for each sample,
          matching what is found in the bam file. Each subject is then a tab seperated
          column, with 0 = hom ref, 1 = het, 2 = hom alt and NA indicating missing genotype,
          with rows corresponding to rows of the posfile.
          Note therefore this file has one more row than posfile which has no header [default \"\"]
        pattern: "*.{txt}"
    - chr:
        type: string
        description: (Mandatory) What chromosome to run. Should match BAM headers.
    - regions_start:
        type: integer
        description: (Mandatory) When running imputation, where to start from. The 1-based
          position x is kept if regionStart <= x <= regionEnd.
    - regions_end:
        type: integer
        description: (Mandatory) When running imputation, where to stop.
    - ngen:
        type: integer
        description: Number of generations since founding or mixing. Note that the algorithm
          is relatively robust to this. Use nGen = 4 * Ne / K if unsure.
    - buffer:
        type: integer
        description: Buffer of region to perform imputation over. So imputation is run
          form regionStart-buffer to regionEnd+buffer, and reported for regionStart
          to regionEnd, including the bases of regionStart and regionEnd.
    - genetic_map_file:
        type: file
        description: (Optional) File with genetic map information, a file with 3 white-space
          delimited entries giving position (1-based), genetic rate map in cM/Mbp, and
          genetic map in cM. If no file included, rate is based on physical distance
          and expected rate (expRate).
        pattern: "*.{txt.gz}"
  - - meta2:
        type: map
        description: |
          Groovy Map containing sample information
          e.g. [ id:'test', single_end:false ]
    - fasta:
        type: file
        description: (Optional) File with reference genome.
        pattern: "*.{txt.gz}"
output:
  - vcf:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - "*.vcf.gz":
          type: file
          description: VCF file with both SNP annotation information and per-sample genotype
            information.
          pattern: "*.{vcf.gz}"
  - tbi:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - "*.vcf.gz.tbi":
          type: file
          description: TBI file of the VCF.
          pattern: "*.{vcf.gz.tbi}"
  - rdata:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - 'RData", type: "dir':
          type: directory
          description: Optional directory path to prepared RData file with reference objects
            (useful with --save_prepared_reference=TRUE).
  - plots:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - 'plots", type: "dir':
          type: directory
          description: Optional directory path to save plots.
  - versions:
      - versions.yml:
          type: file
          description: File containing software versions
          pattern: "versions.yml"

authors:
  - "@LouisLeNezet"
maintainers:
  - "@LouisLeNezet"
