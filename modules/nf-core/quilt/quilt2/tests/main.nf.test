nextflow_process {

    name "Test Process QUILT2"
    script "../main.nf"
    config "./nextflow.config"
    process "QUILT_QUILT2"

    tag "modules"
    tag "modules_nfcore"
    tag "quilt/quilt2"
    tag "quilt2"

    setup {
        run("GAWK") {
            script "../../../gawk/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'map' ],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.GRCh38.eagle.22.map.gz", checkIfExists: true)
                ])
                input[1] = Channel.of('{ OFS=" " } { if (\$2 == "15333045") { \$3 = "0.8914971326" } ; print \$2, \$3, \$4 }').collectFile(name:"program.txt")
                input[2] = false
                """
            }
        }
    }

    test("QUILT2 no optional files") {
        tag "test"
        when {
            params {
                quilt_args = "--seed=1"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', chr:'chr22' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/NA12878.chr22.1X.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/NA12878.chr22.1X.bam.bai', checkIfExists: true),
                    [],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists: true),
                    [], [],
                    "chr22", "16570000", "16610000", "100", "10000"
                ]).combine(
                    GAWK.out.output.map{it[1]}
                )
                input[1] = [[id: 'GRCh38'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("QUILT2 optional output") {
        when {
            params {
                quilt_args = "--save_prepared_reference=TRUE --make_plots=TRUE --seed=1"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', chr:'chr22' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/NA12878.chr22.1X.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/NA12878.chr22.1X.bam.bai', checkIfExists: true),
                    [],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists: true),
                    [], [],
                    "chr22", "16570000", "16610000", "100", "10000"
                ]).combine(
                    GAWK.out.output.map{it[1]}
                )
                input[1] = [[id: 'GRCh38'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                """
            }
        }

        then {
            def dir = new File(process.out.plots[0][1])
            def list = []
            dir.eachFileRecurse { file -> list << file.getName() }
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.vcf + process.out.tbi +
                    list.sort() +
                    process.out.rdata + process.out.versions
                ).match() }
            )
        }

    }

    test("QUILT with bamlist") {
        when {
            params {
                quilt_args = "--seed=1"
            }
            process {
                """
                bamlist = Channel.of(
                    "NA12878.bam"
                ).collectFile(name : 'bamlist.txt', newLine : true)

                ch_input = Channel.of([
                    [ id:'test', chr:'chr22' ],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/NA12878.chr22.1X.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/NA12878.chr22.1X.bam.bai", checkIfExists: true),
                ]).combine(
                    bamlist
                ).combine(Channel.of([
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists: true),
                    [], [],
                    "chr22", "16580000", "16600000", "100", "20000"
                ])).combine(
                    GAWK.out.output.map{it[1]}
                )
                input[1] = Channel.of([
                    [id:'refHG37_chr22'],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/GRCh37_chr22.fasta.gz", checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
}