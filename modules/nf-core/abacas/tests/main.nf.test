nextflow_process {

    name "Test Process ABACAS"
    script "../main.nf"
    process "ABACAS"
    config "./nextflow.config"
    tag "modules"
    tag "modules_nfcore"
    tag "abacas"

    test("sarscov2 - scaffolds_fasta - genome_fasta") {

        when {
            params {
                abacas_args = '-m -p nucmer'
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/scaffolds.fasta', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'fasta' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out.results[0][1].collect {
                    file(it).name in [
                        "test.abacas.nucmer.delta", // Full path present in file
                        "test.abacas.unused.contigs.out", // Empty file
                        "test.abacas.nucmer.filtered.delta" // Full path present in file
                    ] ? file(it).name : it
                },
                process.out.versions,
                path(process.out.versions[0]).yaml
            ).match()
        }
    }

    test("sarscov2 - scaffolds_fasta - genome_fasta -- stub") {
        options "-stub"

        when {
            params {
                abacas_args = '-m -p nucmer'
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/scaffolds.fasta', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'fasta' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out.results,
                process.out.versions,
                path(process.out.versions[0]).yaml
            ).match()
        }
    }

}
