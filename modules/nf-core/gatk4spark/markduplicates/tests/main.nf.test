nextflow_process {

    name "Test Process GATK4SPARK_MARKDUPLICATES"
    script "../main.nf"
    config "./nextflow.config"
    process "GATK4SPARK_MARKDUPLICATES"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4spark"
    tag "gatk4spark/markduplicates"

    test("sarscov2 - bam") {
        config "./bam.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true)
                ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                input[2] = file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true)
                input[3] = file(params.test_data['sarscov2']['genome']['genome_dict'], checkIfExists: true)
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - bam - multiple") {
        config "./bam.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_name_sorted_bam'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_name_sorted_bam'], checkIfExists: true)
                    ]
                ]
                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                input[2] = file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                input[3] = file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true)
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - bam - metrics") {
        config "./metrics.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_name_sorted_bam'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_name_sorted_bam'], checkIfExists: true)
                    ]
                ]
                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                input[2] = file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                input[3] = file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true)
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out.versions,
                    process.out.output,
                    process.out.bam_index,
                    path(process.out.metrics[0][1]).readLines()[5],
                    path(process.out.metrics[0][1]).readLines().size(),
                    path(process.out.versions[0]).yaml
                    )
                }
            )
        }
    }

    test("homo_sapiens - cram") {
        config "./cram.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_name_sorted_bam'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_name_sorted_bam'], checkIfExists: true)
                    ]
                ]
                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                input[2] = file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                input[3] = file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true)
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("sarscov2 - bam -stub") {
        options "-stub"
        config "./bam.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true)
                ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                input[2] = file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true)
                input[3] = file(params.test_data['sarscov2']['genome']['genome_dict'], checkIfExists: true)
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - bam - multiple -stub") {
        options "-stub"
        config "./bam.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_name_sorted_bam'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_name_sorted_bam'], checkIfExists: true)
                    ]
                ]
                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                input[2] = file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                input[3] = file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true)
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - bam - metrics -stub") {
        options "-stub"
        config "./metrics.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_name_sorted_bam'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_name_sorted_bam'], checkIfExists: true)
                    ]
                ]
                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                input[2] = file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                input[3] = file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true)
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - cram -stub") {
        options "-stub"
        config "./cram.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_name_sorted_bam'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_name_sorted_bam'], checkIfExists: true)
                    ]
                ]
                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                input[2] = file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                input[3] = file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true)
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
}
