nextflow_process {

    name "Test Process ATAQV_ATAQV"
    config "./nextflow.config"
    script "../main.nf"
    process "ATAQV_ATAQV"

    tag "modules"
    tag "modules_nfcore"
    tag "ataqv"
    tag "ataqv/ataqv"

    test("test_ataqv_ataqv") {

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.bam",checkIfExists:true),
                    [],
                    []
                ]
                input[1] = 'human'
                input[2] = ''
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.json.collect{[
                        file(it[1]).name,
                        path(it[1]).json[0].findAll{it.key != "timestamp"}.toString().md5()
                    ]},
                    process.out.problems,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("test_ataqv_ataqv_problem_reads") {

        when {
            params {
                module_args = '--log-problematic-reads'
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.bam",checkIfExists:true),
                    [],
                    []
                ]
                input[1] = 'human'
                input[2] = ''
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.json.collect{[
                        file(it[1]).name,
                        path(it[1]).json[0].findAll{it.key != "timestamp"}.toString().md5()
                    ]},
                    process.out.problems.collect{ file(it[1]).name },
                    process.out.versions
                ).match() }
            )
        }
    }

    test("test_ataqv_ataqv_peak") {

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam",checkIfExists:true),
                    [],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/bed/test.bed",checkIfExists:true)
                ]
                input[1] = 'human'
                input[2] = ''
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.json.collect{[
                        file(it[1]).name,
                        path(it[1]).json[0].findAll{it.key != "timestamp"}.toString().md5()
                    ]},
                    process.out.problems,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("test_ataqv_ataqv_tss") {

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam",checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai",checkIfExists:true),
                    []
                ]
                input[1] = 'human'
                input[2] = ''
                input[3] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/bed/test.bed",checkIfExists:true)
                input[4] = []
                input[5] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.json.collect{[
                        file(it[1]).name,
                        path(it[1]).json[0].findAll{it.key != "timestamp"}.toString().md5()
                    ]},
                    process.out.problems,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("test_ataqv_ataqv_excluded_regs") {

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam",checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai",checkIfExists:true),
                    []
                ]
                input[1] = 'human'
                input[2] = ''
                input[3] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/bed/test.bed",checkIfExists:true)
                input[4] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/bed/test2.bed",checkIfExists:true)
                input[5] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.json.collect{[
                        file(it[1]).name,
                        path(it[1]).json[0].findAll{it.key != "timestamp"}.toString().md5()
                    ]},
                    process.out.problems,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("ataqv - stub") {

        options "-stub"

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.bam",checkIfExists:true),
                    [],
                    []
                ]
                input[1] = 'human'
                input[2] = ''
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    process.out.versions.collect { path(it).yaml }
                ).match() }
            )
        }
    }

    test("ataqv - problems - stub") {

        options "-stub"

        when {
            params {
                module_args = '--log-problematic-reads'
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.bam",checkIfExists:true),
                    [],
                    []
                ]
                input[1] = 'human'
                input[2] = ''
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}