nextflow_process {

    name "Test Process ABRA2"
    script "../main.nf"
    process "ABRA2"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "abra2"

    test("sarscov2 - bam") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[:], []]
                input[4] = [[:], []]
                input[5] = [[:], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam.get(0).get(1)).getReadsMD5(),
                    process.out.bai,
                    process.out.versions,
                    path(process.out.versions.get(0)).yaml
                ).match() }
            )
        }

    }

    test("sarscov2 - bam - with_targets") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [
                    [ id:'intervals' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true),
                ]
                input[4] = [[:], []]
                input[5] = [[:], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam.get(0).get(1)).getReadsMD5(),
                    process.out.bai,
                    process.out.versions,
                    path(process.out.versions.get(0)).yaml
                ).match() }
            )
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[:], []]
                input[4] = [[:], []]
                input[5] = [[:], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam.get(0).get(1)).getReadsMD5(),
                    process.out.bai,
                    process.out.versions,
                    path(process.out.versions.get(0)).yaml
                ).match() }
            )
        }

    }

    test("homo_sapiens - rnaseq - with_gtf") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test_rnaseq', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.rna.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.rna.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[:], []]
                input[4] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                ]
                input[5] = [[:], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam.get(0).get(1)).getReadsMD5(),
                    process.out.bai,
                    process.out.versions,
                    path(process.out.versions.get(0)).yaml
                ).match() }
            )
        }

    }

    test("homo_sapiens - multiple_bams") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test_multi', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true)
                    ]
                ]
                input[1] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[:], []]
                input[4] = [[:], []]
                input[5] = [[:], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam.get(0).get(1).get(0)).getReadsMD5(),
                    bam(process.out.bam.get(0).get(1).get(1)).getReadsMD5(),
                    process.out.bai,
                    process.out.versions,
                    path(process.out.versions.get(0)).yaml
                ).match() }
            )
        }

    }

    test("homo_sapiens - bam - with_known_indels") {

        when {
            process {
                """
                // Download and decompress the VCF file
                def vcfGzPath = params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/vcf/mills_and_1000G.indels.vcf.gz'
                def vcfGzFile = file(vcfGzPath, checkIfExists: true)

                // Create a temporary file for the decompressed VCF
                def vcf = file("mills_and_1000G.indels.vcf")

                // Decompress the file
                vcfGzFile.withInputStream { gzipInput ->
                    new java.util.zip.GZIPInputStream(gzipInput).withStream { decompressed ->
                        vcf.withOutputStream { output ->
                            output << decompressed
                        }
                    }
                }

                input[0] = [
                    [ id:'test_known_indels', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[:], []]
                input[4] = [[:], []]
                input[5] = [
                    [id: 'indels'],
                    file(vcf, checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam.get(0).get(1)).getReadsMD5(),
                    process.out.bai,
                    process.out.versions,
                    path(process.out.versions.get(0)).yaml
                ).match() }
            )
        }

    }

}
