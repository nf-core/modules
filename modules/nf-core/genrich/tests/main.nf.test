nextflow_process {

    name "Test Process GENRICH"
    config "./nextflow.config"
    script "../main.nf"
    process "GENRICH"
   
    tag "modules"
    tag "modules_nfcore"
    tag "genrich"
   
    test("homo_sapiens - bam - pe - p0.1") {
        
        
        when {
            params {
                module_args = '-p 0.1'
            }
            process {
                """
                input[0] = [[id:'test',single_end:false],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true)],
                    []]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("homo_sapiens - bam - pe - ctrl - p0.9") {
        
        
        when {
            params {
                module_args = '-p 0.9'
            }
            process {
                """
                input[0] = [[id:'test',single_end:false],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true)],
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.name.sorted.bam',checkIfExists:true)]]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("homo_sapiens - bam - se - ctrl - p0.9") {
        
        
        when {
            params {
                module_args = '-p 0.9'
            }
            process {
                """
                input[0] = [[id:'test',single_end:true],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true)],
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.name.sorted.bam',checkIfExists:true)]]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("homo_sapiens - bam - pe - p0.9 - all_output") {
        
        
        when {
            params {
                module_args = '-p 0.9  -k test.pileup.bedGraph -f test.pvalues.bedGraph -b test.intervals.bed -R test.duplicates.txt'
                
            }
            process {
                """
                input[0] = [[id:'test',single_end:false],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true)],
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.name.sorted.bam',checkIfExists:true)]]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("homo_sapiens - blacklist") {
        
        
        when {
            params {
                module_args = '-p 0.1'
            }
            process {
                """
                input[0] = [[id:'test',single_end:false],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true)],
                    []]
                input[1] = [file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed',checkIfExists:true)]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("homo_sapiens - bam - pe - atacseq - p0.1") {
        
        
        when {
            params {
                module_args = '-j -p 0.1'
            }
            process {
                """
                input[0] = [[id:'test',single_end:false],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true)],
                    []]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("homo_sapiens - bam - pe - bed - p0.9") {
        
        
        when {
            params {
                module_args = '-p 0.1'
            }
            process {
                """
                input[0] = [[id:'test',single_end:false],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.name.sorted.bam',checkIfExists:true)],
                    []]
                input[1] = [file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed',checkIfExists:true)]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}