nextflow_process {

    name "Test Process GENRICH"
    config "./nextflow.config"
    script "../main.nf"
    process "GENRICH"
   
    tag "modules"
    tag "modules_nfcore"
    tag "genrich"
   
    test("test_genrich") {
        
        
        when {
            params {
                module_args = '-p 0.1'
            }
            process {
                """
                input[0] = [[id:'test',single_end:false],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true)],
                    []]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("test_genrich_ctrl") {
        
        
        when {
            params {
                module_args = '-p 0.9'
            }
            process {
                """
                input[0] = [[id:'test',single_end:false],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true)],
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.name.sorted.bam',checkIfExists:true)]]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("test_genrich_se") {
        
        
        when {
            params {
                module_args = '-p 0.9'
            }
            process {
                """
                input[0] = [[id:'test',single_end:true],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true)],
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.name.sorted.bam',checkIfExists:true)]]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("test_genrich_all_outputs") {
        
        
        when {
            params {
                module_args = {
            [
            "-p 0.9", 
            "-k \${meta.id}.pileup.bedGraph",
            "-f \${meta.id}.pvalues.bedGraph",
            "-b \${meta.id}.intervals.bed",
            "-R \${meta.id}.duplicates.txt"
            ].join(' ').trim()
            }
            }
            process {
                """
                input[0] = [[id:'test',single_end:false],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true)],
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.name.sorted.bam',checkIfExists:true)]]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("test_genrich_blacklist") {
        
        
        when {
            params {
                module_args = '-p 0.1'
            }
            process {
                """
                input[0] = [[id:'test',single_end:false],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true)],
                    []]
                input[1] = [file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed',checkIfExists:true)]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("test_genrich_atacseq") {
        
        
        when {
            params {
                module_args = '-j -p 0.1'
            }
            process {
                """
                input[0] = [[id:'test',single_end:false],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true)],
                    []]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    test("test_genrich_list") {
        
        
        when {
            params {
                module_args = '-p 0.1'
            }
            process {
                """
                input[0] = [[id:'test',single_end:false],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.name.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.name.sorted.bam',checkIfExists:true)],
                    []]
                input[1] = [file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed',checkIfExists:true)]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}