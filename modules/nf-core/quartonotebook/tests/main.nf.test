nextflow_process {

    name "Test Process QUARTONOTEBOOK"
    script "../main.nf"
    process "QUARTONOTEBOOK"

    tag "modules"
    tag "modules_nfcore"
    tag "quartonotebook"

    test("test notebook - [qmd:r]") {

        config "./no-parametrization.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['generic']['notebooks']['quarto_r'], checkIfExists: true) // Notebook
                ]
                input[1] = [:] // Parameters
                input[2] = [] // Input files
                input[3] = [] // Extensions
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }

    test("test notebook - [qmd:python]") {

        config "./no-parametrization.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['generic']['notebooks']['quarto_python'], checkIfExists: true) // Notebook
                ]
                input[1] = [] // Parameters
                input[2] = [] // Input files
                input[3] = [] // Extensions
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.artifacts,
                    process.out.params_yaml,
                ).match() },
                { assert path(process.out.html[0][1]).readLines().any { it.contains('Hello world') } }
            )
        }

    }

    test("test notebook - parametrized - [qmd:r]") {

        config "./with-parametrization.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['generic']['notebooks']['quarto_r'], checkIfExists: true) // Notebook
                ]
                input[1] = [input_filename: "hello.txt", n_iter: 12] // parameters
                input[2] = file(params.test_data['generic']['txt']['hello'], checkIfExists: true) // Input files
                input[3] = [] // Extensions
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }

    test("test notebook - parametrized - [qmd:python]") {

        config "./with-parametrization.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['generic']['notebooks']['quarto_python'], checkIfExists: true) // Notebook
                ]
                input[1] = [input_filename: "hello.txt", n_iter: 12] // parameters
                input[2] = file(params.test_data['generic']['txt']['hello'], checkIfExists: true) // Input files
                input[3] = [] // Extensions
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.artifacts,
                    process.out.params_yaml,
                ).match() },
                { assert path(process.out.html[0][1]).readLines().any { it.contains('Hello world') } }
            )
        }

    }

    test("test notebook - parametrized - [rmd]") {

        config "./with-parametrization.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['generic']['notebooks']['rmarkdown'], checkIfExists: true) // notebook
                ]
                input[1] = [input_filename: "hello.txt", n_iter: 12] // parameters
                input[2] = file(params.test_data['generic']['txt']['hello'], checkIfExists: true) // Input files
                input[3] = [] // Extensions
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }

    test("test notebook - parametrized - [ipynb]") {

        config "./with-parametrization.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['generic']['notebooks']['ipython_ipynb'], checkIfExists: true) // notebook
                ]
                input[1] = [input_filename: "hello.txt", n_iter: 12] // parameters
                input[2] = file(params.test_data['generic']['txt']['hello'], checkIfExists: true) // Input files
                input[3] = [] // Extensions
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }

    test("test notebook - stub - [qmd:r]") {

        config "./no-parametrization.config"

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['generic']['notebooks']['quarto_r'], checkIfExists: true) // Notebook
                ]
                input[1] = [:] // Parameters
                input[2] = [] // Input files
                input[3] = [] // Extensions
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }

}