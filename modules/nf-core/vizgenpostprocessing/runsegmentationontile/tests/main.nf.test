nextflow_process {

    name "Test Process VIZGENPOSTPROCESSING_RUNSEGMENTATIONONTILE"
    script "../main.nf"
    process "VIZGENPOSTPROCESSING_RUNSEGMENTATIONONTILE"

    tag "modules"
    tag "modules_nfcore"
    tag "vizgenpostprocessing"
    tag "vizgenpostprocessing/preparesegmentation"
    tag "vizgenpostprocessing/runsegmentationontile"

    test("nuclei - json, images") {

        setup {
            run("VIZGENPOSTPROCESSING_PREPARESEGMENTATION") {
                script "../../preparesegmentation/main.nf"
                params {
                    module_args = '--tile-size 200 --tile-overlap 20'
                }
                process {
                    """
                    // Create test directory and files before process execution
                    testDir = file("tmpdir", type: 'dir')
                    testDir.mkdir()

                    // Download source file
                    sourceUrl = 'https://github.com/nf-core/test-datasets/raw/modules/data/imaging/segmentation/nuclear_image.tif'
                    sourceFile = file(sourceUrl)

                    // Create renamed copies
                    sourceFile.copyTo(file("\${testDir}/mosaic_DAPI_z3.tif"))
                    sourceFile.copyTo(file("\${testDir}/mosaic_PolyT_z3.tif"))

                    // Create transform file
                    transformFile = file("\${testDir}/micron_to_mosaic_pixel_transform.csv")
                    transformFile.text = "2 0 0\\n0 2 0\\n0 0 1"

                    input[0] = [
                        [ id:'test' ],
                        testDir,
                        transformFile
                    ]
                    input[1] = file('https://raw.githubusercontent.com/Vizgen/vpt-plugin-cellpose2/refs/heads/develop/example_analysis_algorithm/cellpose2_nuclei.json', checkIfExists: true)
                    input[2] = "mosaic_(?P<stain>[\\\\w|-]+)_z(?P<z>[0-9]+).tif"
                    """
                }
            }
        }

        when {
            process {
                """
                VIZGENPOSTPROCESSING_PREPARESEGMENTATION.out.segmentation_files
                    .flatten()
                    .last()
                    .set { segmentation_params_ch }

                Channel.of([
                    [ id:'test' ],
                    file("tmpdir", type: 'dir'),
                ])
                .combine(segmentation_params_ch) // segmentation params JSON file
                .combine(Channel.of(0)) // tile_index
                .set { seg_input_ch }

                input[0] = seg_input_ch
                input[1] = file('https://raw.githubusercontent.com/Vizgen/vpt-plugin-cellpose2/refs/heads/develop/example_analysis_algorithm/cellpose2_nuclei.json', checkIfExists: true)
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.segmented_tile[0][1]).name, // Segmented tile file is not stable as cellpose uses a random seed which cannot be set via VPT
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }

    }

    test("nuclei - json, images - stub") {

        options "-stub"

        when {
            process {
                """
                testDir = file("tmpdir", type: 'dir')
                testDir.mkdir()

                segmentationParams = file("algorithm_specification.json")
                segmentationParams.text = '{}'

                input[0] = [
                    [ id:'test' ],
                    testDir,
                    segmentationParams,
                    0 // Tile index
                ]
                input[1] = file('https://raw.githubusercontent.com/Vizgen/vpt-plugin-cellpose2/refs/heads/develop/example_analysis_algorithm/cellpose2_nuclei.json', checkIfExists: true)
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}