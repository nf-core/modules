nextflow_process {

    name "Test Process SCRAMBLE_CLUSTERANALYSIS"
    config "./nextflow.config"
    script "../main.nf"
    process "SCRAMBLE_CLUSTERANALYSIS"

    tag "modules"
    tag "modules_nfcore"
    tag "scramble"
    tag "scramble/clusteranalysis"
    tag "scramble/clusteridentifier"

    test("no fasta") {

        setup {
            run("SCRAMBLE_CLUSTERIDENTIFIER") {
                script "../../clusteridentifier/main.nf"

                process {
                    """
                    input[0] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.bam', checkIfExists:true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.bam.bai', checkIfExists:true)
                        ]
                    input[1] = [[id:"fasta"],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.fa', checkIfExists:true)
                    ]
                    """
                }
            }
        }
        when {
            params {
                module_args = '--eval-meis'
            }
            process {
                """
                input[0] = SCRAMBLE_CLUSTERIDENTIFIER.out.clusters
                input[1] = [[id:"fasta"],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.fa', checkIfExists:true)
                    ]
                input[2] = []
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out.meis_tab,
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }
    test("fasta") {

        setup {
            run("SCRAMBLE_CLUSTERIDENTIFIER") {
                script "../../clusteridentifier/main.nf"

                process {
                    """
                    input[0] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.cram', checkIfExists:true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.cram.crai', checkIfExists:true)
                        ]
                    input[1] = [[id:"fasta"],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.fa', checkIfExists:true)
                    ]
                    """
                }
            }
        }
        when {
            params {
                module_args = '--eval-meis --eval-dels'
            }
            process {
                """
                input[0] = SCRAMBLE_CLUSTERIDENTIFIER.out.clusters
                input[1] = [[id:"fasta"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.fa', checkIfExists:true)
                ]
                input[2] = []
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out.meis_tab,
                    process.out.dels_tab,
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }

    test("no fasta - stub") {
        options '-stub'
        setup {
            run("SCRAMBLE_CLUSTERIDENTIFIER") {
                script "../../clusteridentifier/main.nf"

                process {
                    """
                    input[0] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.bam', checkIfExists:true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.bam.bai', checkIfExists:true)
                        ]
                    input[1] = [[],[]]
                    """
                }
            }
        }
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = SCRAMBLE_CLUSTERIDENTIFIER.out.clusters
                input[1] = [[id:"fasta"],
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.fa', checkIfExists:true)
                        ]
                input[2] = []
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }

    test("fasta - stub") {
        options '-stub'
        setup {
            run("SCRAMBLE_CLUSTERIDENTIFIER") {
                script "../../clusteridentifier/main.nf"

                process {
                    """
                    input[0] = [
                        [id:'test'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.bam', checkIfExists:true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/scramble/test.bam.bai', checkIfExists:true)
                        ]
                    input[1] = [[],[]]
                    """
                }
            }
        }
        when {
            params {
                module_args = '--eval-meis --eval-dels'
            }
            process {
                """
                input[0] = SCRAMBLE_CLUSTERIDENTIFIER.out.clusters
                input[1] = [[],[]]
                input[2] = []
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }

}