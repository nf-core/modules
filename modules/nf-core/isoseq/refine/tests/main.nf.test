nextflow_process {

    name "Test Process ISOSEQ_REFINE"
    script "../main.nf"
    config "./nextflow.config"
    process "ISOSEQ_REFINE"

    tag "modules"
    tag "modules_nfcore"
    tag "isoseq"
    tag "isoseq/refine"

    test("PacBio isoseq refine - Chimeras Removing test") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/alz.ccs.fl.NEB_5p--NEB_Clontech_3p.bam', checkIfExists: true),
                ]
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/fasta/primers.fasta', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.bam).match("bam") },
                { assert snapshot(process.out.pbi).match("pbi") },
                { assert path(process.out.consensusreadset.get(0).get(1)).text.contains("PacBio.DataSet.ConsensusReadSet") },
                { assert path(process.out.summary.get(0).get(1)).text.contains("pbcopper") },
                { assert snapshot(process.out.report).match("report") },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }
    }

    test("PacBio isoseq refine - Chimeras Removing test - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/alz.ccs.fl.NEB_5p--NEB_Clontech_3p.bam', checkIfExists: true),
                ]
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/fasta/primers.fasta', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
