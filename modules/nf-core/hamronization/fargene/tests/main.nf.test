nextflow_process {

    name "Test Process HAMRONIZATION_FARGENE"
    script "../main.nf"
    process "HAMRONIZATION_FARGENE"

    tag "modules"
    tag "modules_nfcore"
    tag "hamronization"
    tag "hamronization/fargene"
    tag "gunzip"
    tag "fargene"

    test("hamronization/fargene - bacteroides_fragilis - illumina - fa.gz/gunzip") {
        setup {

            run("GUNZIP") {
                script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] = Channel.fromList([
                        tuple([ id:'test', single_end:false ], // meta map
                        file(params.test_data['bacteroides_fragilis']['illumina']['test1_contigs_fa_gz'], checkIfExists: true))
                    ])
                    """
                }
            }

            run("FARGENE") {
                script "../../../fargene/main.nf"
                process {
                    """
                    input[0] = GUNZIP.out.gunzip
                    input[1] = 'class_a'
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = FARGENE.out.hmm
                input[1] = 'tsv'
                input[2] = '0.1'
                input[3] = '0.1'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.tsv.get(0).get(1)).exists() }, // No md5 check because of empty file
                { assert snapshot(process.out.versions).match("versions") }
            )
        }
    }

    test("hamronization/fargene - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [id: 'test'], file("dummy.fa") ]
                input[1] = 'tsv'
                input[2] = '0.1'
                input[3] = '0.1'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
