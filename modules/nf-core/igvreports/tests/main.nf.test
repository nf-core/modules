nextflow_process {

    name "Test Process IGVREPORTS"
    script "../main.nf"
    process "IGVREPORTS"

    tag "modules"
    tag "modules_nfcore"
    tag "igvreports"

    test("variants with fasta - vcf") {

        when {
            process {
                """
                input[0] = [ [ id:'test'], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_vcf'], checkIfExists: true),
                            [], []
                        ]
                input[1] = [ [id: 'test_genome'],
                            file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true),
                            file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true)
                        ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match()},
                {
                    with(process.out.report) {
                        with(get(0)) {
                            assert get(1).endsWith("_report.html")
                        }
                    }
                }
            )
        }

    }


    test("variants with fasta and tracks - vcf") {

        when {
            process {
                """
                input[0] = [ [ id:'test'], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_vcf'], checkIfExists: true),
                            file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                            file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true)
                        ]
                input[1] = [ [id: 'test_genome'],
                            file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true),
                            file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true)
                        ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match()},
                {
                    with(process.out.report) {
                        with(get(0)) {
                            assert get(1).endsWith("_report.html")
                        }
                    }
                }
            )
        }

    }


    test("variants with genome - vcf") {
    config "./nextflow_genome.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file("https://raw.githubusercontent.com/igvteam/igv-reports/master/test/data/variants/variants.vcf"),
                    [], []
                    ]
                // Need to specify the empty optional fasta input
                input[1] = [ [:], [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match()},
                {
                    with(process.out.report) {
                        with(get(0)) {
                            assert get(1).endsWith("_report.html")
                        }
                    }
                }
            )
        }

    }

    test("variant with genome - vcf - stub") {
    config "./nextflow_genome.config"

        options "-stub"

        when {
            process {
        """
                input[0] = [
                    [ id:'test'], // meta map
                    file("https://raw.githubusercontent.com/igvteam/igv-reports/master/test/data/variants/variants.vcf"),
                    [], []
                    ]
                input[1] = [ [:], [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match()},
                {
                    with(process.out.report) {
                        with(get(0)) {
                            assert get(1).endsWith("_report.html")
                        }
                    }
                }
            )
        }

    }

}