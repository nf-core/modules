nextflow_process {

    name "Test Process RHOCALL_ANNOTATE"

    script "../main.nf"
    process "RHOCALL_ANNOTATE"

    tag "modules"
    tag "modules_nfcore"
    tag "rhocall"
    tag "rhocall/annotate"
    tag "bcftools"
    tag "bcftools/roh"

    setup {
        run("BCFTOOLS_ROH") {
            script "../../../bcftools/roh/main.nf"

            process {
                """
                input[0] = [[id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists:true)
                    ]
                input[1] = [[],[]]
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                """
            }
        }
    }

    test("sarscov2") {

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [[id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists:true)
                    ]
                input[1] = BCFTOOLS_ROH.out.roh
                input[2] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).vcf.variantsMD5,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }

    test("sarscov2 - stub") {
        options '-stub'
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [[id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists:true)]
                input[1] = BCFTOOLS_ROH.out.roh
                input[2] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}