nextflow_process {

    name "Test Process TRINITY"
    script "../main.nf"
    process "TRINITY"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "trinity"

    test("homo_sapiens-test_rnaseq-paired") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions
                    ).match("versions")
                },
                { assert path(process.out.log[0][1]).text.contains("All commands completed successfully.") },
                { assert path(process.out.transcript_fasta[0][1]).linesGzip.toString().contains(">TRINITY_DN7_c0_g1_i1 len=299 path=[0:0-151 2:152-298]") }

            )
        }
    }

    test("homo_sapiens-test_rnaseq-single") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_1_fastq_gz'], checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions
                    ).match("versions")
                },
                { assert path(process.out.log[0][1]).text.contains("All commands completed successfully.") },
                { assert path(process.out.transcript_fasta[0][1]).linesGzip.toString().contains(">TRINITY_DN10_c0_g1_i1 len=534 path=[0:0-533]") }
            )
        }
    }

    test("homo_sapiens-test_rnaseq-paired-multiple") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_2_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions
                    ).match("versions")
                },
                { assert path(process.out.log[0][1]).text.contains("All commands completed successfully.") },
                { assert path(process.out.transcript_fasta[0][1]).linesGzip.toString().contains(">TRINITY_DN12_c0_g1_i1 len=225 path=[0:0-224]") }

            )
        }
    }

    test("homo_sapiens-test_rnaseq-single-multiple") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_1_fastq_gz'], checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions
                    ).match("versions")
                },
                { assert path(process.out.log[0][1]).text.contains("All commands completed successfully.") },
                { assert path(process.out.transcript_fasta[0][1]).linesGzip.toString().contains(">TRINITY_DN12_c0_g1_i1 len=268 path=[0:0-267]") }
            )
        }
    }

    test("homo_sapiens-test_rnaseq-stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.transcript_fasta,
                        process.out.log
                    ).match()
                },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }
    }
}
