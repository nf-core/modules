nextflow_process {

    name "Test Process HTSEQ_COUNT"
    script "../main.nf"
    process "HTSEQ_COUNT"
    tag "modules"
    tag "modules_nfcore"
    tag "htseq"
    tag "htseq/count"

    test("bam input") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true)

                ]
                input[1] = [
                    [ id:'test2'], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert process.out.txt.get(0).get(1) ==~ ".*.txt" },
                { assert snapshot(process.out).match() }
            )
            
        }

    }

    test("cram input") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true)

                ]
                input[1] = [
                    [ id:'test2'], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert process.out.txt.get(0).get(1) ==~ ".*.txt" },
                { assert snapshot(process.out).match() }
            )
            
        }

    }


}
