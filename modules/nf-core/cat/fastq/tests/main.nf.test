nextflow_process {

    name "Test Process CAT_FASTQ"
    script "../main.nf"
    process "CAT_FASTQ"
    tag "modules"
    tag "modules_nfcore"
    tag "cat"
    tag "cat/fastq"

    test("test_cat_fastq_single_end") {

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                            [ id:'test', single_end:true ], // meta map
                            [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                            file(params.test_data['sarscov2']['illumina']['test2_1_fastq_gz'], checkIfExists: true) ]
                        ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.reads).match() },
                { assert path(process.out.versions.get(0)).getText().contains("cat") }
            )
        }
    }

    test("test_cat_fastq_paired_end") {

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test2_1_fastq_gz'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test2_2_fastq_gz'], checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.reads).match() },
                { assert path(process.out.versions.get(0)).getText().contains("cat") }
            )
        }
    }

    test("test_cat_fastq_single_end_same_name") {

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.reads).match() },
                { assert path(process.out.versions.get(0)).getText().contains("cat") }
            )
        }
    }

    test("test_cat_fastq_paired_end_same_name") {

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.reads).match() },
                { assert path(process.out.versions.get(0)).getText().contains("cat") }
            )
        }
    }

    test("test_cat_fastq_single_end_single_file") {

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.reads).match() },
                { assert path(process.out.versions.get(0)).getText().contains("cat") }
            )
        }
    }
}
