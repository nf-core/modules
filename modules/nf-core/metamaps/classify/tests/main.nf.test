nextflow_process {

    name "Test Process METAMAPS_CLASSIFY"
    script "../main.nf"
    process "METAMAPS_CLASSIFY"

    tag "modules"
    tag "modules_nfcore"
    tag "metamaps"
    tag "metamaps/mapdirectly"
    tag "metamaps/classify"
    tag "untar"


    test("sarscov2_nanopore_classify") {
        setup {
            run("UNTAR") {
                config "./nextflow.config"
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [
                        [],file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/metamaps_db.tar.gz', checkIfExists: true)
                    ]
                    """
                }
            }
            run("METAMAPS_MAPDIRECTLY") {
                script "../../../metamaps/mapdirectly/main.nf"
                process {
                    """
                    input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['nanopore']['test2_fastq_gz'], checkIfExists: true)
                    ]
                    input[1] = UNTAR.out.untar.map { id, it ->
                    filename = it.toString() + "/DB.fa"
                    return [ file(filename) ]
                    }
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = METAMAPS_MAPDIRECTLY.out.classification_res
                input[1] = METAMAPS_MAPDIRECTLY.out.meta_file
                input[2] = METAMAPS_MAPDIRECTLY.out.meta_unmappedreadsLengths
                input[3] = METAMAPS_MAPDIRECTLY.out.para_file
                input[4] = UNTAR.out.untar.map{ it[1] }
                """
            }
        }



        then {
        assertAll(
                { assert process.success },
                { assert snapshot ( process.out ).match() }
            )
        }

    }
}


