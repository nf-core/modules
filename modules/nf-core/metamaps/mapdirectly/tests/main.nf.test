nextflow_process {

    name "Test Process METAMAPS_MAPDIRECTLY"
    script "../main.nf"
    process "METAMAPS_MAPDIRECTLY"

    tag "modules"
    tag "modules_nfcore"
    tag "metamaps"
    tag "metamaps/mapdirectly"
    tag "untar"



    setup {
        run("UNTAR") {
            script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test' ], file(params.test_data['sarscov2']['genome']['metamaps_db'], checkIfExists: true)]
                    """
                }
            }
    }

    test("sarscov2_nanopore_mapdirectly")
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['nanopore']['test2_fastq.gz'], checkIfExists: true)
                    ]
                input[1] = UNTAR.out.untar.map{ it[1] }
                """
            }
        }


        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.classification_res[0][1]).name,
                    file(process.out.meta_file[0][1]).name,
                    file(process.out.meta_unmappedreadsLengths[0][1][0]).name,
                    file(process.out.para_file[0][1][0]).name,
                ).match() }
            )
        }

    test("sarscov2_nanopore_mapdirectly stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['nanopore']['test2_fastq.gz'], checkIfExists: true)
                    ]
                input[1] = UNTAR.out.untar.map{ it[1] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}


