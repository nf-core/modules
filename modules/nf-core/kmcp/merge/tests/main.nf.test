nextflow_process {

    name "Test Process KMCP_MERGE"
    script "../main.nf"
    config "./nextflow.config"
    process "KMCP_MERGE"

    tag "modules"
    tag "modules_nfcore"
    tag "kmcp"
    tag "kmcp/compute"
    tag "kmcp/index"
    tag "kmcp/search"
    tag "kmcp/merge"

    setup {
        run("KMCP_COMPUTE") {
            script "../../compute/main.nf"

            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists:true)
                ]
                """
            }
        }

        run("KMCP_INDEX") {
            script "../../index/main.nf"

            process {
                """
                input[0] = KMCP_COMPUTE.out.outdir
                """
            }
        }

        run("KMCP_SEARCH") {
            script "../../search/main.nf"

            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists:true)
                ]
                input[1] = KMCP_INDEX.out.kmcp.map{it[1]}
                """
            }
        }
    }

    test("test_kmcp_merge") {
        when {
            params {
                kmcp_compute_prefix = 'test_compute'
                kmcp_index_prefix = 'test_index'
                kmcp_search_prefix = 'test_search'
            }
            process {
                """
                input[0] = KMCP_SEARCH.out.result
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }


    test("test_kmcp_merge -- stub") {
        options '-stub'
        when {
            params {
                kmcp_compute_prefix = 'test_compute'
                kmcp_index_prefix = 'test_index'
                kmcp_search_prefix = 'test_search'
            }
            process {
                """
                input[0] = [[id: 'test'], []]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
}