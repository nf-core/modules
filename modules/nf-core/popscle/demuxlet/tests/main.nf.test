// nf-core modules test popscle/demuxlet
nextflow_process {

    name "Test Process POPSCLE_DEMUXLET"
    script "../main.nf"
    process "POPSCLE_DEMUXLET"
    config "./nextflow.config"
    tag "modules"
    tag "modules_nfcore"
    tag "popscle"
    tag "popscle/dscpileup"
    tag "popscle/demuxlet"

    test("demultiplexing - bam") {
        when {
            process {
                """                
                input[0] = [
                    [ id:'sample1'],
                    [],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/demultiplexing/chr21.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/demultiplexing/donor_genotype_chr21.vcf', checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") },
		        { assert path(process.out.demuxlet_result.get(0).get(1)).exists() },
            )
        }

    }

    test ("demultiplexing - bam - pileup"){
        setup { 
            run("POPSCLE_DSCPILEUP") {
                script "../../dscpileup/main.nf"
                process {
                    """
                    input[0] = [
                    [ id:'sample1' ],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/demultiplexing/chr21.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/demultiplexing/donor_genotype_chr21.vcf', checkIfExists: true),
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = POPSCLE_DSCPILEUP.out.plp.collect{ meta, plp -> plp }.map{ 
                            plp -> [[ id: 'sample1'], 
                                    plp[0].toString() - '.plp.gz', 
                                    [], 
                                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/demultiplexing/donor_genotype_chr21.vcf', checkIfExists: true)]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("pileup-versions") },
                { assert path(process.out.demuxlet_result.get(0).get(1)).exists() },
            )
        }
            
    }

    test("demultiplexing - bam - stub") {

        options "-stub"

        when {
            process {
                """                
                input[0] = [
                    [ id:'sample1' ],
                    [],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/demultiplexing/chr21.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/demultiplexing/donor_genotype_chr21.vcf', checkIfExists: true),
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("stub-versions") },
                { assert path(process.out.demuxlet_result.get(0).get(1)).exists() },
            )
        }

    }


}
