// nf-core modules test popscle/demuxlet
nextflow_process {

    name "Test Process POPSCLE_DEMUXLET"
    script "../main.nf"
    process "POPSCLE_DEMUXLET"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "popscle"
    tag "popscle/demuxlet"

    test("demultiplexing - bam") {

        when {
            process {
                """                
                input[0] = [
                    [ id:'sample1'],
                    [],
                    file(params.test_data['homo_sapiens']['demultiplexing']['bam']),
                    file(params.test_data['homo_sapiens']['demultiplexing']['donor_genotype'], checkIfExists: true),

                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") },
		        { assert snapshot(
                        file(process.out.demuxlet_result[0][1]).name,
                    ).match("sample1.best")
                },
            )
        }

    }

    test ("demultiplexing - bam - pileup"){
        setup { 
            run("pileup") {
                script "../../dscpileup/main.nf"
                process {
                    """
                    input[0] = [
                    [ id:'sample1' ], // meta map
                    file(params.test_data['homo_sapiens']['demultiplexing']['bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['demultiplexing']['donor_genotype'], checkIfExists: true),
                    ]
                    """
                }
            }

        when {
            process {
                """
                plp_prefix = "${pileup.out.plp.parent}/${pileup.out.plp.baseName}"
                input[0] = [
                    [ id:'sample1'],
                    plp_prefix,
                    [],
                    file(params.test_data['homo_sapiens']['demultiplexing']['donor_genotype'], checkIfExists: true),
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") },
		        { assert snapshot(
                        file(process.out.demuxlet_result[0][1]).name,
                    ).match("sample1.best")
                },
            )
        }
            
        }
    }

    test("demultiplexing - bam - stub") {

        options "-stub"

        when {
            process {
                """                
                input[0] = [
                    [ id:'sample1' ],
                    [],
                    file(params.test_data['homo_sapiens']['demultiplexing']['bam']),
                    file(params.test_data['homo_sapiens']['demultiplexing']['donor_genotype'], checkIfExists: true),
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") },
		        { assert snapshot(
                        file(process.out.demuxlet_result[0][1]).name,
                    ).match("sample1.best")
                },
            )
        }

    }


}
