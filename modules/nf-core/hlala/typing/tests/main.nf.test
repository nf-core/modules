nextflow_process {

    name "Test Process HLALA_TYPING"

    script "../main.nf"
    process "HLALA_TYPING"
    tag "modules"
    tag "modules_nfcore"
    tag "hlala"
    tag "hlala/typing"
    tag "hlala/preparegraph"
    tag "unzip"

    setup {
        run ("UNZIP") {
            script ("../../../unzip/main.nf")
            process {
                """
                input[0] = [
                    [ id:'PRG_test'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/PRG_test.zip', checkIfExists: true)
                ]
                """
            }
        }
        run ("HLALA_PREPAREGRAPH") {
            script ("../../preparegraph/main.nf")
            process {
                """
                input[0] = UNZIP.out.unzipped_archive
                    .map{ id, path ->
                        def folderName = path.toString().split("/").last()
                        [ id, "\${path}/\${folderName}" ]
                    }
                """
            }
        }
    }

    test("homo_sapiens - bai") {
        tag "test"
        when {

            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/example_hla_pe.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/example_hla_pe.sorted.bam.bai', checkIfExists: true),
                ]).combine(
                    HLALA_PREPAREGRAPH.out.graph.map{ it[1] }
                )
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }


    test("test_hlala_typing -- stub") {
        options '-stub'
        when {

            process {
                """
                input[0] = hla_typing_input_ch
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}