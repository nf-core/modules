nextflow_process {

    name "Test Process HLALA_TYPING"

    script "../main.nf"
    process "HLALA_TYPING"
    tag "modules"
    tag "modules_nfcore"
    tag "hlala"
    tag "hlala/typing"
    tag "hlala/preparegraph"
    tag "unzip"

    test("homo_sapiens - bai") {
        tag "test"
        setup {
            run ("UNZIP") {
                script ("../../../unzip/main.nf")
                process {
                    """
                    input[0] = [
                        [ id:'PRG_test'], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/PRG_test.zip', checkIfExists: true)
                    ]
                    """
                }
            }
            run ("HLALA_PREPAREGRAPH") {
                script ("../../preparegraph/main.nf")
                process {
                    """
                    input[0] = UNZIP.out.unzipped_archive
                        .map{ id, path ->
                            def folderName = path.toString().split("/").last()
                            [ id, "\${path}/\${folderName}" ]
                        }
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/hlatyping/bam/example_pe.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/example_hla_pe.sorted.bam.bai', checkIfExists: true),
                ]).combine(
                    HLALA_PREPAREGRAPH.out.graph.map{ it[1] }
                )
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }


    test("test_hlala_typing -- stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    []
                ])
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
}