nextflow_process {

    name "Test Process STRDUST"
    script "../main.nf"
    process "STRDUST"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "strdust"
    tag "gunzip"
    tag "samtools/faidx"

    setup {
        run("GUNZIP"){
            script "../../gunzip/main.nf"
            process {
                """
                input[0] = [
                    [ id : 'chr22' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr22_chr22_KI270734v1_random/sequence/genome.fa.gz', checkIfExists: true)
                ]
            """
            }
        }
        run("SAMTOOLS_FAIDX"){
            script "../../samtools/faidx/main.nf"
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = [[],[]]
                input[2] = [[],[]]
                """
            }
        }
    }

    test("homo sapiens - bam, fasta, bed") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = Channel.of('chr22\t18890357\t18890451')
                            .collectFile(name : 'repeats.bed', newLine: false)
                            .map { file -> [ [ id : 'chr22' ], file ] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                {
                    assert snapshot(
                        path(process.out.vcf[0][1]).vcf.variantsMD5,
                        process.out.versions
                    ).match()
                }
            )
        }
    }

    test("homo sapiens - bam, fasta, bed - sorted parameter") {
        when {
            params {
                strdust_args = "--sorted"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = Channel.of('chr22\t18890357\t18890451')
                            .collectFile(name : 'repeats.bed', newLine: false)
                            .map { file -> [ [ id : 'chr22' ], file ] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                {
                    assert snapshot(
                        path(process.out.vcf[0][1]).vcf.variantsMD5,
                        path(process.out.tbi[0][1]).exists(),
                        file(process.out.tbi[0][1]).name,
                        process.out.versions
                    ).match()
                }
            )
        }
    }
    test("homo sapiens - bam, fasta, [] - region parameter") {

        when {
            params {
                strdust_args = "--region chr22:18890358-18890451"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                {
                    assert snapshot(
                        path(process.out.vcf[0][1]).vcf.variantsMD5,
                        process.out.versions
                    ).match()
                }
            )
        }
    }

    test("Homo sapiens - bam, fasta, [] - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("homo sapiens - bam, fasta, bed - sorted parameter - stub") {
        options "-stub"
        when {
            params {
                strdust_args = "--sorted"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = Channel.of('chr22\t18890357\t18890451')
                            .collectFile(name : 'repeats.bed', newLine: false)
                            .map { file -> [ [ id : 'chr22' ], file ] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}