nextflow_process {

    name "Test Process PLINK2_INDEPPAIRWISE"
    script "../main.nf"
    process "PLINK2_INDEPPAIRWISE"

    tag "modules"
    tag "modules_nfcore"
    tag "plink2"
    tag "plink2/indeppairwise"

    test("plink2 - plink1_input - indeppairwise") {

        when {
            process {
                """
                window_size = 50
                step = 5
                r_squared = 0.01
                input[0] = [
                        [id:"test"],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/popgen/plink_simulated.bed', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/popgen/plink_simulated.bim', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/popgen/plink_simulated.fam', checkIfExists: true)
                ]
                input[1] = window_size
                input[2] = step
                input[3] = r_squared

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("plink2 - plink2_input - indeppairwise") {
        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                window_size = 50
                step = 5
                r_squared = 0.01
                input[0] = [
                        [id:"test"],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/popgen/plink_simulated.pgen', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/popgen/plink_simulated.pvar', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/popgen/plink_simulated.psam', checkIfExists: true)
                ]
                input[1] = window_size
                input[2] = step
                input[3] = r_squared
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }


    test("plink2 - plink1_input - indeppairwise - stub") {

        options "-stub"

        when {
            process {
                """
                window_size = 50
                step = 5
                r_squared = 0.01
                input[0] = [
                        [id:"test"],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/popgen/plink_simulated.bed', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/popgen/plink_simulated.bim', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/popgen/plink_simulated.fam', checkIfExists: true)
                ]
                input[1] = window_size
                input[2] = step
                input[3] = r_squared

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("plink2 - plink2_input - indeppairwise - stub") {

        options "-stub"

        when {
            process {
                """
                window_size = 50
                step = 5
                r_squared = 0.01
                input[0] = [
                        [id:"test"],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/popgen/plink_simulated.pgen', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/popgen/plink_simulated.pvar', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/popgen/plink_simulated.psam', checkIfExists: true)
                ]
                input[1] = window_size
                input[2] = step
                input[3] = r_squared

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}