nextflow_process {

    name "Test Process ALLELECOUNTER"
    script "../main.nf"
    process "ALLELECOUNTER"

    tag "modules"
    tag "modules_nfcore"
    tag "allelecounter"

    test("homo_sapiens illumina paired-end sorted [cram]") {

        when {
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], // meta map
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true)
                ]
                input[1] = [ file(params.test_data['homo_sapiens']['genome']['genome_bed'], checkIfExists: true) ] // positions
                input[2] = [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ] //fasta
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens illumina paired-end sorted [cram] - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], // meta map
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true)
                ]
                input[1] = [ file(params.test_data['homo_sapiens']['genome']['genome_bed'], checkIfExists: true) ] // positions
                input[2] = [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ] //fasta
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.allelecount.collect { file(it[1]).getName() } +
                                process.out.versions ).match() }
            )
        }

    }

}
