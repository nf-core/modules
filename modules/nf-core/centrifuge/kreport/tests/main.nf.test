// nf-core modules test centrifuge/kreport
nextflow_process {

    name "Test Process CENTRIFUGE_KREPORT"
    script "../main.nf"
    process "CENTRIFUGE_KREPORT"

    tag "modules"
    tag "modules_nfcore"
    tag "centrifuge"
    tag "centrifuge/centrifuge"
    tag "centrifuge/kreport"
    tag "untar"

    setup {
        run("UNTAR") {
            script "../../../untar/main.nf"
                process {
                    """
                    input[0] =  db    =  [ [], file('https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/delete_me/minigut_cf.tar.gz', checkIfExists: true) ]
                    """
                }
            }
        run("CENTRIFUGE_CENTRIFUGE") {
            script "../../../centrifuge/centrifuge/main.nf"
                process {
                    """
                    input[0] = [ [id: 'test', single_end: true], file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true) ]
                    input[1] = UNTAR.out.untar.map{ it[1] }
                    input[2] = true
                    input[3] = true
                    """
                }
        }
    }

    test("sarscov2_fastq_se") {

        when {
            process {
                """
                input[0] = CENTRIFUGE_CENTRIFUGE.out.results
                input[1] = UNTAR.out.untar.map{it[1]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.kreport[0][1]).name,
                ).match() }
             )
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = CENTRIFUGE_CENTRIFUGE.out.results
                input[1] = UNTAR.out.untar.map{it[1]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
