nextflow_process {

    name "Test Process HHSUITE_HHBLITS"
    script "../main.nf"
    process "HHSUITE_HHBLITS"

    tag "modules"
    tag "modules_nfcore"
    tag "hhsuite"
    tag "hhsuite/reformat"
    tag "hhsuite/hhblits"
    tag "untar"

    setup {
        run ("UNTAR") {
            script "../../../untar/main.nf"
            process {
                """
                input[0] = [
                    [ id:'pfam' ],
                    file(params.modules_testdata_base_path + 'proteomics/hhsuite/pfam.tar.gz', checkIfExists: true)
                ]
                """
            }
        }

        run("HHSUITE_REFORMAT") {
            script "../../reformat/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + '../../multiplesequencealign/testdata/setoxin.ref', checkIfExists: true)
                ]
                input[1] = "fas"
                input[2] = "a3m"
                """
            }
        }
    }

    test("multiplesequencealign - setoxin - a3m") {

        when {
            process {
                """
                input[0] = HHSUITE_REFORMAT.out.msa
                input[1] = UNTAR.out.untar
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.hhr[0][1]).text.contains('F1R383_DANRE/124-372') },
                { assert snapshot(
                    process.out.versions.collect { path(it).yaml }
                    ).match()}
            )
        }

    }

    test("multiplesequencealign - setoxin - a3m - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = HHSUITE_REFORMAT.out.msa
                input[1] = UNTAR.out.untar
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
