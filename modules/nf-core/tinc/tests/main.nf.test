nextflow_process {

    name "Test Process TINC"
    script "../main.nf"
    process "TINC"

    tag "modules"
    tag "modules_nfcore"
    tag "tinc"

    test("tinc - rds") {

        config "./nextflow.config"

        when {

            params {
                module_args = '[normal_contamination_level:3]'
            }

            process {
                """                
                input[0] = [
                    [ id:'test', tumour_sample:'HCC1395_HCC1395T', normal_sample:'HCC1395_HCC1395N' ],
                    file(params.modules_testdata_base_path + 'delete_me/tinc/HCC1395_WXS_HCC1395_HCC1395_HCC1395T_cna.rds', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/tinc/HCC1395_WXS_HCC1395_HCC1395_HCC1395T_snv.rds', checkIfExists: true)
		]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions
                ).match() },
                { assert file(process.out.rds[0][1]).exists() },
                { assert file(process.out.plot_rds[0][1]).exists() },
                { assert file(process.out.plot_pdf[0][1]).exists() },
                { assert file(process.out.tinc_csv[0][1]).exists() }
            )
        }
    }

    test("tinc - rds - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', tumour_sample:'HCC1395_HCC1395T', normal_sample:'HCC1395_HCC1395N' ],
                    file(params.modules_testdata_base_path + 'delete_me/tinc/HCC1395_WXS_HCC1395_HCC1395_HCC1395T_cna.rds', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'delete_me/tinc/HCC1395_WXS_HCC1395_HCC1395_HCC1395T_snv.rds', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
}
