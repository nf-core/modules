nextflow_process {

    name "Test process rastair/mbias_parser"
    script "../main.nf"
    process "RASTAIR_MBIAS_PARSER"

    tag "modules"
    tag "modules_nfcore"
    tag "rastair"
    tag "rastair/mbias"
    tag "rastair/mbias_parser"

    test("sarscov2 paired-end methylated [bam] / sarscov2 genome [fasta]") {

        setup {
            run("RASTAIR_MBIAS") {
                script "../../mbias/main.nf"
                process {
                    """
                    input[0] =  [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.methylated.sorted.bam', checkIfExists: true)
                    ]
                    input[1] = [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.methylated.sorted.bam.bai', checkIfExists: true)
                    ]
                    input[2] = [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    input[3] = [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = RASTAIR_MBIAS.out.txt
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.mbias_processed_pdf.collect { meta, pdf_file -> file(pdf_file).name },
                    process.out.mbias_processed_csv,
                    process.out.mbias_processed_str,
                    process.out.versions
                    ).match()
                }
            )
        }
    }
}
