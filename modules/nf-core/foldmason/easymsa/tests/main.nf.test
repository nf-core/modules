nextflow_process {

    name "Test Process FOLDMASON_EASYMSA"
    script "../main.nf"
    process "FOLDMASON_EASYMSA"

    tag "modules"
    tag "modules_nfcore"
    tag "foldmason"
    tag "foldmason/easymsa"
    tag "untar"

    test("Test on seatoxin dataset - uncompressed") {
        setup {

            run("UNTAR") {
                script "../../../../../modules/nf-core/untar/main.nf"
                    process {
                        """
                            archive = file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/structures/seatoxin-ref.tar.gz", checkIfExists: true)
                            input[0] = Channel.of(tuple([id:'test'], archive))
                        """
                    }
            }
        }

        when {
            params {
            }
            process {
                """
                    input[0] = UNTAR.out.untar.map { meta,dir -> [meta, file(dir).listFiles().collect()]}
                    input[1] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success  },
                { assert snapshot(process.out).match() }
                )
        }
    }

    test("Test on seatoxin dataset - compressed") {
        setup {

            run("UNTAR") {
                script "../../../../../modules/nf-core/untar/main.nf"
                    process {
                        """
                            archive = file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/structures/seatoxin-ref.tar.gz", checkIfExists: true)
                            input[0] = Channel.of(tuple([id:'test'], archive))
                        """
                    }
            }
        }

        when {
            params {
            }
            process {
                """
                    input[0] = UNTAR.out.untar.map { meta,dir -> [[ id:'test' ], file(dir).listFiles().collect()]}
                    input[1] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success  },
                { assert snapshot(process.out).match() }
                )
        }
    }

    test("Stub run") {
        options "-stub"

        setup {

            run("UNTAR") {
                script "../../../../../modules/nf-core/untar/main.nf"
                    process {
                        """
                            archive = file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/structures/seatoxin-ref.tar.gz", checkIfExists: true)
                            input[0] = Channel.of(tuple([id:'test'], archive))
                        """
                    }
            }
        }

        when {
            params {
            }
            process {
                """
                    input[0] = UNTAR.out.untar.map { meta,dir -> [meta, file(dir).listFiles().collect()]}
                    input[1] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success  },
                { assert snapshot(process.out).match() }
                )
        }
    }

}
