name: transdecoder_longorf
description: TransDecoder identifies candidate coding regions within transcript sequences.
  it is used to build gff file.
keywords:
  - eucaryotes
  - gff
  - transcript
  - coding
tools:
  - transdecoder:
      description: TransDecoder identifies candidate coding regions within transcript
        sequences, such as those generated by de novo RNA-Seq transcript assembly using
        Trinity, or constructed based on RNA-Seq alignments to the genome using Tophat
        and Cufflinks.
      homepage: https://github.com/TransDecoder
      documentation: https://github.com/TransDecoder/TransDecoder/wiki
      tool_dev_url: https://github.com/TransDecoder/TransDecoder
      licence: ["Broad Institute"]
      identifier: biotools:TransDecoder
input:
  - - meta:
        type: map
        description: |
          Groovy Map containing sample information
          e.g. [ id:'test', single_end:false ]
    - fasta:
        type: file
        description: fasta file
        pattern: "*.{fasta}"
output:
  - pep:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${output_dir_name}/*.pep:
          type: file
          description: all ORFs meeting the minimum length criteria, regardless of coding
            potential. file
          pattern: "*.{pep}"
  - gff3:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${output_dir_name}/*.gff3:
          type: file
          description: positions of all ORFs as found in the target transcripts. file
          pattern: "*.{gff3}"
  - cds:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${output_dir_name}/*.cds:
          type: file
          description: the nucleotide coding sequence for all detected ORFs. file
          pattern: "*{cds}"
  - dat:
      - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. [ id:'test', single_end:false ]
      - ${output_dir_name}/*.dat:
          type: file
          description: nucleotide frequencies
          pattern: "*{dat}"
  - folder:
      - ${output_dir_name}:
          type: directory
          description: contains all the files from the run
  - versions:
      - versions.yml:
          type: file
          description: File containing software versions
          pattern: "versions.yml"
authors:
  - "@Danilo2771"
maintainers:
  - "@Danilo2771"
