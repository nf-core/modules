nextflow_process {

    name "Test Process BLOBTK_PLOT"
    script "../main.nf"
    process "BLOBTK_PLOT"

    tag "modules"
    tag "modules_nfcore"
    tag "blobtk"
    tag "blobtk/plot"

    config './nextflow.config'

    test("bacteroides_fragilis - fasta") {

        when {

            process {
                """
                input[0] = Channel.of([
                    [ id: "test" ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])

                input[1] = []

                input[2] = "https://blobtoolkit.genomehubs.org/api/v1/dataset/id/CALUEP01"

                input[3] = Channel.of(
                    [
                        name: "BLOB_VIEW",
                        args: "-v blob"
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                {
                    assert snapshot(
                        process.out.png.collect { meta, image -> [meta, file(image).name] },
                        process.out.versions
                    ).match()
                }
            )
        }
    }

    test("bacteroides fragilis - fasta - stub") {

        options "-stub"

        when {

            process {
                """
                input[0] = Channel.of([
                    [ id: "test" ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])

                input[1] = []

                input[2] = "https://blobtoolkit.genomehubs.org/api/v1/dataset/id/CALUEP01"

                input[3] = Channel.of(
                    [
                        name: "BLOB_VIEW",
                        args: "-v blob"
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
