nextflow_process {

    name "Test Process MERQURY_MERQURY"
    script "../main.nf"
    process "MERQURY_MERQURY"

    tag "modules"
    tag "modules_nfcore"
    tag "merqury"
    tag "merqury/merqury"
    tag "meryl/count"
    tag "meryl/unionsum"

    setup {
        run("MERYL_COUNT") {
            script "../../../meryl/count"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = 21
                """
            }
        }

        run("MERYL_UNIONSUM") {
            script "../../../meryl/unionsum"
            process {
                """
                input[0] = MERYL_COUNT.out.meryl_db
                input[1] = 21
                """
            }
        }
    }

    test("homo_sapiens-genome") {

        when {
            process {
                """
                assembly = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[0] = MERYL_UNIONSUM.out.meryl_db.join( Channel.value( assembly ) )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.assembly_only_kmers_bed,
                    process.out.assembly_only_kmers_wig,
                    process.out.stats,
                    process.out.dist_hist,
                    process.out.spectra_cn_hist,
                    process.out.spectra_asm_hist,
                    process.out.assembly_qv,
                    process.out.scaffold_qv,
                    process.out.read_ploidy,
                    process.out.versions,
                    file(process.out.spectra_cn_fl_png[0][1]).name,
                    file(process.out.spectra_cn_ln_png[0][1]).name,
                    file(process.out.spectra_cn_st_png[0][1]).name,
                    file(process.out.spectra_asm_fl_png[0][1]).name,
                    file(process.out.spectra_asm_ln_png[0][1]).name,
                    file(process.out.spectra_asm_st_png[0][1]).name
                    ).match()
                },
                { assert process.out.hapmers_blob_png == [] }
            )
        }

    }

    test("homo_sapiens-genome-trio") {

        setup {
            run("MERYL_COUNT", alias: "MATERNAL_COUNT") {
                script "../../../meryl/count"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        [
                            file(params.test_data['homo_sapiens']['illumina']['test2_1_fastq_gz'], checkIfExists: true)
                        ]
                    ]
                    input[1] = 21
                    """
                }
            }

            run("MERYL_COUNT", alias: "PATERNAL_COUNT") {
                script "../../../meryl/count"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        [
                            file(params.test_data['homo_sapiens']['illumina']['test2_2_fastq_gz'], checkIfExists: true)
                        ]
                    ]
                    input[1] = 21
                    """
                }
            }
        }

        when {
            process {
                """
                ch_assembly = Channel.value([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ])

                ch_input = MERYL_UNIONSUM.out.meryl_db
                            | join( MATERNAL_COUNT.out.meryl_db )
                            | join( PATERNAL_COUNT.out.meryl_db )
                            | join( ch_assembly )
                            | map { meta, meryl, mat_meryl, pat_meryl, fasta -> [ meta, [ meryl, mat_meryl, pat_meryl ], fasta ] }
                input[0] = ch_input
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.assembly_only_kmers_bed,
                    process.out.assembly_only_kmers_wig,
                    process.out.stats,
                    process.out.dist_hist,
                    process.out.spectra_cn_hist,
                    process.out.spectra_asm_hist,
                    process.out.assembly_qv,
                    process.out.scaffold_qv,
                    process.out.read_ploidy,
                    process.out.versions,
                    process.out.spectra_cn_fl_png[0][1] .collect { file(it).name }.join(','),
                    process.out.spectra_cn_ln_png[0][1] .collect { file(it).name }.join(','),
                    process.out.spectra_cn_st_png[0][1] .collect { file(it).name }.join(','),
                    file(process.out.spectra_asm_fl_png[0][1]).name,
                    file(process.out.spectra_asm_ln_png[0][1]).name,
                    file(process.out.spectra_asm_st_png[0][1]).name,
                    file(process.out.hapmers_blob_png[0][1]).name,
                    ).match()
                }
            )
        }

    }

    test("homo_sapiens-genome-stub") {

        options '-stub'

        when {
            process {
                """
                assembly = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[0] = MERYL_UNIONSUM.out.meryl_db.join( Channel.value( assembly ) )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}