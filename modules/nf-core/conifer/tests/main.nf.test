nextflow_process {

    name "Test Process CONIFER"
    
    script "../main.nf"
    process "CONIFER"
   
    tag "modules"
    tag "modules_nfcore"
    tag "conifer"
    tag "untar"
    tag "kraken2/kraken2"
   
    setup {
        run("UNTAR") {
            script "modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [],
                    file(
                        params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz",
                        checkIfExists: true
                    )
                ])
                """
            }
        }
        run("KRAKEN2_KRAKEN2") {
            script "../../kraken2/kraken2/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [ file(
                        params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz",
                        checkIfExists: true
                    )]
                ]
                input[1] = UNTAR.out.untar.map{ it[1] }
                input[2] = true
                input[3] = false
                """
            }
        }
    }
    
    
    test("sarscov2 - kraken2 - k2d") {
        
        when {
            
            process {
                """
                input[0] = KRAKEN2_KRAKEN2.out.report
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/kraken2/taxo.k2d', checkIfExists:true)
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("sarscov2 - kraken2 - k2d -- stub") {
        options '-stub'
        when {
            
            process {
                """
                input[0] = KRAKEN2_KRAKEN2.out.report
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/kraken2/taxo.k2d', checkIfExists:true)
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}