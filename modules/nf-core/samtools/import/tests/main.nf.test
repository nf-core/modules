nextflow_process {

    name "Test Process SAMTOOLS_IMPORT"
    script "../main.nf"
    process "SAMTOOLS_IMPORT"
    tag "modules"
    tag "modules_nfcore"
    tag "samtools"
    tag "samtools/import"

    test("samtools_import_single ") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                {assert process.success},
                {assert snapshot(process.out.bam.collect { it.collect { it instanceof Map ? it : file(it).name } }).match()}
            )
        }
    }

    test("samtools_import_paired ") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                {assert process.success},
                {assert snapshot(process.out.bam.collect { it.collect { it instanceof Map ? it : file(it).name } }).match()}
            )
        }
    }

    test("samtools_import_interleaved") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_interleaved_fastq_gz'], checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                {assert process.success},
                {assert snapshot(process.out.bam.collect { it.collect { it instanceof Map ? it : file(it).name } }).match()}
            )
        }
    }
}
