nextflow_process {

    name "Test Process SAMTOOLS_COLLATE"
    script "../main.nf"
    process "SAMTOOLS_COLLATE"

    tag "modules"
    tag "modules_nfcore"
    tag "samtools"
    tag "samtools/collate"

    test("sarscov2 - bam, []") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true)
                ]
                input[1] = [
                    [id:'fasta'],
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.sam,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - cram, fasta") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true)
                ]
                input[1] = [
                    [id:'fasta'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.sam,
                    process.out.versions
                ).match() }
            )
        }

    }

}
