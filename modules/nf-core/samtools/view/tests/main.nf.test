nextflow_process {

    name "Test Process SAMTOOLS_VIEW"
    script "../main.nf"
    process "SAMTOOLS_VIEW"

    tag "modules"
    tag "modules_nfcore"
    tag "samtools"
    tag "samtools/view"

    test("sarscov2 - [bam, []], [], []") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true),
                    []
                ]
                input[1] = [[],[]]
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.sam,
                    process.out.bai,
                    process.out.crai,
                    process.out.csi,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [cram, crai], fasta, []") {

        when {
            process {
                """
                input[0] = [
                    [ id: 'test' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.cram[0][1]).name,
                    process.out.bam,
                    process.out.sam,
                    process.out.bai,
                    process.out.crai,
                    process.out.csi,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [cram, []], fasta, [] - bam output") {

        config "./bam.config"

        when {
            process {
                """
                input[0] = [
                    [ id: 'test' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    []
                ]
                input[1] = [
                    [ id:'genome' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.sam,
                    process.out.bai,
                    process.out.crai,
                    process.out.csi,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [cram, []], fasta, [] - bam & index output") {

        config "./bam_index.config"

        when {
            process {
                """
                input[0] = [
                    [ id: 'test' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    []
                ]
                input[1] = [
                    [ id:'genome' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.sam,
                    file(process.out.csi[0][1]).name,
                    process.out.crai,
                    process.out.bai,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [cram, []], fasta, qname - bam & index output") {

        config "./bam_index.config"

        when {
            process {
                """
                input[0] = [
                    [ id: 'test' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    []
                ]
                input[1] = [
                    [ id:'genome' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[2] = Channel.of("testN:2817", "testN:2814").collectFile(name: "readnames.list", newLine: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.sam,
                    file(process.out.csi[0][1]).name,
                    process.out.crai,
                    process.out.bai,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - [bam, []], [], [] - stub") {

        options "-stub"
        config "./bam_index.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true),
                    []
                ]
                input[1] = [[],[]]
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.bam[0][1]).name,
                    process.out.cram,
                    process.out.sam,
                    file(process.out.csi[0][1]).name,
                    process.out.crai,
                    process.out.bai,
                    process.out.versions
                ).match() }
            )
        }

    }

}
