nextflow_process {

    name "Test Process SAMTOOLS_MPILEUP"
    script "../main.nf"
    process "SAMTOOLS_MPILEUP"

    tag "modules"
    tag "modules_nfcore"
    tag "samtools"
    tag "samtools/mpileup"

    test("sarscov2 - [bam, []], fasta") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    []
                ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.mpileup[0][1]).linesGzip[0..6],
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - [bam, bed], fasta") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['sarscov2']['genome']['test_bed'], checkIfExists: true)
                ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.mpileup[0][1]).linesGzip[0..6],
                    process.out.versions
                ).match() }
            )
        }

    }

}
