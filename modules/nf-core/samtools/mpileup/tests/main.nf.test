nextflow_process {

    name "Test Process SAMTOOLS_MPILEUP"
    script "../main.nf"
    process "SAMTOOLS_MPILEUP"

    tag "modules"
    tag "modules_nfcore"
    tag "samtools"
    tag "samtools/mpileup"

    test("bam_bed") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    []
                ]
                input[1] = [[],[]]
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }

    test("bam_bed_fasta") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    []
                ]
                input[1] = [
                    [ id: 'fasta'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }

    test("bam_bed --stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    []
                ]
                input[1] = [[],[]]
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }

}
