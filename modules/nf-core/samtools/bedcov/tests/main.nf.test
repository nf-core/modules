nextflow_process {

    name "Test Process SAMTOOLS_BEDCOV"
    script "../main.nf"
    process "SAMTOOLS_BEDCOV"

    tag "modules"
    tag "modules_nfcore"
    tag "samtools"
    tag "samtools/bedcov"

    test("sarscov2 - bam_input") {

        when {
            process {
                """
                input[0] = Channel.of([
                    [id: 'test', single_end: false], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = Channel.of([
                    [ id:'bed' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ])
                input[2] = Channel.of([
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = Channel.of([
                    [ id:'genome_index' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - bam_input - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of([
                    [id: 'test', single_end: false], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = Channel.of([
                    [ id:'bed' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ])
                input[2] = Channel.of([
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = Channel.of([
                    [ id:'genome_index' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - cram_input") {

        when {
            process {
                """
                input[0] = Channel.of([
                    [id: 'test', single_end: false], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true)
                ])
                input[1] = Channel.of([
                    [ id:'bed' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ])
                input[2] = Channel.of([
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = Channel.of([
                    [ id:'genome_index' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
}
