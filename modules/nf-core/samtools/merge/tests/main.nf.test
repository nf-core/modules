nextflow_process {

    name "Test Process SAMTOOLS_MERGE"
    script "../main.nf"
    process "SAMTOOLS_MERGE"

    tag "modules"
    tag "modules_nfcore"
    tag "samtools"
    tag "samtools/merge"
    config "./nextflow.config"

    test("bams") {

        when {
            params {
                module_args = '--write-index'
            }
            process {
                """
                input[0] = [
                    [ id:'test'], 
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.methylated.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    file(process.out.csi[0][1]).name,
                    process.out.cram,
                    process.out.crai,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match()
                }
            )
        }
    }

    test("crams_fastq") {

        when {
            params {
                module_args = '--write-index --output-fmt cram,version=3.0'
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test2.paired_end.sorted.cram', checkIfExists: true) ]
                ]
                input[1] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[],[]]
                """
            }
        }

        then {           
            def fasta = 'https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/genome/genome.fasta'
            assert process.success
            assertAll(
                { assert snapshot(
                    cram(process.out.cram[0][1], fasta).getReadsMD5(),
                    process.out.csi,
                    process.out.bam,
                    file(process.out.crai[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match()
                }
            )
        }
    }

    test("crams_fastq_gz") {

        when {
            params {
                module_args = '--write-index'
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test2.paired_end.sorted.cram', checkIfExists: true) ]
                ]
                input[1] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz.fai', checkIfExists: true)
                ]
                input[3] = [
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz.gzi', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    //nft-bam doesn't like the fasta.gz
                    file(process.out.cram[0][1]).name,
                    process.out.csi,
                    process.out.bam,
                    file(process.out.crai[0][1]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match()
                }
            )
        }
    }

    test("bam") {

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.methylated.sorted.bam', checkIfExists: true) ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    process.out.csi,
                    process.out.cram,
                    process.out.crai,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match()
                }
            )
        }
    }

    test("bams - stub") {

        options "-stub"

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.methylated.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match()
                }
            )
        }
    }

    test("bams_no_index - stub") {

        options "-stub"

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [ id:'test'],
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.methylated.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = [[],[]]
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match()
                }
            )
        }
    }

}
