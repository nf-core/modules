nextflow_process {

    name "Test Process SAMTOOLS_FIXMATE"
    script "../main.nf"
    process "SAMTOOLS_FIXMATE"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "samtools"
    tag "samtools/fixmate"
    tag "samtools/sort"

    test("sarscov2 - bam") {

        when {
            params {
                module_args = ''
                samtools_sort_args = ''
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.bam', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    process.out.versions)
                    .match()
                }
            )
        }
    }

    test("human - cram") {

        setup {
            run("SAMTOOLS_SORT") {
                script "../../../samtools/sort/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true)
                    ]
                    input[1] = [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            params {
                module_args         = '--output-fmt cram'
                samtools_sort_args  = '--template-coordinate --output-fmt cram'
            }
            process {
                """
                input[0] = SAMTOOLS_SORT.out.cram
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.cram[0][1]).name,
                    process.out.versions
                    ).match()
                }
            )
        }

    }

    test("human - cram - stub") {

        options "-stub"

        when {
            params {
                module_args = '--output-fmt cram'
                samtools_sort_args = ''
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
}