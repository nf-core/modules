nextflow_process {

    name "Test Process SAMTOOLS_BGZIP"
    script "../main.nf"
    process "SAMTOOLS_BGZIP"

    tag "modules"
    tag "modules_nfcore"
    tag "samtools"
    tag "samtools/bgzip"

    test("test_samtools_bgzip - fasta") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_samtools_bgzip - fasta bgzipped") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.gz', checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_samtools_bgzip - proteome gzipped") {
    // This file is not bgziped. It is used to check the re-zipping branch of the case statement in the module.

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/proteome.fasta.gz', checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_samtools_bgzip - fasta stub") {

        options "-stub"
        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
