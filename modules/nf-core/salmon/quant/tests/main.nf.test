nextflow_process {

    name "Test Process SALMON_QUANT"
    script "../main.nf"
    process "SALMON_QUANT"
    config "./nextflow.config"
    tag "modules"
    tag "modules_nfcore"
    tag "salmon"
    tag "salmon/quant"

    test("sarscov2 - single_end") {

        setup {
            run("SALMON_INDEX") {
                script "../../../salmon/index/main.nf"
                process {
                    """
                    input[0] = Channel.of([file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)])
                    input[1] = Channel.of([file(params.test_data['sarscov2']['genome']['transcriptome_fasta'], checkIfExists: true)])
                    """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true) ]
                ])
                input[1] = SALMON_INDEX.out.index
                input[2] = Channel.of([file(params.test_data['sarscov2']['genome']['genome_gtf'], checkIfExists: true)])
                input[3] = Channel.of([file(params.test_data['sarscov2']['genome']['transcriptome_fasta'], checkIfExists: true)])
                input[4] = false
                input[5] = ''
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.json_info.get(0).get(1)).exists() },
                { assert path(process.out.results.get(0).get(1)).exists() },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("sarscov2 - single_end lib type A") {

        setup {
            run("SALMON_INDEX") {
                script "../../../salmon/index/main.nf"
                process {
                    """
                    input[0] = Channel.of([file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)])
                    input[1] = Channel.of([file(params.test_data['sarscov2']['genome']['transcriptome_fasta'], checkIfExists: true)])
                    """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true) ]
                ])
                input[1] = SALMON_INDEX.out.index
                input[2] = Channel.of([file(params.test_data['sarscov2']['genome']['genome_gtf'], checkIfExists: true)])
                input[3] = Channel.of([file(params.test_data['sarscov2']['genome']['transcriptome_fasta'], checkIfExists: true)])
                input[4] = false
                input[5] = 'A'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.json_info.get(0).get(1)).exists() },
                { assert path(process.out.results.get(0).get(1)).exists() },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("sarscov2 - pair_end") {

        setup {
            run("SALMON_INDEX") {
                script "../../../salmon/index/main.nf"
                process {
                    """
                    input[0] = Channel.of([file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)])
                    input[1] = Channel.of([file(params.test_data['sarscov2']['genome']['transcriptome_fasta'], checkIfExists: true)])
                    """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true) ]
                ])
                input[1] = SALMON_INDEX.out.index
                input[2] = Channel.of([file(params.test_data['sarscov2']['genome']['genome_gtf'], checkIfExists: true)])
                input[3] = Channel.of([file(params.test_data['sarscov2']['genome']['transcriptome_fasta'], checkIfExists: true)])
                input[4] = false
                input[5] = ''
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.json_info.get(0).get(1)).exists() },
                { assert path(process.out.results.get(0).get(1)).exists() },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }
    test("sarscov2 - pair_end multiple") {

        setup {
            run("SALMON_INDEX") {
                script "../../../salmon/index/main.nf"
                process {
                    """
                    input[0] = Channel.of([file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)])
                    input[1] = Channel.of([file(params.test_data['sarscov2']['genome']['transcriptome_fasta'], checkIfExists: true)])
                    """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test2_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test2_2_fastq_gz'], checkIfExists: true)
                    ]
                ])
                input[1] = SALMON_INDEX.out.index
                input[2] = Channel.of([file(params.test_data['sarscov2']['genome']['genome_gtf'], checkIfExists: true)])
                input[3] = Channel.of([file(params.test_data['sarscov2']['genome']['transcriptome_fasta'], checkIfExists: true)])
                input[4] = false
                input[5] = ''
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.json_info.get(0).get(1)).exists() },
                { assert path(process.out.results.get(0).get(1)).exists() },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }
}