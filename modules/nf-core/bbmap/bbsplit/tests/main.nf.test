nextflow_process {

    name "Test Process BBMAP_BBSPLIT"
    script "../main.nf"
    process "BBMAP_BBSPLIT"
    tag "bbmap"
    tag "bbmap/bbsplit"

    test("sarscov2_se_fastq_fasta_chr22_fasta") {

        setup {

            run("BBMAP_BBSPLIT", alias: "BBMAP_BBSPLIT_INDEX") {
                script "../main.nf"
                process {
                    """
                    input[0] =  [[:],[]]
                    input[1] = []
                    input[2] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    input[3] = [
                            ['human'],
                            file('https://raw.githubusercontent.com/nf-core/test-datasets/rnaseq/reference/chr22_23800000-23980000.fa', checkIfExists: true)
                        ]
                    input[4] = true
                    """
                }
            }
        }

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                    """
                    input[0] =  [
                            [ id:'test', single_end:true ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                        ]
                    input[1] = BBMAP_BBSPLIT_INDEX.out.index
                    input[2] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    input[3] = [
                            ['human'],
                            file('https://raw.githubusercontent.com/nf-core/test-datasets/rnaseq/reference/chr22_23800000-23980000.fa', checkIfExists: true)
                        ]
                    input[4] = true
                    """
                }
        }

        then {
        //     def filesToExclude = [
        //         "chr1.chrom.gz",
        //         "info.txt",
        //         "merged_ref_9222711925172838098.fa.gz",
        //         "namelist.txt",
        //         "reflist.txt",
        //         "scaffolds.txt.gz",
        //         "summary.txt",
        //         "chr1_index_k13_c13_b1.block",
        //         "chr1_index_k13_c13_b1.block2.gz",
        //     ]
        //     def outputDirectory = new File(process.out.db_indexed[0][1])

        //     def filesExist = outputDirectory.listFiles().any { file ->
        //         filesToExclude.any { excludeName ->
        //             file.getName().endsWith(excludeName) && file.exists()
        //         }
        //     }

        //     def filteredFiles = outputDirectory
        //         .listFiles()
        //         .findAll { file ->
        //             !filesToExclude.any { excludeName ->
        //                 file.getName().endsWith(excludeName)
        //             }
        //         }
        //         .sort{ it.getName()}

        //     assertAll(
        //         { assert process.success },
        //         { assert snapshot(filteredFiles).match("createindex_filtered_files")},
        //         { assert filesExist : "One or more files to exclude do not exist" },
        //         { assert snapshot(process.out.versions).match("versions")}
        //     )
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
