nextflow_process {

    name "Test Process DYSGU_RUN"
    script "../main.nf"
    process "DYSGU_RUN"
    tag "modules"
    tag "modules_nfcore"
    tag "dysgu"
    tag "dysgu/run"


    test("human - bam - defaults") {

        when {
            process {
                """
                input[0] = [ [ id:'test'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.recalibrated.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.recalibrated.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [ [ id:'reference'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]
                input[2] = [ [ id:'reference'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[:], []]
                input[4] = [[:], []]
                input[5] = [[:], []]
                input[6] = [[:], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    sanitizeOutput(process.out, unstableKeys:["tbi", "vcf"])
                ).match() }
            )
        }

    }


    test("human - cram - all files") {

        when {
            process {
                """
                input[0] = [ [ id:'test'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.recalibrated.sorted.cram', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.recalibrated.sorted.cram.crai', checkIfExists: true)
                ]
                input[1] = [ [ id:'reference'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]
                input[2] = [ [ id:'reference'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [ [ id:'sites'], 
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/chr21/simulated_sv.vcf.gz')
                ]
                input[4] = [ [ id:'bed'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/annotated.bed')
                ]
                input[5] = [ [ id:'search'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/multi_intervals.bed')
                ]
                input[6] = [ [ id:'exclude'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/germlineresources/SNP_GRCh38_hg38_wChr.bed')
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    sanitizeOutput(process.out, unstableKeys:["tbi", "vcf"])
                ).match() }
            )
        }

    }

    test("human - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id:'test'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.recalibrated.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.recalibrated.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [ [ id:'reference'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]
                input[2] = [ [ id:'reference'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[:], []]
                input[4] = [[:], []]
                input[5] = [[:], []]
                input[6] = [[:], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    sanitizeOutput(process.out)
                ).match() }
            )
        }

    }

}