nextflow_process {

    name "Test Process RMARKDOWNNOTEBOOK"
    script "../main.nf"
    process "RMARKDOWNNOTEBOOK"
    config "./nextflow.config"
    tag "modules"
    tag "modules_nfcore"
    tag "rmarkdownnotebook"

    test("test_rmarkdownnotebook") {

        when {
            params{
                module_args = false
            }
            process {
                """
                input[0] = [ [ id:'test_rmd' ], file(params.test_data['generic']['notebooks']['rmarkdown'], checkIfExists: true) ]
                input[1] = [:]
                input[2] = []
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.report[0][1]).name,
                    process.out.parameterised_notebook,
                    process.out.artifacts,
                    file(process.out.session_info[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("test_rmarkdownnotebook_parametrize") {

        when {
            params{
                module_args = true
            }
            process {
                """
                input[0] = [ [ id:'test_rmd' ], file(params.test_data['generic']['notebooks']['rmarkdown'], checkIfExists: true) ]
                input[1] = [input_filename: "hello.txt", n_iter: 12]
                input[2] = file(params.test_data['generic']['txt']['hello'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.report[0][1]).name,
                    process.out.parameterised_notebook,
                    process.out.artifacts,
                    file(process.out.session_info[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("test_rmarkdownnotebook - stub") {

        options "-stub"

        when {
            params{
                module_args = false
            }
            process {
                """
                input[0] = [ [ id:'test_rmd' ], file(params.test_data['generic']['notebooks']['rmarkdown'], checkIfExists: true) ]
                input[1] = [:]
                input[2] = []
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.report[0][1]).name,
                    process.out.parameterised_notebook,
                    process.out.artifacts,
                    file(process.out.session_info[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }
    }

}