nextflow_process {

    name "Test Process GUNC_MERGECHECKM"
    script "../main.nf"
    process "GUNC_MERGECHECKM"
    config "./nextflow.config"

    tag "modules_nfcore"
    tag "modules"
    tag "gunc"
    tag "gunc/mergecheckm"
    tag "gunc/run"
    tag "gunc/downloaddb"
    tag "checkm/lineagewf"
    tag "checkm/qa"

    // commented out because GitHub runners are not able to run this test
    // test("gunc - mergecheckm") {

    //     setup {
    //         run("CHECKM_LINEAGEWF") {
    //             script "../../../checkm/lineagewf/main.nf"
    //             process {
    //                 """
    //                 input[0] = [
    //                     [id: 'test'], // meta map
    //                     file(
    //                         params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta',
    //                         checkIfExists: true
    //                     )
    //                 ]
    //                 input[1] = 'fasta'
    //                 input[2] = [] // Download CheckM database
    //                 """
    //             }
    //         }

    //         run("CHECKM_QA") {
    //             script "../../../checkm/qa/main.nf"
    //             process {
    //                 """
    //                 input[0] =  CHECKM_LINEAGEWF.out.checkm_output
    //                             .join(CHECKM_LINEAGEWF.out.marker_file)
    //                             .map { sample_data -> sample_data + [file('NO_FILE')] }
    //                 input[1] = []
    //                 """
    //             }
    //         }

    //         run("GUNC_DOWNLOADDB") {
    //             script "../../downloaddb/main.nf"
    //             process {
    //                 """
    //                 input[0] = 'progenomes'
    //                 """
    //             }
    //         }

    //         run("GUNC_RUN") {
    //             script "../../run/main.nf"
    //             process {
    //                 """
    //                 input[0] = [
    //                     [id: 'test'],
    //                     [file(
    //                         params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta',
    //                         checkIfExists: true
    //                     )]
    //                 ]
    //                 input[1] = GUNC_DOWNLOADDB.out.db
    //                 """
    //             }
    //         }
    //     }

    //     when {
    //         params {
    //             outdir = "${launchDir}/tests/results"
    //         }
    //         process {
    //             """
    //             input[0] = GUNC_RUN.out.maxcss_level_tsv.join(CHECKM_QA.out.output)
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(process.out).match() }
    //         )
    //     }

    // }

    test("gunc - mergecheckm - stub") {

        options "-stub"

        setup {
            run("CHECKM_LINEAGEWF") {
                script "../../../checkm/lineagewf/main.nf"
                process {
                    """
                    input[0] = [
                        [id: 'test'], // meta map
                        file(
                            params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta',
                            checkIfExists: true
                        )
                    ]
                    input[1] = 'fasta'
                    input[2] = [] // Download CheckM database
                    """
                }
            }

            run("CHECKM_QA") {
                script "../../../checkm/qa/main.nf"
                process {
                    """
                    input[0] =  CHECKM_LINEAGEWF.out.checkm_output
                                .join(CHECKM_LINEAGEWF.out.marker_file)
                                .map { v -> v + [file('NO_FILE')] }
                    input[1] = []
                    """
                }
            }

            run("GUNC_DOWNLOADDB") {
                script "../../downloaddb/main.nf"
                process {
                    """
                    input[0] = 'progenomes'
                    """
                }
            }

            run("GUNC_RUN") {
                script "../../run/main.nf"
                process {
                    """
                    input[0] = [
                        [id: 'test'],
                        [file(
                            params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta',
                            checkIfExists: true
                        )]
                    ]
                    input[1] = GUNC_DOWNLOADDB.out.db
                    """
                }
            }
        }

        when {
            params {
                outdir = "${launchDir}/tests/results"
            }
            process {
                """
                input[0] = GUNC_RUN.out.maxcss_level_tsv.join(CHECKM_QA.out.output)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
}