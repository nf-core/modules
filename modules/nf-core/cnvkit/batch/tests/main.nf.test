nextflow_process {

    name "Test Process CNVKIT_BATCH"
    script "../main.nf"
    process "CNVKIT_BATCH"

    tag "modules"
    tag "modules_nfcore"
    tag "cnvkit"
    tag "cnvkit/batch"

    test("cnvkit batch hybrid mode - bam") {

        config "./batch_hybrid.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam'], checkIfExists: true)
                    ]
                input[1] = [[:],file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[2] = [[:],[]]
                input[3] = [[:],file(params.test_data['sarscov2']['genome']['baits_bed'], checkIfExists: true)]
                input[4] = [[:],[]]
                input[5] = false
                """
            }
        }

        then {
            println process.out.bed[0][1]
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match() }
            )
        }

    }

    test("cnvkit batch wgs - bam") {

        config "./batch_wgs.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true)
                    ]
                input[1] = [[:],file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)]
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match() }
            )
        }

    }

    test("cnvkit batch wgs - cram") {

        config "./batch_wgs.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_sorted_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true)
                    ]
                input[1] = [[:],file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)]
                input[2] = [[:],file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match() }
            )
        }

    }

    test("cnvkit batch tumouronly mode - bam") {

        config "./batch_tumouronly.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    []
                    ]
                input[1] = [[:],[]]
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                input[4] = [[:],file(params.test_data['homo_sapiens']['genome']['genome_21_reference_cnn'], checkIfExists: true)]
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match() }
            )
        }

    }

    test("cnvkit batch tumouronly mode - cram") {

        config "./batch_tumouronly.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_cram'], checkIfExists: true),
                    []
                    ]
                input[1] = [[:],file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)]
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                input[4] = [[:],file(params.test_data['homo_sapiens']['genome']['genome_21_reference_cnn'], checkIfExists: true)]
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match() }
            )
        }

    }

    test("cnvkit batch germline mode - cram") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    [],
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_cram'], checkIfExists: true)
                    ]
                input[1] = [[:],file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)]
                input[2] = [[:],file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)]
                input[3] = [[:],file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)]
                input[4] = [[:],[]]
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match() }
            )
        }

    }


    test("cnvkit batch germline hybrid mode - bam") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam'], checkIfExists: true)
                    ]
                input[1] = [[:],file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[2] = [[:],[]]
                input[3] = [[:],file(params.test_data['sarscov2']['genome']['baits_bed'], checkIfExists: true)]
                input[4] = [[:],[]]
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match() }
            )
        }

    }


    test("cnvkit batch pon mode - bam") {

        config "./batch_pon.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    [],
                    [file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_sorted_bam'], checkIfExists: true)
                    ]
                    ]
                input[1] = [[:],file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)]
                input[2] = [[:],[]]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.version).match() }
            )
        }

    }


    test("cnvkit batch - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam'], checkIfExists: true)
                    ]
                input[1] = [[:],file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)]
                input[2] = [[:],[]]
                input[3] = [[:],file(params.test_data['sarscov2']['genome']['baits_bed'], checkIfExists: true)]
                input[4] = [[:],[]]
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.bed).match() }
            )
        }

    }

}
