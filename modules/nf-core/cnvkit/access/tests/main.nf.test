
nextflow_process {

    name "Test Process CNVKIT_ACCESS"
    script "../main.nf"
    process "CNVKIT_ACCESS"

    tag "modules"
    tag "modules_nfcore"
    tag "cnvkit"
    tag "cnvkit/access"

    test("test-cnvkit-access") {

        when {
            process {
                """
                input[0] = [
				    [ id: "test" ],
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
				]
				input[1] = [
				    [ id:'test' ], // meta map
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/multi_intervals.bed', checkIfExists: true)
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test-cnvkit-access-no-exclude") {

        when {
            process {
                """
                input[0] = [
				    [ id: "test" ],
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
				]
				input[1] = [
				    [ id:'test' ], // meta map
				    []
				]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test-cnvkit-access-multiple-exclude") {

        when {
            process {
                """
                input[0] = [
				    [ id: "test" ],
				    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
				]
				input[1] = [
				    [ id:'test' ], // meta map
				    [
				        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/multi_intervals.bed', checkIfExists: true),
				        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/multi_intervals.antitarget.bed', checkIfExists: true)
				    ]
                ]

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
