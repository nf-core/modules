nextflow_process {

    name "Test Process BWA_SAMPE"
    tag "modules_nfcore"
    tag "modules"
    tag "bwa"
    tag "bwa/sampe"
    tag "bwa/aln"
    tag "bwa/index"
    script "../main.nf"
    process "BWA_SAMPE"

    test("SamPE") {

        setup {
            run("BWA_INDEX") {
                script "../../index/main.nf"
                process {
                    """
                    input[0] = [
                        [id: 'test'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }
            run("BWA_ALN") {
                script "../../aln/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:true ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                        ]
                    ]
                    input[1] = BWA_INDEX.out.index
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel
                    .fromList(
                        [
                            [ id:'test', single_end:false ],
                            [
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                            ]
                        ]
                    )
                    .collect()
                    .join(BWA_ALN.out.sai)
                input[1] = BWA_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
