nextflow_process {

    name "Test Process MMSEQS_TSV2EXPROFILEDB"
    script "../main.nf"
    process "MMSEQS_TSV2EXPROFILEDB"
    config './nextflow.config'

    tag "modules"
    tag "modules_nfcore"
    tag "mmseqs"
    tag "mmseqs/tsv2exprofiledb"
    tag "untar"

    setup {
        run("UNTAR") {
            script "../../../untar"
            process {
                """
                input[0] = [ [:],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/mmseqs.tar.gz', checkIfExists: true)
                    ]
                """
            }
        }
    }

    test("sarscov2 - db") {

        when {
            process {
                """
                input[0] = UNTAR.out.untar.map { meta, untar -> untar }
                """
            }
        }

        then {
            // Many files are validly empty due to small test data, so just list names, and check a couple of expected files with contents
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.db_exprofile[0]).list().find { it.getFileName().toString() == "mmseqs.tsv" },
                    path(process.out.db_exprofile[0]).list().find { it.getFileName().toString() == "mmseqs" },
                    path(process.out.db_exprofile[0]).list().find { it.getFileName().toString() == "mmseqs_seq.index" },
                    path(process.out.db_exprofile[0]).list().sort().collect { it.getFileName().toString() },
                    process.out.versions
                ).match() }
            )
        }
    }

    test("sarscov2 - db - stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = UNTAR.out.untar.map { meta, untar -> untar }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.db_exprofile[0]).list().sort().collect { it.getFileName().toString() },
                    process.out.versions
                ).match() }
            )
        }

    }

}