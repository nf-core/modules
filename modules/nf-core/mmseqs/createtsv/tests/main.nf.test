nextflow_process {

    name "Test Process MMSEQS_CREATETSV"
    script "../main.nf"
    config "./nextflow.config"
    process "MMSEQS_CREATETSV"

    tag "modules"
    tag "modules_nfcore"
    tag "mmseqs"
    tag "mmseqs/taxonomy"
    tag "mmseqs/cluster"
    tag "mmseqs/createdb"
    tag "mmseqs/databases"
    tag "mmseqs/createtsv"

    setup {
        run("MMSEQS_CREATEDB", alias: "MMSEQS_TAXA") {
            script "../../createdb/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test_query', single_end:false ],
                    file(params.test_data['bacteroides_fragilis']['genome']['genome_fna_gz'], checkIfExists: true)
                    ]
                """
            }
        }
        run("MMSEQS_DATABASES") {
            script "../../databases/main.nf"
            process {
            """
            input[0] = 'SILVA'
            """
            }
        }
        run("MMSEQS_TAXONOMY") {
            script "../../taxonomy/main.nf"
            process {
            """
            input[0] = MMSEQS_TAXA.out.db
            input[1] = MMSEQS_DATABASES.out.database
            """
            }
        }

        run("MMSEQS_CREATEDB", alias: "MMSEQS_QUERY") {
            script "../../createdb/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test_query', single_end:false ],
                    file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true),
                ]
                """
            }
        }
        run("MMSEQS_CREATEDB", alias: "MMSEQS_TARGET") {
            script "../../createdb/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test_target', single_end:false ],
                    file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true),
                ]
                """
            }
        }
        run("MMSEQS_CLUSTER") {
            script "../../cluster/main.nf"
            process {
            """
            input[0] = MMSEQS_TARGET.out.db
            """
            }
        }
    }


    test("mmseqs/createtsv - bacteroides_fragilis - taxonomy") {

        when {
            process {
                """
                input[0] = MMSEQS_TAXONOMY.out.db_taxonomy
                input[1] = [[:],[]]
                input[2] = MMSEQS_TAXA.out.db
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("mmseqs/createtsv - sarscov2 - cluster") {

        when {
            process {
                """
                input[0] = MMSEQS_CLUSTER.out.db_cluster
                input[1] = MMSEQS_QUERY.out.db
                input[2] = MMSEQS_TARGET.out.db
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.tsv.collect { file(it[1]).getName() } +
                    process.out.versions).match() }
            )
        }
    }

    test("mmseqs/createtsv - bacteroides_fragilis - taxonomy - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = MMSEQS_TAXONOMY.out.db_taxonomy
                input[1] = [[:],[]]
                input[2] = MMSEQS_TAXA.out.db
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("mmseqs/createtsv - sarscov2 - cluster - stub") {

        options "-stub"

        when {
            process {
                """
                ch_query  = MMSEQS_QUERY.out.db
                ch_target = MMSEQS_TARGET.out.db
                ch_result = MMSEQS_CLUSTER.out.db_cluster

                input[0] = ch_result
                input[1] = ch_query
                input[2] = ch_target
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.tsv.collect { file(it[1]).getName() } +
                                    process.out.versions).match() }
            )
        }
    }
}