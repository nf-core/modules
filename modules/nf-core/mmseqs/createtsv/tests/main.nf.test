nextflow_process {

    name "Test Process MMSEQS_CREATETSV"
    script "../main.nf"
    config "./nextflow.config"
    process "MMSEQS_CREATETSV"

    tag "modules"
    tag "modules_nfcore"
    tag "mmseqs"
    tag "mmseqs/taxonomy"
    tag "mmseqs/cluster"
    tag "mmseqs/createdb"
    tag "mmseqs/databases"
    tag "mmseqs/createtsv"

    test("mmseqs/createtsv - bacteroides_fragilis - taxonomy") {

        setup {
            run("MMSEQS_CREATEDB") {
                script "modules/nf-core/mmseqs/createdb/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test_query', single_end:false ],
                        file(params.test_data['bacteroides_fragilis']['genome']['genome_fna_gz'], checkIfExists: true)
                        ]
                    """
                }
            }

            run("MMSEQS_DATABASES") {
                script "modules/nf-core/mmseqs/databases/main.nf"
                process {
                """
                input[0] = 'SILVA'
                """
                }
            }

            run("MMSEQS_TAXONOMY") {
                script "modules/nf-core/mmseqs/taxonomy/main.nf"
                process {
                """
                input[0] = MMSEQS_CREATEDB.out.db
                input[1] = MMSEQS_DATABASES.out.database
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = MMSEQS_TAXONOMY.out.db_taxonomy
                input[1] = [[:],[]]
                input[2] = MMSEQS_CREATEDB.out.db
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("mmseqs/createtsv - sarscov2 - cluster") {

        setup {
            run("MMSEQS_CREATEDB", alias: "MMSEQS_QUERY") {
                script "modules/nf-core/mmseqs/createdb/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test_query', single_end:false ],
                        file(params.test_data['bacteroides_fragilis']['genome']['genome_fna_gz'], checkIfExists: true),
                        ]
                    """
                }
            }

            run("MMSEQS_CREATEDB", alias: "MMSEQS_TARGET") {
                script "modules/nf-core/mmseqs/createdb/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test_target', single_end:false ],
                        file(params.test_data['bacteroides_fragilis']['genome']['genome_fna_gz'], checkIfExists: true),
                        ]
                    """
                }
            }

            run("MMSEQS_CLUSTER", alias: "MMSEQS_RESULT") {
                script "modules/nf-core/mmseqs/cluster/main.nf"
                process {
                """
                input[0] = MMSEQS_QUERY.out.db
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = MMSEQS_RESULT.out.db_cluster
                input[1] = MMSEQS_QUERY.out.db
                input[2] = MMSEQS_TARGET.out.db
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("mmseqs/createtsv - bacteroides_fragilis - taxonomy - stub") {

        options "-stub"

        setup {
            run("MMSEQS_CREATEDB") {
                script "modules/nf-core/mmseqs/createdb/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test_query', single_end:false ],
                        file(params.test_data['bacteroides_fragilis']['genome']['genome_fna_gz'], checkIfExists: true)
                        ]
                    """
                }
            }

            run("MMSEQS_DATABASES") {
                script "modules/nf-core/mmseqs/databases/main.nf"
                process {
                """
                input[0] = 'SILVA'
                """
                }
            }

            run("MMSEQS_TAXONOMY") {
                script "modules/nf-core/mmseqs/taxonomy/main.nf"
                process {
                """
                input[0] = MMSEQS_CREATEDB.out.db
                input[1] = MMSEQS_DATABASES.out.database
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = MMSEQS_TAXONOMY.out.db_taxonomy
                input[1] = [[:],[]]
                input[2] = MMSEQS_CREATEDB.out.db
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}