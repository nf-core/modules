nextflow_process {

    name "Test Process DEEPVARIANT"
    script "../main.nf"
    process "DEEPVARIANT"

    tag "modules"
    tag "modules_nfcore"

    test("Test deepvariant("homo_sapiens - [bam, bai, bed] - fasta - fai") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                      file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                      file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                ]
                input[1] = [
                    [ id:'genome'],
                      file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome'],
                      file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                ]
                input[3] = [
                    [],[]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Test deepvariant cram intervals") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                      file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                      file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true),
                      file(params.test_data['homo_sapiens']['genome']['genome_bed'], checkIfExists: true)
                ]
                input[1] = [
                    [ id:'genome'],
                      file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome'],
                      file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                ]
                input[3] = [
                    [],[]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Test deepvariant fasta_gz") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                      file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                      file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                      []
                ]
                input[1] = [
                    [ id:'genome'],
                      file(params.test_data['homo_sapiens']['genome']['genome_fasta_gz'], checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome'],
                      file(params.test_data['homo_sapiens']['genome']['genome_fasta_gz_fai'], checkIfExists: true)
                ]
                input[3] = [
                    [ id:'genome'],
                      file(params.test_data['homo_sapiens']['genome']['genome_fasta_gz_gzi'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}