nextflow_process {

    name "Test Process JASMINESV"
    script "../main.nf"
    process "JASMINESV"

    tag "modules"
    tag "modules_nfcore"
    tag "jasminesv"

    config "./nextflow.config"

    test("homo_sapiens - [vcf, vcf2], [], [], [], [], [] - vcf") {

        when {
            process {
                """
                input[0] = [
                    [ id:"test" ],
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test.genome.vcf", checkIfExists:true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test2.genome.vcf", checkIfExists:true),
                    ],
                    [],
                    []
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.collectEntries { key, val ->
                        if(key.matches("\\d+")) {
                            // Skip the integer keys
                            return null
                        }
                        if(key == "vcf") {
                            return [key, val.collect { it.collect { it instanceof Map ? it : path(it).vcf.summary } }]
                        }
                        return [key, val]
                    }.findAll { it != null }
                ).match() }
            )
        }

    }

    test("homo_sapiens - [vcf_gz, vcf_gz2], [], [], [], [], [] - vcf.gz") {

        when {
            process {
                """
                input[0] = [
                    [ id:"test" ],
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test2_haplotc.ann.vcf.gz", checkIfExists:true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gatk/haplotypecaller_calls/test_haplotcaller.cnn.vcf.gz", checkIfExists:true),
                    ],
                    [],
                    []
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.collectEntries { key, val ->
                        if(key.matches("\\d+")) {
                            // Skip the integer keys
                            return null
                        }
                        if(key == "vcf") {
                            return [key, val.collect { it.collect { it instanceof Map ? it : path(it).vcf.summary } }]
                        }
                        return [key, val]
                    }.findAll { it != null }
                ).match() }
            )
        }

    }

    test("homo_sapiens - [vcf, vcf2], [bam, bam2], [], fasta, fai, [] - iris") {

        when {
            params {
                args = "--run_iris"
                args2 = "threads=1,--pacbio,min_ins_length=30"
            }
            process {
                """
                input[0] = [
                    [ id:"test" ],
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test.genome.vcf", checkIfExists:true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test2.genome.vcf", checkIfExists:true),
                    ],
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam", checkIfExists:true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam", checkIfExists:true)
                    ],
                    []
                ]
                input[1] = [
                    [id:"fasta"],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists:true)
                ]
                input[2] = [
                    [id:"fai"],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta.fai", checkIfExists:true)
                ]
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.collectEntries { key, val ->
                        if(key.matches("\\d+")) {
                            // Skip the integer keys
                            return null
                        }
                        if(key == "vcf") {
                            return [key, val.collect { it.collect { it instanceof Map ? it : path(it).vcf.summary } }]
                        }
                        return [key, val]
                    }.findAll { it != null }
                ).match() }
            )
        }

    }

    test("homo_sapiens - [vcf, vcf2], [bam, bam2], [], fasta, fai, txt - normalize") {

        when {
            params {
                args = "--normalize_chrs"
            }
            process {
                """
                input[0] = [
                    [ id:"test" ],
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test.genome.vcf", checkIfExists:true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test2.genome.vcf", checkIfExists:true),
                    ],
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam", checkIfExists:true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam", checkIfExists:true)
                    ],
                    []
                ]
                input[1] = [
                    [id:"fasta"],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta", checkIfExists:true)
                ]
                input[2] = [
                    [id:"fai"],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/genome.fasta.fai", checkIfExists:true)
                ]
                input[3] = Channel.of("chr21 21", "chr22 22").collectFile(name:"chr_norm.txt", newLine:true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.collectEntries { key, val ->
                        if(key.matches("\\d+")) {
                            // Skip the integer keys
                            return null
                        }
                        if(key == "vcf") {
                            return [key, val.collect { it.collect { it instanceof Map ? it : path(it).vcf.summary } }]
                        }
                        return [key, val]
                    }.findAll { it != null }
                ).match() }
            )
        }

    }

    test("homo_sapiens - [vcf, vcf2], [], [], [], [], [] - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:"test" ],
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test.genome.vcf", checkIfExists:true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test2.genome.vcf", checkIfExists:true),
                    ],
                    [],
                    []
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - [vcf, vcf2], [], [], [], [], [] - empty vcf - not stub, but linting complains otherwise") {

        when {
            params {
                args = "min_support=2"
            }
            process {
                """
                input[0] = [
                    [ id:"test" ],
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/gvcf/test.genome.vcf", checkIfExists:true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/vcf/empty.vcf.gz", checkIfExists:true),                    ],
                    [],
                    []
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.collectEntries { key, val ->
                        if(key.matches("\\d+")) {
                            // Skip the integer keys
                            return null
                        }
                        if(key == "vcf") {
                            return [key, val.collect { it.collect { it instanceof Map ? it : path(it).vcf.summary } }]
                        }
                        return [key, val]
                    }.findAll { it != null }
                ).match() }
            )
        }

    }

}
