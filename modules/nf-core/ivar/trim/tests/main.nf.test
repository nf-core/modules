
nextflow_process {

    name "Test Process IVAR_TRIM"
    script "../main.nf"
    process "IVAR_TRIM"

    tag "modules"
    tag "modules_nfcore"
    tag "ivar"
    tag "ivar/trim"

    test("test-ivar-trim") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
				]
				input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.bam,
                        process.out.versions,
                        file(process.out.log.get(0).get(1)).exists()
                    ).match()
                }
            )
        }
    }

    test("test-ivar-trim-stub") {
        options '-stub'

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
				    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
				]
				input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
