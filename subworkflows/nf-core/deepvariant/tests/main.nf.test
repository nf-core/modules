nextflow_workflow {

    name "Test Subworkflow DEEPVARIANT"
    script "../main.nf"
    config "./nextflow.config"
    workflow "DEEPVARIANT"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/deepvariant"

    tag "deepvariant"
    tag "deepvariant/makeexamples"
    tag "deepvariant/callvariants"
    tag "deepvariant/postprocessvariants"

    test("homo_sapiens - two inputs - bam - fasta - fai") {
        when {
            workflow {
                """
                input[0] = Channel.of(
                [
                    [ id:'test', single_end:false ], // meta map
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                      []
                ],
                [
                    [ id:'test2', single_end:false ], // meta map
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                      []
                ])
                input[1] = [
                    [ id:'genome'],
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome'],
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [
                    [],[]
                ]
                input[4] = [
                    [],[]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("homo_sapiens - different samples and regions - cram - fasta - fai") {

        when {
            workflow {
                """
                input[0] = Channel.of(
                [
                    [ id:'test', single_end:false ], // meta map
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ],
                [
                    [ id:'test2', single_end:false ], // meta map
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true),
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true),
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ]
                )
                input[1] = [
                    [ id:'genome'],
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                    ]
                input[2] = [
                    [ id:'genome'],
                      file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [
                    [],[]
                ]
                input[4] = [
                    [],[]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

}
