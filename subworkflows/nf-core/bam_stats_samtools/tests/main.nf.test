nextflow_workflow {

    name "Test Workflow BAM_STATS_SAMTOOLS"
    script "../main.nf"
    workflow "BAM_STATS_SAMTOOLS"
    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "bam_stats_samtools"
    tag "subworkflows/bam_stats_samtools"
    tag "samtools"
    tag "samtools/flagstat"
    tag "samtools/idxstats"
    tag "samtools/stats"

    test("test_bam_stats_samtools_single_end") {

        when {
            params {
                outdir   = "$outputDir"
            }
            workflow {
                """
                    input[0] = [ [ id:'test', single_end:true ], // meta map
                                file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam'], checkIfExists: true),
                                file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam_bai'], checkIfExists: true)
                        ]
                    input[1] = [ [ id:'genome' ],
                            file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                            ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out.stats).match("test_bam_stats_samtools_single_end_stats") },
                { assert snapshot(workflow.out.flagstat).match("test_bam_stats_samtools_single_end_flagstats") },
                { assert snapshot(workflow.out.idxstats).match("test_bam_stats_samtools_single_end_idxstats") }
            )
        }
    }

    test("test_bam_stats_samtools_paired_end") {

        when {
            params {
                outdir   = "$outputDir"
            }
            workflow {
                """
                    input[0] = [ [ id:'test', single_end:true ], // meta map
                                file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                                file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true)
                        ]
                    input[1] = [ [ id:'genome' ],
                            file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                            ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.stats).match("test_bam_stats_samtools_paired_end_stats") },
                { assert snapshot(workflow.out.flagstat).match("test_bam_stats_samtools_paired_end_flagstats") },
                { assert snapshot(workflow.out.idxstats).match("test_bam_stats_samtools_paired_end_idxstats") }
            )
        }
    }

    test("test_bam_stats_samtools_paired_end_cram") {

        when {
            params {
                outdir   = "$outputDir"
            }
            workflow {
                """
                     input[0] = [ [ id:'test', single_end:false ], // meta map
                                file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                                file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true)
                                ]
                    input[1] = [ [ id:'genome' ],
                            file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                            ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out.stats).match("test_bam_stats_samtools_paired_end_cram_stats") },
                { assert snapshot(workflow.out.flagstat).match("test_bam_stats_samtools_paired_end_cram_flagstats") },
                { assert snapshot(workflow.out.idxstats).match("test_bam_stats_samtools_paired_end_cram_idxstats") }
            )
        }
    }

}
