nextflow_workflow {

    name "Test Workflow BAM_SORT_STATS_SAMTOOLS"
    script "../main.nf"
    workflow "BAM_SORT_STATS_SAMTOOLS"
    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/bam_sort_stats_samtools"
    tag "bam_sort_stats_samtools"
    tag "subworkflows/bam_stats_samtools"
    tag "bam_stats_samtools"
    tag "samtools"
    tag "samtools/index"
    tag "samtools/sort"
    tag "samtools/stats"
    tag "samtools/idxstats"
    tag "samtools/flagstat"

    test("test_bam_sort_stats_samtools_single_end") {

        when {
            params {
                outdir   = "$outputDir"
            }
            workflow {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                        file(params.test_data['sarscov2']['illumina']['test_single_end_bam'], checkIfExists: true)
                        ]
                input[1] = [ [ id:'genome' ],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                        ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert workflow.out.bam.get(0).get(1) ==~ ".*.bam"},
                { assert workflow.out.bai.get(0).get(1) ==~ ".*.bai"},
                { assert snapshot(workflow.out.stats).match("test_bam_sort_stats_samtools_single_end_stats") },
                { assert snapshot(workflow.out.flagstat).match("test_bam_sort_stats_samtools_single_end_flagstats") },
                { assert snapshot(workflow.out.idxstats).match("test_bam_sort_stats_samtools_single_end_idxstats") }
            )
        }
    }

    test("test_bam_sort_stats_samtools_paired_end") {

        when {
            params {
                outdir   = "$outputDir"
            }
            workflow {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                        file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true)
                        ]
                input[1] = [ [ id:'genome' ],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                        ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert workflow.out.bam.get(0).get(1) ==~ ".*.bam"},
                { assert workflow.out.bai.get(0).get(1) ==~ ".*.bai"},
                { assert snapshot(workflow.out.stats).match("test_bam_sort_stats_samtools_paired_end_stats") },
                { assert snapshot(workflow.out.flagstat).match("test_bam_sort_stats_samtools_paired_end_flagstats") },
                { assert snapshot(workflow.out.idxstats).match("test_bam_sort_stats_samtools_paired_end_idxstats") }
            )
        }
    }
}
