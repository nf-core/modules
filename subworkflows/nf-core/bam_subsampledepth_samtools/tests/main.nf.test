nextflow_workflow {

    name "Test Subworkflow BAM_SUBSAMPLEDEPTH_SAMTOOLS"
    script "../main.nf"
    config "./nextflow.config"

    workflow "BAM_SUBSAMPLEDEPTH_SAMTOOLS"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/bam_subsampledepth_samtools"

    tag "samtools"
    tag "samtools/depth"
    tag "samtools/view"
    tag "gawk"

    test("Downsample to 4X and 2X") {
        when {
            workflow {
                """
                input[0] = Channel.fromList([
                    [
                        [id: "NA12878"],
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/hum_data/individuals/NA12878/NA12878.s.bam", checkIfExist:true),
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/hum_data/individuals/NA12878/NA12878.s.bam.bai", checkIfExist:true),
                    ],
                    [
                        [id: "NA19401"],
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/hum_data/individuals/NA19401/NA19401.s.bam", checkIfExist:true),
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/hum_data/individuals/NA19401/NA19401.s.bam.bai", checkIfExist:true),
                    ],
                ]). combine( Channel.of(2, 4))
                input[1] = Channel.of([
                    [id: "GRCh38"],
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/hum_data/reference_genome/GRCh38.s.fa.gz", checkIfExist:true),
                ]).collect()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out,
                    workflow.out.bam_subsampled.collect{ [it[0], bam(it[1]).getReads().size()] }
                ).match() }
            )
        }
    }
}
