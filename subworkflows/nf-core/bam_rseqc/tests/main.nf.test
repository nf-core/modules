nextflow_workflow {

    name "Test Workflow BAM_RSEQC"
    script "../main.nf"
    workflow "BAM_RSEQC"
    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/bam_rseqc"
    tag "bam_rseqc"
    tag "rseqc"
    tag "rseqc/bamstat"
    tag "rseqc/inferexperiment"
    tag "rseqc/innerdistance"
    tag "rseqc/junctionannotation"
    tag "rseqc/junctionsaturation"
    tag "rseqc/readdistribution"
    tag "rseqc/readduplication"
    tag "rseqc/tin"

    test("sarscov2 paired-end [bam]") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test' ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                            file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true)
                        ])
                input[1] = file(params.test_data['sarscov2']['genome']['test_bed12'], checkIfExists: true)
                input[2] = ['bam_stat', 'inner_distance', 'infer_experiment', 'junction_annotation', 'junction_saturation', 'read_distribution', 'read_duplication', 'tin']
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out.ch_bamstat).match("bamstat")},

                { assert snapshot(workflow.out.ch_innerdistance.findAll { it[1].endsWith('.pdf') == false }).match("inner_distance")},
                { assert workflow.out.ch_innerdistance.any { it[1].endsWith('.pdf') && file(it[1]).exists() } },

                { assert snapshot(workflow.out.ch_inferexperiment).match("inferexperiment")},

                { assert snapshot(workflow.out.ch_junctionannotation.findAll {
                    it[1].endsWith('.xls') == false &&
                    it[1].endsWith('.r') == false }).match("junction_annotation")},

                { assert snapshot(workflow.out.ch_junctionsaturation.findAll { it[1].endsWith('.pdf') == false }).match("junction_saturation")},
                { assert workflow.out.ch_junctionsaturation.any { it[1].endsWith('.pdf') && file(it[1]).exists() } },

                { assert snapshot(workflow.out.ch_readdistribution).match("readdistribution")},

                { assert snapshot(workflow.out.ch_readduplication.findAll { it[1].endsWith('.pdf') == false }).match("read_duplication")},
                { assert workflow.out.ch_readduplication.any { it[1].endsWith('.pdf') && file(it[1]).exists() } },

                { assert snapshot(workflow.out.ch_tin).match("tin")},
                { assert snapshot(workflow.out.versions).match("versions")},
            )
        }
    }

    test("sarscov2 paired-end [bam] no modules") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test' ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                            file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true)
                        ])
                input[1] = file(params.test_data['sarscov2']['genome']['test_bed12'], checkIfExists: true)
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.ch_bamstat.size() == 0 },
                { assert workflow.out.ch_innerdistance.size() == 0 },
                { assert workflow.out.ch_inferexperiment.size() == 0 },
                { assert workflow.out.ch_junctionannotation.size() == 0 },
                { assert workflow.out.ch_junctionsaturation.size() == 0 },
                { assert workflow.out.ch_readdistribution.size() == 0 },
                { assert workflow.out.ch_readduplication.size() == 0 },
                { assert workflow.out.ch_tin.size() == 0 },
                { assert workflow.out.versions.size() == 0 },
            )
        }
    }

}
