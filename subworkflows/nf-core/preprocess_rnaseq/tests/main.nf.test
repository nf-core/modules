// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core subworkflows test preprocess_rnaseq
nextflow_workflow {

    name "Test Subworkflow PREPROCESS_RNASEQ"
    script "../main.nf"
    workflow "PREPROCESS_RNASEQ"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/preprocess_rnaseq"
    
    // TODO nf-core: Add tags for all modules used within this subworkflow. Example:
    tag "samtools"
    tag "samtools/sort"
    tag "samtools/index"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("sarscov2 - bam - single_end") {

        when {
            workflow {
                """
                input[0] = Channel.of([ [ id:'test', single_end:false ], // meta map
                        [file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                        ]])
                input[1] = Channel.of(file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)) 
                input[2] = Channel.of(file(params.test_data['homo_sapiens']['genome']['transcriptome_fasta'], checkIfExists: true))
                input[3] = Channel.of(file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true))
                input[4] = false 
                input[5] = params.test_data['homo_sapiens']['genome']['index_salmon'] 
                input[6] = true
                input[7] = []
                input[8] = false
                input[9] = false
                input[10] = 'trimgalore'
                input[11] = 10
                input[12] = true
                input[13] = true
                input[14] = file('https://raw.githubusercontent.com/nf-core/rnaseq/master/assets/rrna-db-defaults.txt')
                input[15] = false
                input[16] = true
                input[17] = 0
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }
    }
}
