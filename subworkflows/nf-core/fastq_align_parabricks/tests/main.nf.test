nextflow_workflow {

    name "Test Subworkflow FASTQ_ALIGN_PARABRICKS"
    script "../main.nf"
    config "./nextflow.config"
    workflow "FASTQ_ALIGN_PARABRICKS"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastq_align_parabricks"
    tag "parabricks"
    tag "parabricks/fq2bam"
    tag "parabricks/applybqsr"

    test("fastq_align_parabricks_single_end") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                        [ id:'test', single_end:true ],
                        [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ]])
                input[1] = [] // interval file
                input[2] = Channel.value([
                        [id: 'reference'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                        ])
                input[3] = Channel.value([
                        [id: 'reference_index'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                        ])
                input[4] = Channel.value([
                        [id: 'known_sites'],
                        file(params.test_data['sarscov2']['illumina']['test_vcf_gz'], checkIfExists: true)
                        ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    // test("fastq_align_parabricks_paired_end") {

    //     when {
    //         workflow {
    //             """
    //             input[0] = Channel.of([[ id:'test', single_end:false ], [file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true), file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
    //          ] )
    //             input[1] = BWA_INDEX.out.index
    //             input[2] = false
    //             input[3] = Channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)])
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert workflow.success},
    //             { assert snapshot(workflow.out).match()}
    //         )
    //     }
    // }
}