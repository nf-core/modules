nextflow_workflow {

    name "Test Subworkflow FASTQ_ALIGN_DEDUP_BISMARK"
    script "../main.nf"
    workflow "FASTQ_ALIGN_DEDUP_BISMARK"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastq_align_dedup_bismark"
    tag "bismark/align"
    tag "samtools/sort"
    tag "samtools/index"
    tag "bismark/deduplicate"
    tag "bismark/methylationextractor"
    tag "bismark/coverage2cytosine"
    tag "bismark/report"
    tag "bismark/summary"

    setup {
        run("UNTAR") {
            script "../../../../modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = [
                    [:],
                    file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/Bowtie2_Index.tar.gz', checkIfExists: true)
                ]
                """
            }
        }
    }

    test("Params: bismark | default") {

        when {
            params {
                aligner              = "bismark"
                // Intermediate files
                save_reference       = false
                save_align_intermeds = false
                unmapped             = false
                // Library presets
                pbat                 = false
                rrbs                 = false
                slamseq              = false
                em_seq               = false
                single_cell          = false
                accel                = false
                cegx                 = false
                epignome             = false
                zymo                 = false
                // Bismark options
                nomeseq              = false
                cytosine_report      = false
                // Skipping options
                skip_deduplication   = false
            }

            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/SRR389222_sub1.fastq.gz', checkIfExists: true)
                ])
                input[1] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                input[2] = UNTAR.out.untar
                input[3] = params.skip_deduplication
                input[4] = params.cytosine_report
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.dedup.collect { bam(it[1]).getReadsMD5() },
                    workflow.out.versions
                    ).match() }
            )
        }
    }

    test("Params: bismark | cytosine_report") {

        when {
            params {
                aligner              = "bismark"
                // Intermediate files
                save_reference       = false
                save_align_intermeds = false
                unmapped             = false
                // Library presets
                pbat                 = false
                rrbs                 = false
                slamseq              = false
                em_seq               = false
                single_cell          = false
                accel                = false
                cegx                 = false
                epignome             = false
                zymo                 = false
                // Bismark options
                nomeseq              = false
                cytosine_report      = true
                // Skipping options
                skip_deduplication   = false
            }

            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/SRR389222_sub1.fastq.gz', checkIfExists: true)
                ])
                input[1] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                input[2] = UNTAR.out.untar
                input[3] = params.skip_deduplication
                input[4] = params.cytosine_report
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.dedup.collect { bam(it[1]).getReadsMD5() },
                    workflow.out.cytosine_report,
                    workflow.out.versions
                    ).match() }
            )
        }
    }
}
