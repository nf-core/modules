nextflow_workflow {

    name "Test Subworkflow FASTQ_ALIGN_DEDUP_BISMARK"
    script "../main.nf"
    workflow "FASTQ_ALIGN_DEDUP_BISMARK"
    config "./nextflow.config"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastq_align_dedup_bismark"
    tag "bismark/align"
    tag "samtools/sort"
    tag "samtools/index"
    tag "bismark/deduplicate"
    tag "bismark/methylationextractor"
    tag "bismark/coverage2cytosine"
    tag "bismark/report"
    tag "bismark/summary"
    tag "untar"

    setup {
        run("UNTAR", alias: "BOWTIE2") {
            script "../../../../modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = [
                    [:],
                    file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/Bowtie2_Index.tar.gz', checkIfExists: true)
                ]
                """
            }
        }

        run("UNTAR", alias: "HISAT2") {
            script "../../../../modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = [
                    [:],
                    file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/Hisat2_Index.tar.gz', checkIfExists: true)
                ]
                """
            }
        }
    }

    test("Params: bismark single-end | default") {

        when {
            params {
                aligner            = "bismark"
                cytosine_report    = false
                skip_deduplication = false
            }

            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/SRR389222_sub1.fastq.gz', checkIfExists: true)
                ])
                input[1] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                input[2] = BOWTIE2.out.untar
                input[3] = params.skip_deduplication
                input[4] = params.cytosine_report
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    workflow.out.bai.collect { meta, bai -> file(bai).name },
                    workflow.out.coverage2cytosine_coverage,
                    workflow.out.coverage2cytosine_report,
                    workflow.out.coverage2cytosine_summary,
                    workflow.out.methylation_bedgraph,
                    workflow.out.methylation_calls,
                    workflow.out.methylation_coverage,
                    workflow.out.methylation_report,
                    workflow.out.methylation_mbias,
                    workflow.out.bismark_report.collect { meta, report -> file(report).name },
                    workflow.out.bismark_summary[0][1],
                    workflow.out.multiqc.flatten().collect { path -> file(path).name },
                    workflow.out.versions
                    ).match() }
            )
        }
    }

    test("Params: bismark paired-end | default") {

        when {
            params {
                aligner            = "bismark"
                cytosine_report    = false
                skip_deduplication = false
            }

            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/Ecoli_10K_methylated_R1.fastq.gz', checkIfExists: true),
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/Ecoli_10K_methylated_R2.fastq.gz', checkIfExists: true)
                ])
                input[1] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                input[2] = BOWTIE2.out.untar
                input[3] = params.skip_deduplication
                input[4] = params.cytosine_report
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    workflow.out.bai.collect { meta, bai -> file(bai).name },
                    workflow.out.coverage2cytosine_coverage,
                    workflow.out.coverage2cytosine_report,
                    workflow.out.coverage2cytosine_summary,
                    workflow.out.methylation_bedgraph,
                    workflow.out.methylation_calls,
                    workflow.out.methylation_coverage,
                    workflow.out.methylation_report,
                    workflow.out.methylation_mbias,
                    workflow.out.bismark_report.collect { meta, report -> file(report).name },
                    workflow.out.bismark_summary[0][1],
                    workflow.out.multiqc.flatten().collect { path -> file(path).name },
                    workflow.out.versions
                    ).match() }
            )
        }
    }

    test("Params: bismark paired-end | skip_deduplication") {

        when {
            params {
                aligner            = "bismark"
                skip_deduplication = true
            }

            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/Ecoli_10K_methylated_R1.fastq.gz', checkIfExists: true),
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/Ecoli_10K_methylated_R2.fastq.gz', checkIfExists: true)
                ])
                input[1] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                input[2] = BOWTIE2.out.untar
                input[3] = params.skip_deduplication
                input[4] = params.cytosine_report
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    workflow.out.bai.collect { meta, bai -> file(bai).name },
                    workflow.out.coverage2cytosine_coverage,
                    workflow.out.coverage2cytosine_report,
                    workflow.out.coverage2cytosine_summary,
                    workflow.out.methylation_bedgraph,
                    workflow.out.methylation_calls,
                    workflow.out.methylation_coverage,
                    workflow.out.methylation_report,
                    workflow.out.methylation_mbias,
                    workflow.out.bismark_report.collect { meta, report -> file(report).name },
                    workflow.out.bismark_summary[0][1],
                    workflow.out.multiqc.flatten().collect { path -> file(path).name },
                    workflow.out.versions
                    ).match() }
            )
        }
    }

    test("Params: bismark paired-end | cytosine_report") {

        when {
            params {
                aligner         = "bismark"
                cytosine_report = true
            }

            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/Ecoli_10K_methylated_R1.fastq.gz', checkIfExists: true),
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/Ecoli_10K_methylated_R2.fastq.gz', checkIfExists: true)
                ])
                input[1] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                input[2] = BOWTIE2.out.untar
                input[3] = params.skip_deduplication
                input[4] = params.cytosine_report
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    workflow.out.bai.collect { meta, bai -> file(bai).name },
                    workflow.out.coverage2cytosine_coverage,
                    workflow.out.coverage2cytosine_report,
                    workflow.out.coverage2cytosine_summary,
                    workflow.out.methylation_bedgraph,
                    workflow.out.methylation_calls,
                    workflow.out.methylation_coverage,
                    workflow.out.methylation_report,
                    workflow.out.methylation_mbias,
                    workflow.out.bismark_report.collect { meta, report -> file(report).name },
                    workflow.out.bismark_summary[0][1],
                    workflow.out.multiqc.flatten().collect { path -> file(path).name },
                    workflow.out.versions
                    ).match() }
            )
        }
    }

    test("Params: bismark_hisat single-end | default") {

        when {
            params {
                aligner            = "bismark_hisat"
                cytosine_report    = false
                skip_deduplication = false
            }

            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/SRR389222_sub1.fastq.gz', checkIfExists: true)
                ])
                input[1] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                input[2] = HISAT2.out.untar
                input[3] = params.skip_deduplication
                input[4] = params.cytosine_report
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    workflow.out.bai.collect { meta, bai -> file(bai).name },
                    workflow.out.coverage2cytosine_coverage,
                    workflow.out.coverage2cytosine_report,
                    workflow.out.coverage2cytosine_summary,
                    workflow.out.methylation_bedgraph,
                    workflow.out.methylation_calls,
                    workflow.out.methylation_coverage,
                    workflow.out.methylation_report,
                    workflow.out.methylation_mbias,
                    workflow.out.bismark_report.collect { meta, report -> file(report).name },
                    workflow.out.bismark_summary[0][1],
                    workflow.out.multiqc.flatten().collect { path -> file(path).name },
                    workflow.out.versions
                    ).match() }
            )
        }
    }

    test("Params: bismark_hisat paired-end | default") {

        when {
            params {
                aligner            = "bismark_hisat"
                cytosine_report    = false
                skip_deduplication = false
            }

            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/Ecoli_10K_methylated_R1.fastq.gz', checkIfExists: true),
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/Ecoli_10K_methylated_R2.fastq.gz', checkIfExists: true)
                ])
                input[1] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                input[2] = HISAT2.out.untar
                input[3] = params.skip_deduplication
                input[4] = params.cytosine_report
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    workflow.out.bai.collect { meta, bai -> file(bai).name },
                    workflow.out.coverage2cytosine_coverage,
                    workflow.out.coverage2cytosine_report,
                    workflow.out.coverage2cytosine_summary,
                    workflow.out.methylation_bedgraph,
                    workflow.out.methylation_calls,
                    workflow.out.methylation_coverage,
                    workflow.out.methylation_report,
                    workflow.out.methylation_mbias,
                    workflow.out.bismark_report.collect { meta, report -> file(report).name },
                    workflow.out.bismark_summary[0][1],
                    workflow.out.multiqc.flatten().collect { path -> file(path).name },
                    workflow.out.versions
                    ).match() }
            )
        }
    }

    test("Params: bismark_hisat paired-end | skip_deduplication") {

        when {
            params {
                aligner            = "bismark_hisat"
                skip_deduplication = true
            }

            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/Ecoli_10K_methylated_R1.fastq.gz', checkIfExists: true),
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/Ecoli_10K_methylated_R2.fastq.gz', checkIfExists: true)
                ])
                input[1] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                input[2] = HISAT2.out.untar
                input[3] = params.skip_deduplication
                input[4] = params.cytosine_report
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    workflow.out.bai.collect { meta, bai -> file(bai).name },
                    workflow.out.coverage2cytosine_coverage,
                    workflow.out.coverage2cytosine_report,
                    workflow.out.coverage2cytosine_summary,
                    workflow.out.methylation_bedgraph,
                    workflow.out.methylation_calls,
                    workflow.out.methylation_coverage,
                    workflow.out.methylation_report,
                    workflow.out.methylation_mbias,
                    workflow.out.bismark_report.collect { meta, report -> file(report).name },
                    workflow.out.bismark_summary[0][1],
                    workflow.out.multiqc.flatten().collect { path -> file(path).name },
                    workflow.out.versions
                    ).match() }
            )
        }
    }

    test("Params: bismark_hisat paired-end | cytosine_report") {

        when {
            params {
                aligner            = "bismark_hisat"
                cytosine_report    = true
            }

            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/Ecoli_10K_methylated_R1.fastq.gz', checkIfExists: true),
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/Ecoli_10K_methylated_R2.fastq.gz', checkIfExists: true)
                ])
                input[1] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                input[2] = HISAT2.out.untar
                input[3] = params.skip_deduplication
                input[4] = params.cytosine_report
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    workflow.out.bai.collect { meta, bai -> file(bai).name },
                    workflow.out.coverage2cytosine_coverage,
                    workflow.out.coverage2cytosine_report,
                    workflow.out.coverage2cytosine_summary,
                    workflow.out.methylation_bedgraph,
                    workflow.out.methylation_calls,
                    workflow.out.methylation_coverage,
                    workflow.out.methylation_report,
                    workflow.out.methylation_mbias,
                    workflow.out.bismark_report.collect { meta, report -> file(report).name },
                    workflow.out.bismark_summary[0][1],
                    workflow.out.multiqc.flatten().collect { path -> file(path).name },
                    workflow.out.versions
                    ).match() }
            )
        }
    }
}
