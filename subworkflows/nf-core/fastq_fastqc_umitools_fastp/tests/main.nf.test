nextflow_workflow {

    name "Test Workflow FASTQ_FASTQC_UMITOOLS_FASTP"
    script "../main.nf"
    workflow "FASTQ_FASTQC_UMITOOLS_FASTP"
    config './nextflow.config'

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastq_fastqc_umitools_fastp"
    tag "fastq_fastqc_umitools_fastp"
    tag "fastqc"
    tag "umitools/extract"
    tag "fastp"


    test("sarscov2 paired-end [fastq]") {

        when {
            params {
                skip_fastqc       = false
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastqc_raw_html },
                { assert workflow.out.fastqc_raw_zip },
                { assert workflow.out.fastqc_trim_html },
                { assert workflow.out.fastqc_trim_zip },
                { assert workflow.out.trim_html },
                { assert workflow.out.trim_log },
                { assert snapshot(
                        workflow.out.adapter_seq,
                        workflow.out.reads,
                        workflow.out.trim_json,
                        workflow.out.trim_read_count,
                        workflow.out.trim_reads_fail,
                        workflow.out.trim_reads_merged,
                        workflow.out.umi_log,
                        workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | skip_fastqc") {

        when {
            params {
                skip_fastqc       = true
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end: false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.trim_html },
                { assert workflow.out.trim_log },
                { assert !workflow.out.fastqc_raw_html },
                { assert !workflow.out.fastqc_raw_zip },
                { assert !workflow.out.fastqc_trim_html },
                { assert !workflow.out.fastqc_trim_zip },
                { assert snapshot(
                        workflow.out.adapter_seq,
                        workflow.out.reads,
                        workflow.out.trim_json,
                        workflow.out.trim_read_count,
                        workflow.out.trim_reads_fail,
                        workflow.out.trim_reads_merged,
                        workflow.out.umi_log,
                        workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | with_umi") {

        when {
            params {
                skip_fastqc       = false
                with_umi          = true
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastqc_raw_html },
                { assert workflow.out.fastqc_raw_zip },
                { assert workflow.out.fastqc_trim_html },
                { assert workflow.out.fastqc_trim_zip },
                { assert workflow.out.trim_html },
                { assert workflow.out.trim_log },
                { assert snapshot(
                        workflow.out.adapter_seq,
                        workflow.out.reads,
                        workflow.out.trim_json,
                        workflow.out.trim_read_count,
                        workflow.out.trim_reads_fail,
                        workflow.out.trim_reads_merged,
                        workflow.out.versions
                    ).match()
                }
            )
        }
    }


    test("sarscov2 paired-end [fastq] | skip_umi_extract") {

        when {
            params {
                skip_fastqc       = false
                with_umi          = true
                skip_umi_extract  = true
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastqc_raw_html },
                { assert workflow.out.fastqc_raw_zip },
                { assert workflow.out.fastqc_trim_html },
                { assert workflow.out.fastqc_trim_zip },
                { assert workflow.out.trim_html },
                { assert workflow.out.trim_log },
                { assert snapshot(
                        workflow.out.adapter_seq,
                        workflow.out.reads,
                        workflow.out.trim_json,
                        workflow.out.trim_read_count,
                        workflow.out.trim_reads_fail,
                        workflow.out.trim_reads_merged,
                        workflow.out.umi_log,
                        workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | umi_discard_read = 2") {

        when {
            params {
                skip_fastqc       = false
                with_umi          = true
                skip_umi_extract  = true
                umi_discard_read  = 2
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastqc_raw_html },
                { assert workflow.out.fastqc_raw_zip },
                { assert workflow.out.fastqc_trim_html },
                { assert workflow.out.fastqc_trim_zip },
                { assert workflow.out.trim_html },
                { assert workflow.out.trim_log },
                { assert snapshot(
                        workflow.out.adapter_seq,
                        workflow.out.reads,
                        workflow.out.trim_json,
                        workflow.out.trim_read_count,
                        workflow.out.trim_reads_fail,
                        workflow.out.trim_reads_merged,
                        workflow.out.umi_log,
                        workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | skip_trimming") {

        when {
            params {
                skip_fastqc       = false
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = true
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastqc_raw_html },
                { assert workflow.out.fastqc_raw_zip },
                { assert !workflow.out.fastqc_trim_html },
                { assert !workflow.out.fastqc_trim_zip },
                { assert !workflow.out.trim_html },
                { assert !workflow.out.trim_log },
                { assert snapshot(
                        // If we skip trimming then input is output, so not snapshotting
                        workflow.out.adapter_seq,
                        workflow.out.reads.get(0).get(0), // Reads meta map
                        workflow.out.trim_json,
                        workflow.out.trim_read_count,
                        workflow.out.trim_reads_fail,
                        workflow.out.trim_reads_merged,
                        workflow.out.umi_log,
                        workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | save_trimmed_fail") {

        when {
            params {
                skip_fastqc       = false
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = true
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = "-e 30"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastqc_raw_html },
                { assert workflow.out.fastqc_raw_zip },
                { assert workflow.out.fastqc_trim_html },
                { assert workflow.out.fastqc_trim_zip },
                { assert workflow.out.trim_html },
                { assert workflow.out.trim_log },
                { assert snapshot(
                        workflow.out.adapter_seq,
                        workflow.out.reads,
                        workflow.out.trim_json,
                        workflow.out.trim_read_count,
                        workflow.out.trim_reads_fail,
                        workflow.out.trim_reads_merged,
                        workflow.out.umi_log,
                        workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | save_merged") {

        when {
            params {
                skip_fastqc       = false
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = true
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastqc_raw_html },
                { assert workflow.out.fastqc_raw_zip },
                { assert workflow.out.fastqc_trim_html },
                { assert workflow.out.fastqc_trim_zip },
                { assert workflow.out.trim_html },
                { assert workflow.out.trim_log },
                { assert snapshot(
                        workflow.out.adapter_seq,
                        workflow.out.reads,
                        workflow.out.trim_json,
                        workflow.out.trim_read_count,
                        workflow.out.trim_reads_fail,
                        workflow.out.trim_reads_merged,
                        workflow.out.umi_log,
                        workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | min_trimmed_reads = 26") {
        // Subworkflow should stop after FASTP which trims down to 25 reads

        when {
            params {
                skip_fastqc       = false
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = true
                min_trimmed_reads = 26
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastqc_raw_html },
                { assert workflow.out.fastqc_raw_zip },
                { assert workflow.out.fastqc_trim_html },
                { assert workflow.out.fastqc_trim_zip },
                { assert workflow.out.trim_html },
                { assert workflow.out.trim_log },
                { assert snapshot(
                        workflow.out.adapter_seq,
                        workflow.out.reads,
                        workflow.out.trim_json,
                        workflow.out.trim_read_count,
                        workflow.out.trim_reads_fail,
                        workflow.out.trim_reads_merged,
                        workflow.out.umi_log,
                        workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 paired-end [fastq] - stub") {
        options '-stub-run'

        when {
            params {
                skip_fastqc       = false
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | skip_fastqc - stub") {
        options "-stub-run"

        when {
            params {
                skip_fastqc       = true
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end: false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | with_umi - stub") {
        options "-stub-run"

        when {
            params {
                skip_fastqc       = false
                with_umi          = true
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }


    test("sarscov2 paired-end [fastq] | skip_umi_extract - stub") {
        options "-stub-run"

        when {
            params {
                skip_fastqc       = false
                with_umi          = true
                skip_umi_extract  = true
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | umi_discard_read = 2 - stub") {
        options "-stub-run"

        when {
            params {
                skip_fastqc       = false
                with_umi          = true
                skip_umi_extract  = true
                umi_discard_read  = 2
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | skip_trimming - stub") {
        options "-stub-run"

        when {
            params {
                skip_fastqc       = false
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = true
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.adapter_seq,
                    workflow.out.fastqc_raw_html,
                    workflow.out.fastqc_raw_zip,
                    workflow.out.fastqc_trim_html,
                    workflow.out.fastqc_trim_zip,
                    workflow.out.trim_html,
                    workflow.out.trim_json,
                    workflow.out.trim_log,
                    workflow.out.trim_read_count,
                    workflow.out.trim_reads_fail,
                    workflow.out.trim_reads_merged,
                    workflow.out.umi_log,
                    workflow.out.versions).match() }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | save_trimmed_fail - stub") {
        options "-stub-run"

        when {
            params {
                skip_fastqc       = false
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = true
                save_merged       = false
                min_trimmed_reads = 1
                fastp_args        = "-e 30"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | save_merged - stub") {
        options "-stub-run"

        when {
            params {
                skip_fastqc       = false
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = true
                min_trimmed_reads = 1
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("sarscov2 paired-end [fastq] | min_trimmed_reads = 26 - stub") {
        // Subworkflow should stop after FASTP which trims down to 25 reads
        options "-stub-run"

        when {
            params {
                skip_fastqc       = false
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = true
                min_trimmed_reads = 26
                fastp_args        = ""
            }
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = params.skip_fastqc
                input[2] = params.with_umi
                input[3] = params.skip_umi_extract
                input[4] = params.umi_discard_read
                input[5] = params.skip_trimming
                input[6] = params.adapter_fasta
                input[7] = params.save_trimmed_fail
                input[8] = params.save_merged
                input[9] = params.min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }
}
