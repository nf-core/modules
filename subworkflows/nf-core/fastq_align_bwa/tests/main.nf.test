nextflow_workflow {

    name "Test Subworkflow FASTQ_ALIGN_BWA"
    script "../main.nf"
    config "./nextflow.config"
    workflow "FASTQ_ALIGN_BWA"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastq_align_bwa"
    tag "subworkflows/bam_sort_stats_samtools"
    tag "bwa"
    tag "bwa/mem"
    tag "bwa/index"


    test("fastq_align_bwa_single_end") {
        setup {
            run("BWA_INDEX") {
                script "../../../../modules/nf-core/bwa/index/main.nf"
                process {
                    """
                    input[0] = Channel.value([ [ id:'genome' ],file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)])
                    """
                }
            }
        }
        when {
            workflow {
                """
                input[0] = Channel.of([[ id:'test', single_end:true ],[ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ]])
                input[1] = BWA_INDEX.out.index
                input[2] = false
                input[3] = Channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    test("fastq_align_bwa_paired_end") {
        setup {
            run("BWA_INDEX") {
                script "../../../../modules/nf-core/bwa/index/main.nf"
                process {
                    """
                    input[0] = Channel.value([ [ id:'genome' ],file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)])
                    """
                }
            }
        }
        when {
            workflow {
                """
                input[0] = Channel.of([[ id:'test', single_end:false ], [file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true), file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
             ] )
                input[1] = BWA_INDEX.out.index
                input[2] = false
                input[3] = Channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }
}
