nextflow_workflow {

    name "Test Workflow BAM_MARKDUPLICATES_PICARD"
    script "../main.nf"
    workflow "BAM_MARKDUPLICATES_PICARD"

    tag "picard"
    tag "picard/markduplicates"
    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "bam_markduplicates_picard"
    tag "subworkflows/bam_markduplicates_picard"
    tag "subworkflows/bam_stats_samtools"
    tag "bam_stats_samtools"
    tag "samtools"
    tag "samtools/flagstat"
    tag "samtools/idxstats"
    tag "samtools/index"
    tag "samtools/stats"
    
    test("homo_sapiens - bam") {

        when {
            workflow {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true)
                ]
                input[1] = [ 
                    [ id:'genome' ],
                    file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[2] = [ 
                    [ id:'genome' ],
                    file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    path(workflow.out.bam[0][1]),
                    path(workflow.out.bai[0][1]),
                    path(workflow.out.flagstat[0][1]),
                    path(workflow.out.idxstats[0][1]),
                    path(workflow.out.stats[0][1]),
                ).match("homo_sapiens - bam")  },
                { assert path(workflow.out.metrics.get(0).get(1)).getText().contains("97") }
            )
        }
    }

    test("homo_sapiens - cram") {

        when {
            workflow {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true)
                ]
                input[1] = [ [ id:'genome' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[2]   = [ 
                    [ id:'genome' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    path(workflow.out.bam[0][1]),
                    path(workflow.out.bai[0][1]),
                    path(workflow.out.flagstat[0][1]),
                    path(workflow.out.idxstats[0][1]),
                    path(workflow.out.stats[0][1]),
                ).match("homo_sapiens - cram")  },
                { assert path(workflow.out.metrics.get(0).get(1)).getText().contains("0.999986") }
            )
        }
    }

}
