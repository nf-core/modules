nextflow_workflow {

    name "Test Subworkflow FASTQ_ALIGN_STAR"
    script "../main.nf"
    workflow "FASTQ_ALIGN_STAR"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastq_align_star"
    tag "star/align"
    tag "star/genomegenerate"
    tag "rsem/preparereference"
    tag "subworkflows/bam_sort_stats_samtools"
       
    setup {
        run("STAR_GENOMEGENERATE") {
            script "../../../../modules/nf-core/star/genomegenerate/main.nf"
            process {
                """
                input[0] = [
                     [ id:'test_fasta' ], // meta map
                     [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                ]
                input[1] = [
                     [ id:'test_gtf' ], // meta map
                     [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]
                ]
                """
            }
        }
    }

    test("homo_sapiens - fastq - single_end") {
       config "./nextflow.config"
        when {
            workflow {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ], // meta map
                    [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]
                ])
                input[3] = true       // star_ignore_sjdbgtf
                input[4] = 'illumina' // seq_platform
                input[5] = false      // seq_center
                input[6] = Channel.of([
                    [ id:'test_fasta' ], // meta map
                    [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                ])
                input[7] = []
                input[8] = true // val_build_transcripts  
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out.orig_bam).match('orig_bam_single_end')},
                { assert snapshot(workflow.out.bam_sorted).match('bam_sorted_single_end')},
                { assert snapshot(workflow.out.fastq).match('fastq_single_end')},
                { assert snapshot(workflow.out.tab).match('tab_single_end')},
                { assert snapshot(workflow.out.orig_bam_transcript).match('orig_bam_transcript_single_end')},
                { assert snapshot(workflow.out.bam).match('bam_single_end')},
                { assert snapshot(workflow.out.bai).match('bai_single_end')},
                { assert snapshot(workflow.out.stats).match('stats_single_end')},
                { assert snapshot(workflow.out.flagstat).match('flagstat_single_end')},
                { assert snapshot(workflow.out.idxstats).match('idxstats_single_end')},
                { assert snapshot(workflow.out.bam_transcript).match('bam_transcript_single_end')},
                { assert snapshot(workflow.out.bai_transcript).match('bai_transcript_single_end')},
                { assert snapshot(workflow.out.stats_transcript).match('stats_transcript_single_end')},
                { assert snapshot(workflow.out.flagstat_transcript).match('flagstat_transcript_single_end')},
                { assert snapshot(workflow.out.idxstats_transcript).match('idxstats_transcript_single_end')},
                { assert path(workflow.out.tab.get(0).get(1)).exists() },
                { assert path(workflow.out.log_out.get(0).get(1)).exists() },
                { assert path(workflow.out.log_final.get(0).get(1)).exists() },
                { assert path(workflow.out.log_progress.get(0).get(1)).exists() }
            )
        }
    }

    test("homo_sapiens - fastq - paired_end") {
        config "./nextflow.config"

        when {
            workflow {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ], // meta map
                    [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]
                ])
                input[3] = true       // star_ignore_sjdbgtf
                input[4] = 'illumina' // seq_platform
                input[5] = false      // seq_center
                input[6] = Channel.of([
                    [ id:'test_fasta' ], // meta map
                    [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                ])
                input[7] = []
                input[8] = true // val_build_transcripts  
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out.orig_bam).match('orig_bam_paired_end')},
                { assert snapshot(workflow.out.bam_sorted).match('bam_sorted_paired_end')},
                { assert snapshot(workflow.out.fastq).match('fastq_paired_end')},
                { assert snapshot(workflow.out.orig_bam_transcript).match('orig_bam_transcript_paired_end')},
                { assert snapshot(workflow.out.bam).match('bam_paired_end')},
                { assert snapshot(workflow.out.bai).match('bai_paired_end')},
                { assert snapshot(workflow.out.stats).match('stats_paired_end')},
                { assert snapshot(workflow.out.flagstat).match('flagstat_paired_end')},
                { assert snapshot(workflow.out.idxstats).match('idxstats_paired_end')},
                { assert snapshot(workflow.out.bam_transcript).match('bam_transcript_paired_end')},
                { assert snapshot(workflow.out.bai_transcript).match('bai_transcript_paired_end')},
                { assert snapshot(workflow.out.stats_transcript).match('stats_transcript_paired_end')},
                { assert snapshot(workflow.out.flagstat_transcript).match('flagstat_transcript_paired_end')},
                { assert snapshot(workflow.out.idxstats_transcript).match('idxstats_transcript_paired_end')},
                { assert snapshot(workflow.out.idxstats_transcript).match('versions_paired_end')},
                { assert path(workflow.out.tab.get(0).get(1)).exists() },
                { assert path(workflow.out.log_out.get(0).get(1)).exists() },
                { assert path(workflow.out.log_final.get(0).get(1)).exists() },
                { assert path(workflow.out.log_progress.get(0).get(1)).exists() }
            )
        }
    }

    test("homo_sapiens - fastq - paired_end - transcripts") {
        config "./with_transcripts.config"

        when {
            workflow {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ], // meta map
                    [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]
                ])
                input[3] = true       // star_ignore_sjdbgtf
                input[4] = 'illumina' // seq_platform
                input[5] = false      // seq_center
                input[6] = Channel.of([
                    [ id:'test_fasta' ], // meta map
                    [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                ])
                input[7] = []
                input[8] = true // val_build_transcripts  
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out.orig_bam).match('orig_bam_paired_end_transcripts')},
                { assert snapshot(workflow.out.bam_sorted).match('bam_sorted_paired_end_transcripts')},
                { assert snapshot(workflow.out.fastq).match('fastq_paired_end_transcripts')},
                { assert snapshot(workflow.out.orig_bam_transcript).match('orig_bam_transcript_paired_end_transcripts')},
                { assert snapshot(workflow.out.bam).match('bam_paired_end_transcripts')},
                { assert snapshot(workflow.out.bai).match('bai_paired_end_transcripts')},
                { assert snapshot(workflow.out.stats).match('stats_paired_end_transcripts')},
                { assert snapshot(workflow.out.flagstat).match('flagstat_paired_end_transcripts')},
                { assert snapshot(workflow.out.idxstats).match('idxstats_paired_end_transcripts')},
                { assert snapshot(workflow.out.bam_transcript).match('bam_transcript_paired_end_transcripts')},
                { assert snapshot(workflow.out.bai_transcript).match('bai_transcript_paired_end_transcripts')},
                { assert snapshot(workflow.out.stats_transcript).match('stats_transcript_paired_end_transcripts')},
                { assert snapshot(workflow.out.flagstat_transcript).match('flagstat_transcript_paired_end_transcripts')},
                { assert snapshot(workflow.out.idxstats_transcript).match('idxstats_transcript_paired_end_transcripts')},
                { assert snapshot(workflow.out.idxstats_transcript).match('versions_paired_end_transcripts')},
                { assert path(workflow.out.tab.get(0).get(1)).exists() },
                { assert path(workflow.out.log_out.get(0).get(1)).exists() },
                { assert path(workflow.out.log_final.get(0).get(1)).exists() },
                { assert path(workflow.out.log_progress.get(0).get(1)).exists() }
            )
        }
    }

    test("homo_sapiens - fastq - paired_end - premade_transcripts") {
        config "./with_transcripts.config"

        setup {
            run("RSEM_PREPAREREFERENCE") {
                script "../../../../modules/nf-core/rsem/preparereference/main.nf"
                process {
                    """
                    input[0] = Channel.of(file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true))
                    input[1] = Channel.of(file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true))
                    """
                }
            }
        }
        when {
            workflow {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ], // meta map
                    [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]
                ])
                input[3] = true       // star_ignore_sjdbgtf
                input[4] = 'illumina' // seq_platform
                input[5] = false      // seq_center
                input[6] = Channel.of([
                    [ id:'test_fasta' ], // meta map
                    [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                ])
                input[7] = RSEM_PREPAREREFERENCE.out.transcript_fasta
                input[8] = false // val_build_transcripts  
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out.orig_bam).match('orig_bam_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.bam_sorted).match('bam_sorted_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.fastq).match('fastq_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.orig_bam_transcript).match('orig_bam_transcript_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.bam).match('bam_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.bai).match('bai_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.stats).match('stats_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.flagstat).match('flagstat_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.idxstats).match('idxstats_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.bam_transcript).match('bam_transcript_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.bai_transcript).match('bai_transcript_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.stats_transcript).match('stats_transcript_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.flagstat_transcript).match('flagstat_transcript_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.idxstats_transcript).match('idxstats_transcript_paired_end_premade_transcripts')},
                { assert snapshot(workflow.out.idxstats_transcript).match('versions_paired_end_premade_transcripts')},
                { assert path(workflow.out.tab.get(0).get(1)).exists() },
                { assert path(workflow.out.log_out.get(0).get(1)).exists() },
                { assert path(workflow.out.log_final.get(0).get(1)).exists() },
                { assert path(workflow.out.log_progress.get(0).get(1)).exists() }
            )
        }
    }
}
