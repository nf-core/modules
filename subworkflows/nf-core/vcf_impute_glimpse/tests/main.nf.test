nextflow_workflow {

    name "Test Workflow VCF_IMPUTE_GLIMPSE"
    script "../main.nf"
    workflow "VCF_IMPUTE_GLIMPSE"
    tag "glimpse"
    tag "glimpse/chunk"
    tag "glimpse/phase"
    tag "glimpse/ligate"
    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "vcf_impute_glimpse"

    test("Should run without failures") {
        config "./nextflow.config"

        when {
            params {
                outdir = "tests/results"
            }
            workflow {
                """
                samples_infos = Channel.of('NA12878 2').collectFile(name: 'sampleinfos.txt')

                ch_panel = Channel.fromList([
                    [[ ref:'ref_panel'],
                    file("https://github.com/nf-core/test-datasets/raw/imputation/data/panel/both/1000GP.chr21_22.noNA12878.s.bcf",
                        checkIfExists: true),
                    file("https://github.com/nf-core/test-datasets/raw/imputation/data/panel/both/1000GP.chr21_22.noNA12878.s.bcf.csi",
                        checkIfExists: true)],
                    [[ ref:'ref_panel2'],
                    file("https://github.com/nf-core/test-datasets/raw/imputation/data/panel/both/1000GP.chr21_22.noNA12878.s.bcf",
                        checkIfExists: true),
                    file("https://github.com/nf-core/test-datasets/raw/imputation/data/panel/both/1000GP.chr21_22.noNA12878.s.bcf.csi",
                        checkIfExists: true)]
                ])
                region = Channel.fromList([
                    [[chr: "chr21", region: "chr21:16600000-16800000"], "chr21:16600000-16800000"],
                    [[chr: "chr22", region: "chr22:16600000-16800000"], "chr22:16600000-16800000"]
                ])

                input_vcf = Channel.fromList([
                    [[ id:'input'], // meta map
                    file("https://github.com/nf-core/test-datasets/raw/imputation/data/NA12878/both/NA12878.chr21_22.s.1x.vcf.gz", checkIfExists: true),
                    file("https://github.com/nf-core/test-datasets/raw/imputation/data/NA12878/both/NA12878.chr21_22.s.1x.vcf.gz.csi", checkIfExists: true),
                    ],
                    [[ id:'input2'], // meta map
                    file("https://github.com/nf-core/test-datasets/raw/imputation/data/NA12878/both/NA12878.chr21_22.s.1x.vcf.gz", checkIfExists: true),
                    file("https://github.com/nf-core/test-datasets/raw/imputation/data/NA12878/both/NA12878.chr21_22.s.1x.vcf.gz.csi", checkIfExists: true),
                    ]
                ])
                input_vcf_multiple = input_vcf
                    .combine( samples_infos )
                    .combine( region )
                    .map{ metaI, vcf, index, sample, metaCR, region ->
                        [metaI + metaCR, vcf, index, sample, region ]
                    }

                ch_map = Channel.fromList([
                    [[ chr: "chr21"],
                        file("https://github.com/nf-core/test-datasets/raw/imputation/data/genetic_maps.b38/chr21.b38.gmap.gz", checkIfExists: true)
                    ],
                    [[ chr: "chr22"],
                        file("https://github.com/nf-core/test-datasets/raw/imputation/data/genetic_maps.b38/chr22.b38.gmap.gz", checkIfExists: true)
                    ]
                ])

                // Combine input and map depending on chromosome name
                ch_input_map = input_vcf_multiple
                    .map{ metaIRC, vcf, index, sample, region ->
                        [metaIRC.subMap(["chr"]), metaIRC, vcf, index, sample, region]
                    }
                    .combine(ch_map, by: 0)
                    .map{ metaC, metaIRC, vcf, index, sample, region, map ->
                        [metaIRC, vcf, index, sample, region, map] }

                // Combine input and map to reference panel could also be done by chromosome
                input[0] = ch_input_map
                    .combine(ch_panel)
                    .map{ metaIRC, vcf, index, sample, region, map, metaP, ref, ref_index ->
                        [ metaIRC + metaP, vcf, index, sample, region, ref, ref_index, map ]
                    }
                """
            }
        }

        then {
            println(workflow.out.merged_variants)
            String targetFileName = "input_chr21_ref_panel2_ligate.vcf.gz"
            File selectedFile = workflow.out.merged_variants.stream()
                .filter(vector -> vector.size() > 1)
                .map(vector -> new File(vector.get(1).toString()))
                .filter(file -> file.getName().equals(targetFileName))
                .findFirst()
                .orElse(null)
            String selectedFilename = selectedFile != null ? selectedFile.getPath() : null
            def lines = path(selectedFilename).linesGzip.last()
            print(lines)
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.versions).match("versions") },
                { assert snapshot(workflow.out.chunk_chr).match("chunk_chr") },
                { assert workflow.out.merged_variants.size() == 8},
                { assert snapshot(lines).match("merged") }
            )
        }

    }

}
