nextflow_workflow {

    name "Test Workflow NEXTFLOW_PIPELINE_UTILS"
    script "../main.nf"
    config "subworkflows/nf-core/nextflowpipelineutils/tests/nextflow.config"
    workflow "NEXTFLOW_PIPELINE_UTILS"
    tag 'subworkflows'
    tag 'nextflowpipelineutils'
    tag 'subworkflows/nextflowpipelineutils'

    test("Should run no inputs") {

        when {
            params {
                outdir = "tests/results"
            }
            workflow {
                """
                input[0] = false
                input[1] = false
                input[2] = null
                input[3] = false
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

    test("Should print version") {

        when {
            params {
                outdir = "tests/results"
            }
            workflow {
                """
                input[0] = true
                input[1] = false
                input[2] = null
                input[3] = false
                """
            }
        }

        then {
            assert workflow.success
            assert workflow.stdout.contains("nextflow_workflow v9.9.9")
        }

    }


    test("Should dump params") {

        when {
            params {
                outdir = "$outputDir"
            }
            workflow {
                """
                input[0] = false
                input[1] = true
                input[2] = params.outdir
                input[3] = false
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

    test("Should not create params JSON if no output directory") {

        when {
            params {
                outdir = "$outputDir"
            }
            workflow {
                """
                input[0] = false
                input[1] = true
                input[2] = null
                input[3] = false
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out, path(params.outdir).list()).match()
        }

    }

}
