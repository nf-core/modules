nextflow_workflow {

    name "Test Subworkflow VCF_ANNOTATE_ENSEMBLVEP_SNPEFF"
    script "../main.nf"
    workflow "VCF_ANNOTATE_ENSEMBLVEP_SNPEFF"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/vcf_annotate_ensemblvep_snpeff"
    tag "ensemblvep/vep"
    tag "snpeff/snpeff"
    tag "tabix/tabix"
    tag "tabix/bgzip"
    tag "bcftools/pluginscatter"
    tag "bcftools/concat"
    tag "bcftools/sort"

    config "./nextflow.config"

    test("sarscov2 - ensemblvep") {

        when {
            workflow {
                """
                vep_cache = Channel.of(file('s3://annotation-cache/vep_cache/113_WBcel235/')).collect()

                input[0] = Channel.of([
                    [ id:'custom_test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true)
                    ]
                ])
                input[1] = [[],[]]
                input[2] = "WBcel235"
                input[3] = "caenorhabditis_elegans"
                input[4] = "113"
                input[5] = vep_cache
                input[6] = []
                input[7] = []
                input[8] = []
                input[9] = ["ensemblvep"]
                input[10] = 5
                """
            }
        }

        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out.vcf_tbi.collect { [it[0], "${file(it[1]).name},variantsMD5:${path(it[1]).vcf.variantsMD5}", file(it[2]).name] },
                    workflow.out.vep_reports.collect { it instanceof String ? file(it).name : it },
                    workflow.out.snpeff_reports.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.snpeff_html.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.snpeff_genes.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.versions.collect { it instanceof String ? file(it).name : it }
                ).match()}
            )
        }
    }

    test("sarscov2 - snpeff") {

        when {
            workflow {
                """
                snpeff_cache = Channel.of([
                    [ id:'WBcel235.105' ],
                    file('s3://annotation-cache/snpeff_cache/WBcel235.105/')
                ]).collect()

                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true),
                    []
                ],
                [
                    [ id:'custom_test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true)
                    ]
                ])
                input[1] = [[],[]]
                input[2] = "WBcel235"
                input[3] = "caenorhabditis_elegans"
                input[4] = "113"
                input[5] = []
                input[6] = []
                input[7] = "WBcel235.105"
                input[8] = snpeff_cache
                input[9] = ["snpeff"]
                input[10] = 5
                """
            }
        }

        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out.vcf_tbi.collect { [it[0], "${file(it[1]).name},variantsMD5:${path(it[1]).vcf.variantsMD5}", file(it[2]).name] },
                    workflow.out.vep_reports.collect { it instanceof String ? file(it).name : it },
                    workflow.out.snpeff_reports.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.snpeff_html.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.snpeff_genes.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.versions.collect { it instanceof String ? file(it).name : it }
                ).match()}
            )
        }
    }

    test("sarscov2 - snpeff + ensemblvep") {

        when {
            workflow {
                """
                snpeff_cache = Channel.of([
                    [ id:'WBcel235.105' ],
                    file('s3://annotation-cache/snpeff_cache/WBcel235.105/')
                ]).collect()
                vep_cache = Channel.of(file('s3://annotation-cache/vep_cache/113_WBcel235/')).collect()

                input[0] = Channel.of(                [
                    [ id:'custom_test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true)
                    ]
                ])
                input[1] = [[],[]]
                input[2] = "WBcel235"
                input[3] = "caenorhabditis_elegans"
                input[4] = "113"
                input[5] = vep_cache
                input[6] = []
                input[7] = "WBcel235.105"
                input[8] = snpeff_cache
                input[9] = ["snpeff", "ensemblvep"]
                input[10] = 5
                """
            }
        }

        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out.vcf_tbi.collect { [it[0], "${file(it[1]).name},variantsMD5:${path(it[1]).vcf.variantsMD5}", file(it[2]).name] },
                    workflow.out.vep_reports.collect { it instanceof String ? file(it).name : it },
                    workflow.out.snpeff_reports.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.snpeff_html.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.snpeff_genes.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.versions.collect { it instanceof String ? file(it).name : it }
                ).match()}
            )
        }
    }

    test("sarscov2 - ensemblvep - large chunks") {

        when {
            workflow {
                """
                vep_cache = Channel.of(file('s3://annotation-cache/vep_cache/113_WBcel235/')).collect()

                input[0] = Channel.of(                [
                    [ id:'custom_test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true)
                    ]
                ])
                input[1] = [[],[]]
                input[2] = "WBcel235"
                input[3] = "caenorhabditis_elegans"
                input[4] = "113"
                input[5] = vep_cache
                input[6] = []
                input[7] = []
                input[8] = []
                input[9] = ["ensemblvep"]
                input[10] = 100
                """
            }
        }

        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out.vcf_tbi.collect { [it[0], "${file(it[1]).name},variantsMD5:${path(it[1]).vcf.variantsMD5}", file(it[2]).name] },
                    workflow.out.vep_reports.collect { it instanceof String ? file(it).name : it },
                    workflow.out.snpeff_reports.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.snpeff_html.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.snpeff_genes.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.versions.collect { it instanceof String ? file(it).name : it }
                ).match()}
            )
        }
    }

    test("sarscov2 - ensemblvep - no scatter") {

        when {
            workflow {
                """
                vep_cache = Channel.of(file('s3://annotation-cache/vep_cache/113_WBcel235/')).collect()

                input[0] = Channel.of([
                    [ id:'custom_test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz.tbi', checkIfExists: true),
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test3.vcf.gz.tbi', checkIfExists: true)
                    ]
                ])
                input[1] = [[],[]]
                input[2] = "WBcel235"
                input[3] = "caenorhabditis_elegans"
                input[4] = "113"
                input[5] = vep_cache
                input[6] = []
                input[7] = []
                input[8] = []
                input[9] = ["ensemblvep"]
                input[10] = []
                """
            }
        }

        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out.vcf_tbi.collect { [it[0], "${file(it[1]).name},variantsMD5:${path(it[1]).vcf.variantsMD5}", file(it[2]).name] },
                    workflow.out.vep_reports.collect { it instanceof String ? file(it).name : it },
                    workflow.out.snpeff_reports.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.snpeff_html.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.snpeff_genes.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.versions.collect { it instanceof String ? file(it).name : it }
                ).match()}
            )
        }
    }
}
