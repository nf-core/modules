// nf-core subworkflows test bcl_demultiplex
nextflow_workflow {

    name "Test Subworkflow test_bcl_demultiplex_bclconvert"
    script "../main.nf"
    config "./nextflow.config"
    workflow "BCL_DEMULTIPLEX"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/bcl_demultiplex"
    tag "bclconvert"
    tag "bcl2fastq"

    test("bclconvert") {

        when {

            workflow {
                """
                input[0] = Channel.value([
                    [id:'test', lane:1 ],
                    "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/bcl/flowcell_samplesheet.csv",
                    "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/bcl/flowcell.tar.gz"
                    ])
                input[1] = "bclconvert"
                """
                }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.reports,
                    workflow.out.versions,
                    workflow.out.fastq,
                    workflow.out.stats,
                    workflow.out.interop.get(0).get(1).findAll { file(it).name != "IndexMetricsOut.bin" },
                    ).match()
                },
                { assert file(workflow.out.interop.get(0).get(1).find { file(it).name == "IndexMetricsOut.bin" }).exists() }
            )
        }
    }

    test("bcl2fastq") {

        when {

            workflow {
                """
                input[0] = Channel.value([
                    [id:'test', lane:1 ],
                    "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/bcl/flowcell_samplesheet.csv",
                    "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/bcl/flowcell.tar.gz"
                    ])
                input[1] = "bcl2fastq"
                """
                    }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.reports,
                    workflow.out.versions,
                    workflow.out.fastq,
                    workflow.out.stats,
                    workflow.out.interop.get(0).get(1).findAll { file(it).name != "IndexMetricsOut.bin" },
                    ).match()
                },
                { assert file(workflow.out.interop.get(0).get(1).find { file(it).name == "IndexMetricsOut.bin" }).exists() }
            )
        }
    }
}
