nextflow_workflow {

    name "Test Workflow VCF_PHASE_SHAPEIT5"
    config "./nextflow.config"
    script "../main.nf"
    workflow "VCF_PHASE_SHAPEIT5"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/vcf_phase_shapeit5"
    tag "vcf_phase_shapeit5"

    tag "bedtools/makewindows"
    tag "bedtools"
    tag "shapeit5/phasecommon"
    tag "shapeit5/ligate"
    tag "shapeit5"
    tag "bcftools/index"
    tag "bcftools"

    tag "bcftools/view"
    tag "bcftools/pluginfilltags"

    test("homo_sapiens - panel - [] - [] - []") {
        when {
            params {
                bcftools_pluginfilltags_args = "--write-index"
                bcftools_pluginfilltags_args2 = "-t AC,AN"
                bcftools_view_args = ""
                bedtools_makewindows_args = "-w 60000 -s 40000"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:'ref_panel', region: "chr22:16570065-16609999"],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists:true),
                    [],
                    "chr22:16570065-16609999"
                ])
                input[1] = Channel.of([[],[],[]]).collect()
                input[2] = Channel.of([[],[],[]]).collect()
                input[3] = Channel.of([[],[]]).collect()
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path(workflow.out.variants_phased[0][1]).vcf.summary,
                    file(workflow.out.variants_index[0][1]).name,
                    workflow.out.bed,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("homo_sapiens - target - panel - [] - []") {
        setup {
            run("BCFTOOLS_VIEW") {
                script "../../../../modules/nf-core/bcftools/view/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [id:'NA12878', region:"chr22:16570065-16609999"],
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/vcf/NA12878.chr22.1X.vcf.gz", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/vcf/NA12878.chr22.1X.vcf.gz.csi", checkIfExists: true),
                    ])
                    input[1] = []
                    input[2] = []
                    input[3] = []
                    """
                }
            }

            run("BCFTOOLS_PLUGINFILLTAGS") {
                script "../../../../modules/nf-core/bcftools/pluginfilltags/main.nf"
                process {
                    """
                    input[0] = BCFTOOLS_VIEW.out.vcf
                        .join(BCFTOOLS_VIEW.out.csi)
                    input[1] = []
                    input[2] = []
                    input[3] = []
                    """
                }
            }
        }
        when {
            params {
                bcftools_pluginfilltags_args = "--write-index"
                bcftools_pluginfilltags_args2 = "-t AC,AN"
                bcftools_view_args = "-Oz -e 'GT=\"./.\"||GT=\".\"' --write-index"
                bedtools_makewindows_args = "-w 60000 -s 40000"
            }
            workflow {
                """
                input[0] = BCFTOOLS_PLUGINFILLTAGS.out.vcf
                    .join(BCFTOOLS_PLUGINFILLTAGS.out.csi)
                    .combine(Channel.of([[],"chr22:16570065-16609999"]))
                input[1] = Channel.of([
                    [panel:'1000GP'],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists:true),
                ]).collect()
                input[2] = Channel.of([[],[],[]]).collect()
                input[3] = Channel.of([[],[]]).collect() // Map can't be used on really small region (error: "Haploid underflow impossible to recover for [NA12878]")
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path(workflow.out.variants_phased[0][1]).vcf.variantsMD5,
                    file(workflow.out.variants_index[0][1]).name,
                    workflow.out.bed,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("homo_sapiens - panel - [] - [] - [] -- stub") {
        options "-stub"
        when {
            params {
                bcftools_pluginfilltags_args = "--write-index"
                bcftools_pluginfilltags_args2 = "-t AC,AN"
                bcftools_view_args = ""
                bedtools_makewindows_args = "-w 60000 -s 40000"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:'ref_panel', region: "chr22:16570065-16609999"],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists:true),
                    [],
                    "chr22:16570065-16609999"
                ])
                input[1] = Channel.of([[],[],[]]).collect()
                input[2] = Channel.of([[],[],[]]).collect()
                input[3] = Channel.of([[],[]]).collect()
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out,
                    workflow.out.versions.collect{ path(it).yaml }
                ).match() }
            )
        }
    }
}