nextflow_workflow {

    name "Test Workflow ABUNDANCE_DIFFERENTIAL_FILTER"
    script "../main.nf"
    workflow "ABUNDANCE_DIFFERENTIAL_FILTER"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/abundance_differential_filter"
    tag "custom/filterdifferentialtable"
    tag "limma/differential"
    tag "deseq2/differential"
    tag "propr/propd"
    tag "affy/justrma"
    tag "untar"

    test("deseq2 - mouse - basic") {
        config './deseq2_basic.config'
        tag "deseq2_basic"

        when {
            workflow {
                """
                // Define test data
                def testData = [
                    expression_test_data_dir: params.modules_testdata_base_path + 'genomics/mus_musculus/rnaseq_expression/',
                    contrasts_file: 'SRP254919.contrasts.csv',
                    abundance_file: 'SRP254919.salmon.merged.gene_counts.top1000cov.tsv',
                    samplesheet_file: 'SRP254919.samplesheet.csv'
                ]

                // Define inputs
                ch_samplesheet = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.samplesheet_file)
                ])
                ch_transcript_lengths = Channel.of([ [], [] ])
                ch_control_features = Channel.of([ [], [] ])
                ch_contrasts = Channel.fromPath(file(testData.expression_test_data_dir + testData.contrasts_file))
                    .splitCsv ( header:true, sep:',' )
                    .map{
                        tuple(it, it.variable, it.reference, it.target)
                    }
                ch_input = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.abundance_file),
                    'deseq2',  // analysis method
                    1.5,       // FC threshold
                    0.05       // stat (adjusted p-value) threshold
                ])

                input[0] = ch_input
                input[1] = ch_samplesheet
                input[2] = ch_transcript_lengths
                input[3] = ch_control_features
                input[4] = ch_contrasts
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.results_genewise,
                    workflow.out.results_genewise_filtered,
                    workflow.out.normalised_matrix,
                    workflow.out.variance_stabilised_matrix,
                    workflow.out.model,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("limma - basic - microarray") {
        config './limma_basic_microarray.config'
        tag "limma_basic_microarray"

        setup {
            run("UNTAR") {
                script "../../../../modules/nf-core/untar/main.nf"
                process {
                    """
                    input[0] = [
                        [id: 'test'],
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/array_expression/GSE38751_RAW.tar", checkIfExists: true)
                    ]
                    """
                }
            }
            run("AFFY_JUSTRMA") {
                script "../../../../modules/nf-core/affy/justrma/main.nf"
                process {
                    """
                    ch_samplesheet = Channel.of([
                        [ id:'test'],
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/array_expression/GSE38751.csv", checkIfExists: true)
                        ]
                    )
                    input[0] = ch_samplesheet.join(UNTAR.out.untar)
                    input[1] = [[],[]]
                    """
                }
            }
        }

        when {
            workflow {
                """
                // Define test data
                def testData = [
                    expression_test_data_dir: params.modules_testdata_base_path + 'genomics/homo_sapiens/array_expression/',
                    contrasts_file: 'GSE38751.contrasts.csv',
                    samplesheet_file: 'GSE38751.csv'
                ]

                // Define inputs
                ch_samplesheet = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.samplesheet_file)
                ])
                ch_transcript_lengths = Channel.of([ [], [] ])
                ch_control_features = Channel.of([ [], [] ])
                ch_contrasts = Channel.of(['id': 'diagnosis_normal_uremia', 'variable': 'diagnosis', 'reference': 'normal', 'target': 'uremia'])
                    .map{
                        tuple(it, it.variable, it.reference, it.target)
                    }
                ch_input = AFFY_JUSTRMA.out.expression.map{ meta, file -> [
                    meta,
                    file,
                    'limma',
                    1.5,       // FC threshold
                    0.05       // stat (adjusted p-value) threshold
                ]}

                input[0] = ch_input
                input[1] = ch_samplesheet
                input[2] = ch_transcript_lengths
                input[3] = ch_control_features
                input[4] = ch_contrasts
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.results_genewise,
                    workflow.out.results_genewise_filtered,
                    workflow.out.normalised_matrix,
                    workflow.out.model,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("limma - voom") {
        config './limma_voom.config'
        tag "limma_voom"

        when {
            workflow {
                """
                // Define test data
                def testData = [
                    expression_test_data_dir: params.modules_testdata_base_path + 'genomics/mus_musculus/rnaseq_expression/',
                    contrasts_file: 'SRP254919.contrasts.csv',
                    abundance_file: 'SRP254919.salmon.merged.gene_counts.top1000cov.tsv',
                    samplesheet_file: 'SRP254919.samplesheet.csv'
                ]

                // Define inputs
                ch_samplesheet = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.samplesheet_file)
                ])
                ch_transcript_lengths = Channel.of([ [], [] ])
                ch_control_features = Channel.of([ [], [] ])
                ch_contrasts = Channel.fromPath(file(testData.expression_test_data_dir + testData.contrasts_file))
                    .splitCsv ( header:true, sep:',' )
                    .map{
                        tuple(it, it.variable, it.reference, it.target)
                    }
                ch_input = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.abundance_file),
                    'limma',
                    1.5,       // FC threshold
                    0.05       // stat (adjusted p-value) threshold
                ])

                input[0] = ch_input
                input[1] = ch_samplesheet
                input[2] = ch_transcript_lengths
                input[3] = ch_control_features
                input[4] = ch_contrasts
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert path(workflow.out.results_genewise[0][1]).getText().contains("ENSMUSG00000023978\t2.84055986312942") },
                { assert snapshot(
                    workflow.out.results_genewise_filtered,
                    workflow.out.normalised_matrix,
                    workflow.out.model,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("deseq2 - with transcript lengths") {
        config './deseq2_basic.config'
        tag "deseq2_with_lengths"

        when {
            workflow {
                """
                // Define test data
                def testData = [
                    expression_test_data_dir: params.modules_testdata_base_path + 'genomics/mus_musculus/rnaseq_expression/',
                    contrasts_file: 'SRP254919.contrasts.csv',
                    abundance_file: 'SRP254919.salmon.merged.gene_counts.top1000cov.tsv',
                    samplesheet_file: 'SRP254919.samplesheet.csv',
                    lengths_file: 'SRP254919.spoofed_lengths.tsv'
                ]

                // Define inputs
                ch_samplesheet = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.samplesheet_file)
                ])
                ch_transcript_lengths = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.lengths_file)
                ])
                ch_control_features = Channel.of([ [], [] ])
                ch_contrasts = Channel.fromPath(file(testData.expression_test_data_dir + testData.contrasts_file))
                    .splitCsv ( header:true, sep:',' )
                    .map{
                        tuple(it, it.variable, it.reference, it.target)
                    }
                ch_input = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.abundance_file),
                    'deseq2',
                    1.5,       // FC threshold
                    0.05       // stat (adjusted p-value) threshold
                ])

                input[0] = ch_input
                input[1] = ch_samplesheet
                input[2] = ch_transcript_lengths
                input[3] = ch_control_features
                input[4] = ch_contrasts
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.results_genewise,
                    workflow.out.results_genewise_filtered,
                    workflow.out.normalised_matrix,
                    workflow.out.variance_stabilised_matrix,
                    workflow.out.model,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("propd - mouse - basic") {
        tag 'propd'
        config './propd_basic.config'

        when {
            workflow {
                """
                // Define test data
                def testData = [
                    expression_test_data_dir: params.modules_testdata_base_path + 'genomics/mus_musculus/rnaseq_expression/',
                    contrasts_file: 'SRP254919.contrasts.csv',
                    abundance_file: 'SRP254919.salmon.merged.gene_counts.top1000cov.tsv',
                    samplesheet_file: 'SRP254919.samplesheet.csv'
                ]

                // Define inputs
                ch_samplesheet = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.samplesheet_file)
                ])
                ch_transcript_lengths = Channel.of([ [], [] ])
                ch_control_features = Channel.of([ [], [] ])
                ch_contrasts = Channel.fromPath(file(testData.expression_test_data_dir + testData.contrasts_file))
                    .splitCsv ( header:true, sep:',' )
                    .map{
                        tuple(it, it.variable, it.reference, it.target)
                    }
                ch_input = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.abundance_file),
                    'propd',  // analysis method
                    1.5,      // FC threshold
                    100       // stat (weighted connectivity) threshold
                ])

                input[0] = ch_input
                input[1] = ch_samplesheet
                input[2] = ch_transcript_lengths
                input[3] = ch_control_features
                input[4] = ch_contrasts
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.results_genewise,
                    workflow.out.results_genewise_filtered,
                    workflow.out.adjacency,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("deseq2 and limma - mouse - basic") {
        config './deseq2_limmavoom_basic.config'
        tag "deseq2+limmavoom"

        when {
            workflow {
                """
                // Define test data
                def testData = [
                    expression_test_data_dir: params.modules_testdata_base_path + 'genomics/mus_musculus/rnaseq_expression/',
                    contrasts_file: 'SRP254919.contrasts.csv',
                    abundance_file: 'SRP254919.salmon.merged.gene_counts.top1000cov.tsv',
                    samplesheet_file: 'SRP254919.samplesheet.csv'
                ]

                // Define inputs
                ch_samplesheet = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.samplesheet_file)
                ])
                ch_transcript_lengths = Channel.value([ [], [] ])
                ch_control_features = Channel.value([ [], [] ])
                ch_contrasts = Channel.fromPath(file(testData.expression_test_data_dir + testData.contrasts_file))
                    .splitCsv ( header:true, sep:',' )
                    .map{
                        tuple(it, it.variable, it.reference, it.target)
                    }
                ch_input = Channel.of(
                    [
                        [ id:'test' ],
                        file(testData.expression_test_data_dir + testData.abundance_file),
                        'limma',
                        1.5,       // FC threshold
                        0.05       // stat (adjusted p-value) threshold
                    ],
                    [
                        [ id:'test' ],
                        file(testData.expression_test_data_dir + testData.abundance_file),
                        'deseq2',
                        1.5,       // FC threshold
                        0.05       // stat (adjusted p-value) threshold
                    ]
                )

                input[0] = ch_input
                input[1] = ch_samplesheet
                input[2] = ch_transcript_lengths
                input[3] = ch_control_features
                input[4] = ch_contrasts
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.results_genewise,
                    workflow.out.results_genewise_filtered,
                    workflow.out.normalised_matrix,
                    workflow.out.variance_stabilised_matrix,
                    workflow.out.model,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("deseq2 + limma-voom + propd - mouse - basic") {
        tag "deseq2+limmavoom+propd"
        config './deseq2_limmavoom_propd_basic.config'

        when {
            workflow {
                """
                // Define test data
                def testData = [
                    expression_test_data_dir: params.modules_testdata_base_path + 'genomics/mus_musculus/rnaseq_expression/',
                    contrasts_file: 'SRP254919.contrasts.csv',
                    abundance_file: 'SRP254919.salmon.merged.gene_counts.top1000cov.tsv',
                    samplesheet_file: 'SRP254919.samplesheet.csv'
                ]

                // Define inputs
                ch_samplesheet = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.samplesheet_file)
                ])
                ch_transcript_lengths = Channel.value([ [], [] ])
                ch_control_features = Channel.value([ [], [] ])
                ch_contrasts = Channel.fromPath(file(testData.expression_test_data_dir + testData.contrasts_file))
                    .splitCsv ( header:true, sep:',' )
                    .map{
                        tuple(it, it.variable, it.reference, it.target)
                    }
                ch_input = Channel.of(
                    [
                        [ id:'test' ],
                        file(testData.expression_test_data_dir + testData.abundance_file),
                        'limma',
                        1.5,       // FC threshold
                        0.05       // stat (adjusted p-value) threshold
                    ],
                    [
                        [ id:'test' ],
                        file(testData.expression_test_data_dir + testData.abundance_file),
                        'deseq2',
                        1.5,       // FC threshold
                        0.05       // stat (adjusted p-value) threshold
                    ],
                    [
                        [ id:'test' ],
                        file(testData.expression_test_data_dir + testData.abundance_file),
                        'propd',
                        1.5,       // FC threshold
                        100        // stat (weighted connectivity) threshold
                    ]
                )

                input[0] = ch_input
                input[1] = ch_samplesheet
                input[2] = ch_transcript_lengths
                input[3] = ch_control_features
                input[4] = ch_contrasts
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.results_genewise,
                    workflow.out.results_genewise_filtered,
                    workflow.out.adjacency,
                    workflow.out.normalised_matrix,
                    workflow.out.variance_stabilised_matrix,
                    workflow.out.model,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("stub") {
        config './deseq2_basic.config'
        tag "stub"

        options "-stub"

        when {
            workflow {
                """
                // Define test data
                def testData = [
                    expression_test_data_dir: params.modules_testdata_base_path + 'genomics/mus_musculus/rnaseq_expression/',
                    contrasts_file: 'SRP254919.contrasts.csv',
                    abundance_file: 'SRP254919.salmon.merged.gene_counts.top1000cov.tsv',
                    samplesheet_file: 'SRP254919.samplesheet.csv'
                ]

                // Define inputs
                ch_samplesheet = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.samplesheet_file)
                ])
                ch_transcript_lengths = Channel.of([ [], [] ])
                ch_control_features = Channel.of([ [], [] ])
                ch_contrasts = Channel.fromPath(file(testData.expression_test_data_dir + testData.contrasts_file))
                    .splitCsv ( header:true, sep:',' )
                    .map{
                        tuple(it, it.variable, it.reference, it.target)
                    }
                ch_input = Channel.of([
                    [ id:'test' ],
                    file(testData.expression_test_data_dir + testData.abundance_file),
                    'deseq2',
                    1.5,       // FC threshold
                    0.05       // stat (adjusted p-value) threshold
                ])

                input[0] = ch_input
                input[1] = ch_samplesheet
                input[2] = ch_transcript_lengths
                input[3] = ch_control_features
                input[4] = ch_contrasts
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }
}