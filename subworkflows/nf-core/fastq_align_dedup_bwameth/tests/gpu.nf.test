nextflow_workflow {

    name "Test Subworkflow FASTQ_ALIGN_DEDUP_BWAMETH"
    script "../main.nf"
    workflow "FASTQ_ALIGN_DEDUP_BWAMETH"
    config "./nextflow.config"

    tag "gpu"
    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastq_align_dedup_bwameth"
    tag "bwameth/align"
    tag "parabricks/fq2bammeth"
    tag "samtools/sort"
    tag "samtools/index"
    tag "samtools/flagstat"
    tag "samtools/stats"
    tag "picard/markduplicates"
    tag "samtools/index"
    tag "methyldackel/extract"
    tag "methyldackel/mbias"
    tag "untar"

    setup {
        run("UNTAR") {
            script "../../../../modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = [
                    [:],
                    file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/Bwameth_Index.tar.gz', checkIfExists: true)
                ]
                """
            }
        }
    }

    test("Params: parabricks/fq2bammeth single-end | use_gpu") {

        when {
            params {
                skip_deduplication = false
                use_gpu            = true
            }

            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/SRR389222_sub1.fastq.gz', checkIfExists: true)
                ])
                input[1] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                input[2] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa.fai', checkIfExists: true)
                ])
                input[3] = UNTAR.out.untar
                input[4] = params.skip_deduplication
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    workflow.out.bai.collect { meta, bai -> file(bai).name },
                    workflow.out.samtools_flagstat,
                    workflow.out.samtools_stats,
                    workflow.out.methydackel_extract_bedgraph,
                    workflow.out.methydackel_extract_methylkit,
                    workflow.out.methydackel_mbias,
                    workflow.out.picard_metrics.collect { meta, metrics -> file(metrics).name },
                    workflow.out.multiqc.flatten().collect { path -> file(path).name },
                    workflow.out.versions
                    ).match() }
            )
        }
    }

    test("Params: parabricks/fq2bammeth single-end | use_gpu | skip_deduplication") {

        when {
            params {
                skip_deduplication = true
                use_gpu            = true
            }

            workflow {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/SRR389222_sub1.fastq.gz', checkIfExists: true)
                ])
                input[1] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                input[2] = Channel.of([
                            [:],
                            file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa.fai', checkIfExists: true)
                ])
                input[3] = UNTAR.out.untar
                input[4] = params.skip_deduplication
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    workflow.out.bai.collect { meta, bai -> file(bai).name },
                    workflow.out.samtools_flagstat,
                    workflow.out.samtools_stats,
                    workflow.out.methydackel_extract_bedgraph,
                    workflow.out.methydackel_extract_methylkit,
                    workflow.out.methydackel_mbias,
                    workflow.out.picard_metrics.collect { meta, metrics -> file(metrics).name },
                    workflow.out.multiqc.flatten().collect { path -> file(path).name },
                    workflow.out.versions
                    ).match() }
            )
        }
    }

}
