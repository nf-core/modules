nextflow_workflow {

    name "Test Workflow MULTIPLE_IMPUTE_GLIMPSE2"
    config "./nextflow.config"
    script "../main.nf"
    workflow "MULTIPLE_IMPUTE_GLIMPSE2"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "multiple_impute_glimpse2"
    tag "subworkflows/multiple_impute_glimpse2"

    tag "glimpse2/chunk"
    tag "glimpse2/splitreference"
    tag "glimpse2/phase"
    tag "glimpse2/ligate"
    tag "glimpse2"
    tag "bcftools/index"
    tag "bcftools"

    test("homo_sapiens - vcf [] - panel vcf region - [] - [] - recursive") {
        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id:'input_vcf'],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/vcf/NA12878.chr22.1X.vcf.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/vcf/NA12878.chr22.1X.vcf.gz.csi", checkIfExists: true),
                    []
                ])
                input[1] = Channel.of([
                    [id:'ref_panel', chr: "22"],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists:true),
                    "chr22",
                ])
                input[2] = Channel.of([
                    [id: 'ref_panel', chr: "22"],
                    []
                ])
                input[3] = Channel.of([[id:'ref_fasta'], [], []]).collect()
                input[4] = "recursive"
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.chunk_chr,
                    workflow.out.merged_variants.collect{ path(it[1]).vcf.variantsMD5},
                    file(workflow.out.merged_variants_index[0][1]).name, // The .csi index file sometimes change
                    workflow.out.versions
                ).match() }
            )
        }
    }
    test("homo_sapiens - vcf sample - panel vcf - [] - [] - recursive") {
        when {
            workflow {
                """
                sample = Channel.of('NA12878 2')
                    .collectFile(name: 'sampleinfos.txt')
                input[0] = Channel.of([
                    [id:'input_vcf'],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/vcf/NA12878.chr22.1X.vcf.gz", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/vcf/NA12878.chr22.1X.vcf.gz.csi", checkIfExists: true),
                ]).combine(sample)
                input[1] = Channel.of([
                    [id:'ref_panel', chr: "22"],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists:true),
                    "chr22:16570065-16609999",
                ])
                input[2] = Channel.of([
                    [id:'ref_panel', chr: "22"],
                    []
                ]).collect()
                input[3] = Channel.of([
                    [id:'ref_fasta'],
                    [],
                    []
                ]).collect()
                input[4] = "recursive"
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.chunk_chr,
                    workflow.out.merged_variants.collect{ path(it[1]).vcf.variantsMD5},
                    file(workflow.out.merged_variants_index[0][1]).name,
                    workflow.out.versions
                ).match() }
            )
        }
    }
    test("homo_sapiens - bam [] - panel vcf - [] - [] - sequential") {
        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id:'input_bam'],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/NA12878.chr22.1X.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/NA12878.chr22.1X.bam.bai", checkIfExists: true),
                    []
                ])
                input[1] = Channel.of([
                    [id:'ref_panel', chr: "22"],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists:true),
                    "chr22",
                ])
                input[2] = Channel.of([
                    [id: 'ref_panel', chr: "22"],
                    []
                ])
                input[3] = Channel.of([[id:'ref_fasta'], [], []]).collect()
                input[4] = "sequential"
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.chunk_chr,
                    workflow.out.merged_variants.collect{ path(it[1]).vcf.variantsMD5},
                    file(workflow.out.merged_variants_index[0][1]).name,
                    workflow.out.versions
                ).match() }
            )
        }
    }
    test("homo_sapiens - bam [] - panel vcf - [] - [] - sequential -- stub") {
        tag "stub"
        options "-stub"
        when {
            workflow {
                """
                input[0] = input[0] = Channel.of([
                    [id:'input_bam'],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/NA12878.chr22.1X.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/bam/NA12878.chr22.1X.bam.bai", checkIfExists: true),
                    []
                ])
                input[1] = Channel.of([
                    [id:'ref_panel', chr: "22"],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz", checkIfExists:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/popgen/1000GP.chr22.vcf.gz.csi", checkIfExists:true),
                    "chr22",
                ])
                input[2] = Channel.of([
                    [id: 'ref_panel', chr: "22"],
                    []
                ])
                input[3] = Channel.of([[id:'ref_fasta'], [], []]).collect()
                input[4] = "sequential"
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out
                ).match() }
            )
        }
    }
}