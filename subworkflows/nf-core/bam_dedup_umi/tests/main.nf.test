nextflow_workflow {

    name "Test Workflow BAM_DEDUP_UMI"
    script "../main.nf"
    workflow "BAM_DEDUP_UMI"
    config "./nextflow.config"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/bam_dedup_umi"
    tag "bam_dedup_stats_samtools_umicollapse"
    tag "bam_dedup_stats_samtools_umitools"
    tag "bam_sort_stats_samtools"
    tag "umitools/prepareforrsem"
    tag "samtools/sort"

    test("sarscov2_bam_bai - umitools - with transcriptome bams") {

        when {
            workflow {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.umi.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.umi.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = 'umitools'
                input[3] = false
                input[4] = false
                input[5] = [
                    [ id:'test'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.umi.sorted.bam', checkIfExists: true)                ]
                input[6] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/transcriptome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    bam(workflow.out.bam[0][1]).getReadsMD5(),
                    bam(workflow.out.transcriptome_bam[0][1]).getReadsMD5(),
                    workflow.out.stats,
                    workflow.out.flagstat,
                    workflow.out.idxstats,
                    workflow.out.versions
                ).match() },
                { assert path(workflow.out.bai.get(0).get(1)).exists() }
            )
        }

    }

    test("sarscov2_bam_bai - umicollapse - no transcriptome bams") {

        when {
            workflow {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.umi.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.umi.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = 'umicollapse'
                input[3] = false
                input[4] = false
                input[5] = Channel.empty()
                input[6] = Channel.empty()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    bam(workflow.out.bam[0][1]).getReadsMD5(),
                    workflow.out.stats,
                    workflow.out.flagstat,
                    workflow.out.idxstats,
                    workflow.out.versions
                ).match() },
                { assert path(workflow.out.bai.get(0).get(1)).exists() }
            )
        }
    }
}