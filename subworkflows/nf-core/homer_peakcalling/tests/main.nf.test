nextflow_workflow {

    name "Test Workflow HOMER_PEAKCALLING"
    script "../main.nf"
    workflow "HOMER_PEAKCALLING"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/homer_peakcalling"
    tag "homer"
    tag "homer/maketagdirectory"
    tag "homer/makeucscfile"
    tag "homer/findpeaks"
    tag "homer/mergepeaks"
    tag "homer/annotatepeaks"
    tag "homer/pos2bed"

    test("sarscov2 - bam - no merge, no annotation") {

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [ [ id: 'sample1' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ],
                    [ [ id: 'sample2' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ]
                )
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                input[3] = []
                input[4] = []
                input[5] = false  // merge_peaks
                input[6] = false  // annotate_individual
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path(workflow.out.bed_graph.get(0).get(1)).linesGzip.size(),
                    workflow.out.peaks,
                    workflow.out.bed,
                    workflow.out.merged_peaks,
                    workflow.out.annotated_individual,
                    workflow.out.annotated_merged,
                    path(workflow.out.versions.get(0)).yaml
                ).match() }
            )
        }
    }

    test("sarscov2 - bam - merge only, annotate merged") {

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [ [ id: 'sample1' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ],
                    [ [ id: 'sample2' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ]
                )
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                input[3] = []
                input[4] = []
                input[5] = true   // merge_peaks
                input[6] = false  // annotate_individual
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path(workflow.out.bed_graph.get(0).get(1)).linesGzip.size(),
                    workflow.out.peaks,
                    workflow.out.bed,
                    workflow.out.merged_peaks,
                    workflow.out.annotated_individual,
                    workflow.out.annotated_merged,
                    path(workflow.out.versions.get(0)).yaml
                ).match() }
            )
        }
    }

    test("sarscov2 - bam - no merge, annotate individual") {

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [ [ id: 'sample1' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ],
                    [ [ id: 'sample2' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ]
                )
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                input[3] = []
                input[4] = []
                input[5] = false  // merge_peaks
                input[6] = true   // annotate_individual
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path(workflow.out.bed_graph.get(0).get(1)).linesGzip.size(),
                    workflow.out.peaks,
                    workflow.out.bed,
                    workflow.out.merged_peaks,
                    workflow.out.annotated_individual,
                    workflow.out.annotated_merged,
                    path(workflow.out.versions.get(0)).yaml
                ).match() }
            )
        }
    }

    test("sarscov2 - bam - merge and annotate both") {

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [ [ id: 'sample1' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ],
                    [ [ id: 'sample2' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ]
                )
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                input[3] = []
                input[4] = []
                input[5] = true   // merge_peaks
                input[6] = true   // annotate_individual
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path(workflow.out.bed_graph.get(0).get(1)).linesGzip.size(),
                    workflow.out.peaks,
                    workflow.out.bed,
                    workflow.out.merged_peaks,
                    workflow.out.annotated_individual,
                    workflow.out.annotated_merged,
                    path(workflow.out.versions.get(0)).yaml
                ).match() }
            )
        }
    }

    test("sarscov2 - bed - no merge, no annotation") {

        config "./bed.config"

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [ [ id: 'sample1' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true) ],
                    [ [ id: 'sample2' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test2.bed', checkIfExists: true) ]
                )
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                input[3] = []
                input[4] = []
                input[5] = false
                input[6] = false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path(workflow.out.bed_graph.get(0).get(1)).linesGzip.size(),
                    workflow.out.peaks,
                    workflow.out.bed,
                    workflow.out.merged_peaks,
                    workflow.out.annotated_individual,
                    workflow.out.annotated_merged,
                    path(workflow.out.versions.get(0)).yaml
                ).match() }
            )
        }
    }

    test("GROseq tutorial files with uniqmap") {

        tag "uniqmap"
        config "./bed.config"

        when {
            workflow {
                """
                input[0] = [
                    [ id: 'groseq_test' ],
                    [
                        file('ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM340nnn/GSM340901/suppl/GSM340901_lib1_aligned.bed.gz', checkIfExists: true),
                        file('ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM340nnn/GSM340902/suppl/GSM340902_lib2_aligned.bed.gz', checkIfExists: true)
                    ],
                ]
                input[1] = file('https://hgdownload.soe.ucsc.edu/goldenPath/hg18/chromosomes/chr14.fa.gz', checkIfExists: true)
                input[2] = []  // gtf - not needed for this test
                input[3] = []  // control
                input[4] = file('https://raw.githubusercontent.com/nf-core/test-datasets/nascent/reference/uniqmap.GRCh38_chr21.50nt.zip', checkIfExists: true)
                input[5] = false  // merge_peaks
                input[6] = false  // annotate_individual
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path(workflow.out.bed_graph.get(0).get(1)).linesGzip.size(),
                    workflow.out.peaks,
                    workflow.out.bed,
                    workflow.out.merged_peaks,
                    workflow.out.annotated_individual,
                    workflow.out.annotated_merged,
                    path(workflow.out.versions.get(0)).yaml
                ).match() }
            )
        }
    }

    test("sarscov2 - stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [ [ id: 'sample1' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ]
                )
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                input[3] = []
                input[4] = []
                input[5] = true
                input[6] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }
}
