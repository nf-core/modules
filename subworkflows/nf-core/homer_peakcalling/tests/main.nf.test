nextflow_workflow {

    name "Test Workflow HOMER_PEAKCALLING"
    script "../main.nf"
    workflow "HOMER_PEAKCALLING"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/homer_peakcalling"
    tag "homer"
    tag "unzip"
    tag "homer/maketagdirectory"
    tag "homer/makeucscfile"
    tag "homer/findpeaks"
    tag "homer/mergepeaks"
    tag "homer/annotatepeaks"
    tag "homer/pos2bed"

    test("sarscov2 - bam - no merge, no annotation") {

        when {
            workflow {
                """
                // style
                input[0] = "factor"
                // bam
                input[1] = Channel.of(
                    [ [ id: 'sample1' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ],
                    [ [ id: 'sample2' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ]
                )
                // tagdir
                input[2] = []
                // fasta
                input[3] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                // gtf
                input[4] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                // control bam
                input[5] = []
                // control tagdir
                input[6] = []
                // uniqmap
                input[7] = []
                // merge_peaks
                input[8] = false
                // annotate_individual
                input[9] = false
                // quantify_peaks
                input[10] = false
                // make_bedgraph
                input[11] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.tagdir,
                    path(workflow.out.bedgraph.get(0).get(1)).linesGzip.size(),
                    workflow.out.txt,
                    workflow.out.gtf,
                    workflow.out.bed,
                    workflow.out.merged_txt,
                    workflow.out.annotated_individual,
                    workflow.out.annotated_merged,
                    workflow.out.count_matrix,
                    path(workflow.out.versions.get(0)).yaml
                ).match() }
            )
        }
    }

    test("sarscov2 - bam - merge only, annotate merged") {

        when {
            workflow {
                """
                // style
                input[0] = "factor"
                // bam
                input[1] = Channel.of(
                    [ [ id: 'sample1' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ],
                    [ [ id: 'sample2' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ]
                )
                // tagdir
                input[2] = []
                // fasta
                input[3] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                // gtf
                input[4] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                // control bam
                input[5] = []
                // control tagdir
                input[6] = []
                // uniqmap
                input[7] = []
                // merge_peaks
                input[8] = true
                // annotate_individual
                input[9] = false
                // quantify_peaks
                input[10] = false
                // make_bedgraph
                input[11] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.tagdir,
                    path(workflow.out.bedgraph.get(0).get(1)).linesGzip.size(),
                    workflow.out.txt,
                    workflow.out.gtf,
                    workflow.out.bed,
                    workflow.out.merged_txt,
                    workflow.out.annotated_individual,
                    workflow.out.annotated_merged,
                    workflow.out.count_matrix,
                    path(workflow.out.versions.get(0)).yaml
                ).match() }
            )
        }
    }

    test("sarscov2 - bam - no merge, annotate individual") {

        when {
            workflow {
                """
                // style
                input[0] = "factor"
                // bam
                input[1] = Channel.of(
                    [ [ id: 'sample1' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ],
                    [ [ id: 'sample2' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ]
                )
                // tagdir
                input[2] = []
                // fasta
                input[3] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                // gtf
                input[4] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                // control bam
                input[5] = []
                // control tagdir
                input[6] = []
                // uniqmap
                input[7] = []
                // merge_peaks
                input[8] = false
                // annotate_individual
                input[9] = true
                // quantify_peaks
                input[10] = false
                // make_bedgraph
                input[11] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.tagdir,
                    path(workflow.out.bedgraph.get(0).get(1)).linesGzip.size(),
                    workflow.out.txt,
                    workflow.out.gtf,
                    workflow.out.bed,
                    workflow.out.merged_txt,
                    workflow.out.annotated_individual,
                    workflow.out.annotated_merged,
                    workflow.out.count_matrix,
                    path(workflow.out.versions.get(0)).yaml
                ).match() }
            )
        }
    }

    test("sarscov2 - bam - merge and annotate both, with quantification") {

        when {
            workflow {
                """
                // style
                input[0] = "factor"
                // bam
                input[1] = Channel.of(
                    [ [ id: 'sample1' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ],
                    [ [ id: 'sample2' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ]
                )
                // tagdir
                input[2] = []
                // fasta
                input[3] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                // gtf
                input[4] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                // control bam
                input[5] = []
                // control tagdir
                input[6] = []
                // uniqmap
                input[7] = []
                // merge_peaks
                input[8] = true
                // annotate_individual
                input[9] = true
                // quantify_peaks
                input[10] = true
                // make_bedgraph
                input[11] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.tagdir,
                    path(workflow.out.bedgraph.get(0).get(1)).linesGzip.size(),
                    workflow.out.txt,
                    workflow.out.gtf,
                    workflow.out.bed,
                    workflow.out.merged_txt,
                    workflow.out.annotated_individual,
                    workflow.out.annotated_merged,
                    workflow.out.count_matrix,
                    path(workflow.out.versions.get(0)).yaml
                ).match() }
            )
        }
    }

    test("sarscov2 - bam with control") {

        when {
            workflow {
                """
                // style
                input[0] = "factor"
                // bam
                input[1] = Channel.of(
                    [ [ id: 'sample1' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ],
                    [ [ id: 'sample2' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true) ]
                )
                // tagdir
                input[2] = []
                // fasta
                input[3] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                // gtf
                input[4] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                // control bam
                input[5] = Channel.of(
                    [ [ id: 'control' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ]
                )
                // control tagdir
                input[6] = []
                // uniqmap
                input[7] = []
                // merge_peaks
                input[8] = false
                // annotate_individual
                input[9] = false
                // quantify_peaks
                input[10] = false
                // make_bedgraph
                input[11] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.tagdir,
                    path(workflow.out.bedgraph.find {it[0].id == "sample1"}[1]).linesGzip.size(),
                    workflow.out.txt.size(),
                    workflow.out.bed.size(),
                    path(workflow.out.versions.get(0)).yaml
                ).match() }
            )
        }
    }

    test("GROseq tutorial files with uniqmap") {

        tag "uniqmap"
        config "./bed.config"

        when {
            workflow {
                """
                // style
                input[0] = "groseq"
                // bam
                input[1] = [
                    [ id: 'groseq_test' ],
                    [
                        file('ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM340nnn/GSM340901/suppl/GSM340901_lib1_aligned.bed.gz', checkIfExists: true),
                        file('ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM340nnn/GSM340902/suppl/GSM340902_lib2_aligned.bed.gz', checkIfExists: true)
                    ],
                ]
                // tagdir
                input[2] = []
                // fasta
                input[3] = file('https://hgdownload.soe.ucsc.edu/goldenPath/hg18/chromosomes/chr14.fa.gz', checkIfExists: true)
                // gtf
                input[4] = []
                // control bam
                input[5] = []
                // control tagdir
                input[6] = []
                // uniqmap
                input[7] = file('https://raw.githubusercontent.com/nf-core/test-datasets/nascent/reference/uniqmap.GRCh38_chr21.50nt.zip', checkIfExists: true)
                // merge_peaks
                input[8] = false
                // annotate_individual
                input[9] = false
                // quantify_peaks
                input[10] = false
                // make_bedgraph
                input[11] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.tagdir.size(),
                    path(workflow.out.bedgraph.get(0).get(1)).linesGzip.size(),
                    workflow.out.txt,
                    workflow.out.gtf,
                    workflow.out.bed,
                    path(workflow.out.versions.get(0)).yaml
                ).match() }
            )
        }
    }

    test("sarscov2 - stub") {

        options "-stub"

        when {
            workflow {
                """
                // style
                input[0] = "factor"
                // bam
                input[1] = Channel.of(
                    [ [ id: 'sample1' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true) ]
                )
                // tagdir
                input[2] = []
                // fasta
                input[3] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                // gtf
                input[4] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                // control bam
                input[5] = []
                // control tagdir
                input[6] = []
                // uniqmap
                input[7] = []
                // merge_peaks
                input[8] = true
                // annotate_individual
                input[9] = true
                // quantify_peaks
                input[10] = true
                // make_bedgraph
                input[11] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }
}
