nextflow_workflow {

    name "Test Subworkflow METHYLDACKEL_EXTRACT_MBIAS"
    script "../main.nf"
    workflow "METHYLDACKEL_EXTRACT_MBIAS"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/methyldackel_extract_mbias"
    tag "methyldackel/extract"
    tag "methyldackel/mbias"

    test("Test with BAM input") {

        when {
            workflow {
                """
                // Define the input channels required by the METHYLDACKEL workflow
                input[0] = Channel.of([
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true)
                ])
                input[1] = Channel.of([
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai", checkIfExists: true)
                ])
                input[2] = Channel.of([
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
                ])
                input[3] = Channel.of([
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta.fai", checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    // Snapshot the outputs ('emit') from the METHYLDACKEL workflow
                    workflow.out.methydackel_extract_bedgraph,
                    workflow.out.methydackel_extract_methylkit,
                    workflow.out.methydackel_mbias,
                    workflow.out.versions,
                    workflow.out.multiqc
                ).match() }
            )
        }
    }
}
