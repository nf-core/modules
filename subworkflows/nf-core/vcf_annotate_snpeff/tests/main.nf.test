nextflow_workflow {

    name "Test Subworkflow VCF_ANNOTATE_SNPEFF"
    script "../main.nf"
    workflow "VCF_ANNOTATE_SNPEFF"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/vcf_annotate_snpeff"
    tag "snpeff/download"
    tag "snpeff/snpeff"
    tag "tabix/bgziptabix"

    config "./nextflow.config"

    test("WBcel235.105 - test.vcf.gz") {

        setup {
            run("SNPEFF_DOWNLOAD") {
                script "../../../../modules/nf-core/snpeff/download"
                process {
                    """
                    input[0] = [
                        [id:"WBcel235.105"],
                        "WBcel235.105"
                    ]
                    """
                }
            }
        }

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true)
                ])
                input[1] = "WBcel235.105"
                input[2] = SNPEFF_DOWNLOAD.out.cache
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.vcf_tbi.collect { [it[0], "${file(it[1]).name},variantsMD5:${path(it[1]).vcf.variantsMD5}", file(it[2]).name] },
                    workflow.out.reports.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.summary.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.genes_txt.collect { it.collect { it instanceof String ? file(it).name : it } },
                    workflow.out.versions.collect { it }
                ).match()}
            )
        }
    }

    test("WBcel235.105 - test.vcf.gz -stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true)
                ])
                input[1] = "WBcel235.105"
                input[2] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file("${projectDir}", checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }
}
